/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _src_vector_render_engine_render_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _src_vector_render_engine_camera__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(15);
/* harmony import */ var _src_vector_render_engine_adapters_vector_api_adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(24);
/* harmony import */ var _camera_stuff__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(93);
/* harmony import */ var _src_vector_render_engine_visibility_primitives_label_color_id_point_label_renderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(95);
/* harmony import */ var _src_vector_render_engine_visibility_primitives_label_color_id_curved_label_renderer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(111);
/* harmony import */ var _src_vector_render_engine_render_primitives_label_point_label_render_unit__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(104);
/* harmony import */ var _src_vector_render_engine_render_primitives_label_curved_label_render_unit__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(113);
/* harmony import */ var _src_vector_render_engine_render_primitives_icon_icon_render_unit__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(115);
/* harmony import */ var _src_vector_render_engine_render_primitives_model_model_render_unit__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(121);
/* harmony import */ var _src_vector_render_engine_render_primitives_polyline_textured_polyline_render_unit__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(127);
/* harmony import */ var _src_vector_render_engine_render_primitives_polyline_polyline_render_unit__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(131);
/* harmony import */ var _src_vector_render_engine_render_primitives_polygon_textured_polygon_render_unit__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(135);
/* harmony import */ var _src_vector_render_engine_render_primitives_polygon_transparent_polygon_render_unit__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(138);
/* harmony import */ var _src_vector_render_engine_render_primitives_polygon_polygon_render_unit__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(139);
/* harmony import */ var _src_vector_render_engine_map_engine__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(142);
/* harmony import */ var _src_vector_render_engine_util_hd__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(48);
/* harmony import */ var _src_vector_render_engine_visibility_primitives_colliding_primitive_reset_removed_renderer__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(182);
/* harmony import */ var _src_vector_render_engine_render_loop__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(185);



















// import ImageRenderUnit from '../../src/vector_render_engine/render/primitives/image/image_render_unit';
// import RasterTilesAdapter from '../../src/vector_render_engine/adapters/raster_tiles/adapter';
// import {TileItem} from '../../src/vector_render_engine/adapters/tile_based_adapter/util/tile_system';
const GL_CONTEXT_ATTRIBS = {
    alpha: false,
    depth: true,
    stencil: false,
    antialias: false,
    failIfMajorPerformanceCaveat: true
};
const camera = new _src_vector_render_engine_camera__WEBPACK_IMPORTED_MODULE_1__["default"]({
    wrapModeX: 2 /* REPEAT */,
    wrapModeY: 0 /* NONE */
});
camera.onUpdate.addListener(() => Object(_camera_stuff__WEBPACK_IMPORTED_MODULE_3__["renderCameraState"])(camera));
camera.center.x = 0.20898437;
camera.center.y = 0.37304687;
camera.zoom = 14;
const canvas = document.querySelector('#canvas');
{
    const { width, height } = canvas.getBoundingClientRect();
    const dpr = Object(_src_vector_render_engine_util_hd__WEBPACK_IMPORTED_MODULE_16__["default"])();
    canvas.width = dpr * width;
    canvas.height = dpr * height;
    camera.screenSize.width = width;
    camera.screenSize.height = height;
}
const cameraMouseController = new _camera_stuff__WEBPACK_IMPORTED_MODULE_3__["CameraMouseController"](canvas, camera);
const mouseDragController = new _camera_stuff__WEBPACK_IMPORTED_MODULE_3__["MouseDragController"](canvas);
mouseDragController.setDelegate(cameraMouseController);
const scrollZoomController = new _camera_stuff__WEBPACK_IMPORTED_MODULE_3__["ScrollZoomController"](canvas);
scrollZoomController.setDelegate(cameraMouseController);
const context = _src_vector_render_engine_render_context__WEBPACK_IMPORTED_MODULE_0__["default"].createFromCanvas(canvas, GL_CONTEXT_ATTRIBS);
const engine = new _src_vector_render_engine_map_engine__WEBPACK_IMPORTED_MODULE_15__["default"](context, camera, new _src_vector_render_engine_render_loop__WEBPACK_IMPORTED_MODULE_18__["default"]());
const vectorAdapter = new _src_vector_render_engine_adapters_vector_api_adapter__WEBPACK_IMPORTED_MODULE_2__["default"](engine, camera, './tile_provider_worker.js?worker', 
// '/src/vector_render_engine/adapters/vector_api/worker/tile_provider_worker.js?worker',
'map', 
// {
//     tileUrlTemplate: 'https://vec-rdr01e.tst.maps.yandex.ru/vmap2/tiles?l=vmap2&lang=ru_RU&x={{x}}&y={{y}}&z={{z}}&zmin={{zmin}}&zmax={{zmax}}',
//     imageUrlTemplate: 'https://vec-rdr01e.tst.maps.yandex.ru/resources?id={{id}}&scale={{scale}}',
//     meshUrlTemplate: 'https://vec-rdr01e.tst.maps.yandex.ru/meshes?id={{id}}',
//     glyphRangeUrlTemplate: 'https://vec-rdr01e.tst.maps.yandex.ru/glyphs?lang=ru_RU&font_id={{fontId}}&range={{range}}'
// }
{
    tileUrlTemplate: 'https://vec0{{hostAlias}}.maps.yandex.net/vmap2/tiles?l=vmap2&lang=RU_ru&x={{x}}&y={{y}}&z={{z}}&zmin={{zmin}}&zmax={{zmax}}',
    imageUrlTemplate: 'https://vec0{{hostAlias}}.maps.yandex.net/resources?id={{id}}&scale={{scale}}',
    meshUrlTemplate: 'https://vec0{{hostAlias}}.maps.yandex.net/vmap2/meshes?id={{id}}',
    glyphRangeUrlTemplate: 'https://vec0{{hostAlias}}.maps.yandex.net/glyphs?lang=RU_ru&font_id={{fontId}}&range={{range}}'
}, 1 /* X4 */);
// class TrafficLayerAdapter extends RasterTilesAdapter {
//     public _getImageUrl(tile: TileItem): string {
//         return `https://jgo.maps.yandex.net/1.1/tiles?trf&l=trf,trfe&lang=ru_UA&x=${tile.x}&y=${tile.y}&z=${tile.zoom}&scale=${window.devicePixelRatio}&tm=${Math.floor(Date.now() / 1000)}`
//         // return `https://sat03.maps.yandex.net/tiles?l=sat&v=3.419.0&x=${tile.x}&y=${tile.y}&z=${tile.zoom}&scale=${window.devicePixelRatio}&lang=ru_UA`
//     }
// }
// const trafficAdapter = new TrafficLayerAdapter(
//     engine,
//     camera,
//     {width: 256 * window.devicePixelRatio, height: 256 * window.devicePixelRatio}
// );
engine.groundLayer.addRenderUnit(new _src_vector_render_engine_render_primitives_polygon_polygon_render_unit__WEBPACK_IMPORTED_MODULE_14__["default"](context, vectorAdapter.opaquePolygonsProvider));
engine.groundLayer.addRenderUnit(new _src_vector_render_engine_render_primitives_polygon_transparent_polygon_render_unit__WEBPACK_IMPORTED_MODULE_13__["default"](context, vectorAdapter.transparentPolygonsProvider));
engine.groundLayer.addRenderUnit(new _src_vector_render_engine_render_primitives_polygon_textured_polygon_render_unit__WEBPACK_IMPORTED_MODULE_12__["default"](context, vectorAdapter.texturedPolygonsProvider));
engine.groundLayer.addRenderUnit(new _src_vector_render_engine_render_primitives_polyline_polyline_render_unit__WEBPACK_IMPORTED_MODULE_11__["default"](context, camera, vectorAdapter.polylinesProvider));
engine.groundLayer.addRenderUnit(new _src_vector_render_engine_render_primitives_polyline_textured_polyline_render_unit__WEBPACK_IMPORTED_MODULE_10__["default"](context, camera, vectorAdapter.texturedPolylinesProvider));
engine.buildingsLayer.addRenderUnit(new _src_vector_render_engine_render_primitives_model_model_render_unit__WEBPACK_IMPORTED_MODULE_9__["default"](context, vectorAdapter.modelsProvider));
// engine.iconsLayer.addRenderUnit(new ImageRenderUnit(context, trafficAdapter.imagesProvider));
engine.iconsLayer.addRenderUnit(new _src_vector_render_engine_render_primitives_icon_icon_render_unit__WEBPACK_IMPORTED_MODULE_8__["default"](context, camera, vectorAdapter.iconsProvider));
engine.labelsLayer.addRenderUnit(new _src_vector_render_engine_render_primitives_label_curved_label_render_unit__WEBPACK_IMPORTED_MODULE_7__["default"](context, camera, engine.visbilityTextureProvider, vectorAdapter.curvedLabelsProvider));
engine.labelsLayer.addRenderUnit(new _src_vector_render_engine_render_primitives_label_point_label_render_unit__WEBPACK_IMPORTED_MODULE_6__["default"](context, camera, engine.visbilityTextureProvider, vectorAdapter.pointLabelsProvider));
engine.visibilityManager.registerCollidingPrimitives(vectorAdapter.curvedLabelsProvider, new _src_vector_render_engine_visibility_primitives_label_color_id_curved_label_renderer__WEBPACK_IMPORTED_MODULE_5__["default"](context, camera, vectorAdapter.curvedLabelsProvider), new _src_vector_render_engine_visibility_primitives_colliding_primitive_reset_removed_renderer__WEBPACK_IMPORTED_MODULE_17__["CollidingPrimitivesResetRemovedRenderer"](context, vectorAdapter.curvedLabelsProvider));
engine.visibilityManager.registerCollidingPrimitives(vectorAdapter.pointLabelsProvider, new _src_vector_render_engine_visibility_primitives_label_color_id_point_label_renderer__WEBPACK_IMPORTED_MODULE_4__["default"](context, camera, vectorAdapter.pointLabelsProvider), new _src_vector_render_engine_visibility_primitives_colliding_primitive_reset_removed_renderer__WEBPACK_IMPORTED_MODULE_17__["CollidingPrimitivesResetRemovedRenderer"](context, vectorAdapter.pointLabelsProvider));
document.getElementById('plus').addEventListener('click', () => {
    camera.zoom += 0.1;
});
document.getElementById('minus').addEventListener('click', () => {
    camera.zoom -= 0.1;
});
// setTimeout(() => {
//     console.log('Setting new tile url template');
//     vectorAdapter.setTileUrlTemplate('https://vec-rdr01e.tst.maps.yandex.ru/vmap2/tiles?l=vmap2&lang=ru_RU&x={{x}}&y={{y}}&z={{z}}&zmin={{zmin}}&zmax={{zmax}}');
// }, 4000);


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultRenderTarget", function() { return DefaultRenderTarget; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RenderContext; });
/* harmony import */ var _attrib_mapping__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _gl_buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var _gl_framebuffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6);
/* harmony import */ var _gl_program__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7);
/* harmony import */ var _gl_renderbuffer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8);
/* harmony import */ var _capabilities__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9);
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(10);
/* harmony import */ var _gl_texture__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(12);
/* harmony import */ var _gl_vao__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(13);
/* harmony import */ var _util_color__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(11);
/* harmony import */ var _util_event_emitter__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(14);











const QUAD_VERTEX_DATA = new Float32Array([
    // tslint:disable
    // x   y  u  v
    -1, -1, 0, 0,
    1, 1, 1, 1,
    -1, 1, 0, 1,
    -1, -1, 0, 0,
    1, -1, 1, 0,
    1, 1, 1, 1
    // tslint:enable
]);
const QUAD_ATTRIB_MAPPING = new _attrib_mapping__WEBPACK_IMPORTED_MODULE_0__["AttributeMapping"]([
    [
        0 /* POSITION */,
        {
            size: 2,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ],
    [
        4 /* UV */,
        {
            size: 2,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ]
]);
/**
 * Default render target of a WebGL context, which is canvas element of the
 * context.
 */
class DefaultRenderTarget {
    constructor(gl) {
        this.isClear = false;
        this._gl = gl;
    }
    bind() {
        const gl = this._gl;
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    }
    setSize(width, height) {
        const canvas = this._gl.canvas;
        canvas.width = width;
        canvas.height = height;
    }
    getWidth() {
        return this._gl.drawingBufferWidth;
    }
    getHeight() {
        return this._gl.drawingBufferHeight;
    }
    destroy() {
        // We can't destroy default render target, so do nothing.
        // TODO(dmikis) Throw an exception?
    }
}
/**
 * Wrapper around WebGL context. Serves to localize all GL calls to minimum set
 * of objects.
 */
class RenderContext {
    /**
     * Creates a new wrapper for a given WebGL context.
     *
     * @param gl The context to be wrapped.
     */
    constructor(gl) {
        this._gl = gl;
        this.onLoss = new _util_event_emitter__WEBPACK_IMPORTED_MODULE_10__["VoidEventEmitter"]();
        this._contextLostListener = (e) => {
            e.preventDefault();
            this.onLoss.fire();
        };
        gl.canvas.addEventListener('webglcontextlost', this._contextLostListener);
        this._capabilities = new _capabilities__WEBPACK_IMPORTED_MODULE_5__["default"](gl);
        const vaoExt = gl.getExtension('OES_vertex_array_object');
        if (!vaoExt) {
            throw new Error('OES_vertex_array_object is required.');
        }
        this._vaoExt = vaoExt;
        if (!gl.getExtension('OES_standard_derivatives')) {
            throw new Error('OES_standard_derivatives is required.');
        }
        const defaultRenderTarget = this._boundRenderTarget =
            this._defaultRenderTarget =
                new DefaultRenderTarget(gl);
        const boundState = this._boundRenderState = new _state__WEBPACK_IMPORTED_MODULE_6__["default"]();
        this._unpackPremultiplyAlpha = false;
        // Default viewport and scissor rectangle sizes are equal to the size of
        // the canvas of the WebGL context. But we have no way of knowing them in
        // RenderState's constructor. So we're fixing them here.
        boundState.scissorWidth = boundState.viewportWidth =
            defaultRenderTarget.getWidth();
        boundState.scissorHeight = boundState.viewportHeight =
            defaultRenderTarget.getHeight();
        const quadBuffer = this._quadVertexBuffer =
            new _gl_buffer__WEBPACK_IMPORTED_MODULE_1__["default"](gl, gl.ARRAY_BUFFER, gl.STATIC_DRAW);
        quadBuffer.bind();
        gl.bufferData(gl.ARRAY_BUFFER, QUAD_VERTEX_DATA, gl.STATIC_DRAW);
        this._quadVao = this.createVao(QUAD_ATTRIB_MAPPING, quadBuffer, null);
        gl.bindBuffer(gl.ARRAY_BUFFER, null);
        this._boundProgram = null;
        this._boundVao = null;
        this._boundTextures = new Array(this._capabilities.getMaxCombinedTextureImageUnits());
        this._boundTextures.fill(null);
        this._boundTextureUnit = 0;
    }
    /**
     * Returns object to request capabilities of the context such as maximum
     * texture size or maximum number of uniform vectors allowed in shaders.
     */
    getCapabilities() {
        return this._capabilities;
    }
    /**
     * Creates a new framebuffer with given attachments.
     *
     * @param descriptor Object containing framebuffer attachments.
     * @returns Created framebuffer object.
     */
    createFramebuffer({ color, depth, stencil, depthStencil }) {
        // TODO Uncomment and put under debug flag (when implemented)
        // if (depthStencil && (depth || stencil)) {
        //     throw new Error(
        //         'Framebuffer can\'t have DEPTH_STENCIL and DEPTH or STENCIL ' +
        //             'attachment simultaneously.'
        //     );
        // }
        const gl = this._gl;
        let width = 0;
        let height = 0;
        if (color) {
            width = color.getWidth();
            height = color.getHeight();
        }
        else if (depth) {
            width = depth.getWidth();
            height = depth.getHeight();
        }
        else if (stencil) {
            width = stencil.getWidth();
            height = stencil.getHeight();
        }
        else if (depthStencil) {
            width = depthStencil.getWidth();
            height = depthStencil.getHeight();
        }
        const framebuffer = new _gl_framebuffer__WEBPACK_IMPORTED_MODULE_2__["default"](gl, width, height);
        this.bindRenderTarget(framebuffer);
        if (color) {
            color.attachToFramebuffer(gl.COLOR_ATTACHMENT0);
        }
        if (depth) {
            depth.attachToFramebuffer(gl.DEPTH_ATTACHMENT);
        }
        if (stencil) {
            stencil.attachToFramebuffer(gl.STENCIL_ATTACHMENT);
        }
        if (depthStencil) {
            depthStencil.attachToFramebuffer(gl.DEPTH_STENCIL_ATTACHMENT);
        }
        // TODO Uncomment and put under debug flag (when implemented)
        // switch (gl.checkFramebufferStatus(gl.FRAMEBUFFER)) {
        //     case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
        //         throw new Error('Framebuffer attachments are not renderable');
        //     case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
        //         throw new Error('Framebuffer attachments are not same size');
        //     case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
        //         throw new Error('Framebuffer has no attachments');
        //     case gl.FRAMEBUFFER_UNSUPPORTED:
        //         throw new Error('Framebuffer has unsupported attachment');
        // }
        return framebuffer;
    }
    /**
     * Allocates a new renderbuffer with given size and format.
     *
     * @param width Width of the renderbuffer.
     * @param height Height of the renderbuffer.
     * @param format Format of the renderbuffer.
     * @return The allocated renderbuffer.
     *
     */
    createRenderbuffer(width, height, format) {
        const gl = this._gl;
        const renderbuffer = new _gl_renderbuffer__WEBPACK_IMPORTED_MODULE_4__["default"](gl, width, height);
        renderbuffer.bind();
        gl.renderbufferStorage(gl.RENDERBUFFER, format, width, height);
        return renderbuffer;
    }
    /**
     * Allocates a new texture with given size, format, type and parameters and
     * fills it with zeroes.
     *
     * @param width Width of the texture.
     * @param height Height of the texture.
     * @param format Pixel format of the texture.
     * @param type Pixel type of the texture.
     * @param params Parameters of the texture.
     * @returns Newly allocated texture.
     */
    createEmpty2DTexture(width, height, format, type, params = _gl_texture__WEBPACK_IMPORTED_MODULE_7__["DEFAULT_TEXTURE_PARAMS"]) {
        const texture = new _gl_texture__WEBPACK_IMPORTED_MODULE_7__["default"](this._gl, width, height, format, type, params);
        return texture;
    }
    /**
     * Creates a new shader program. Uses cache, i.e. if a program with same
     * source string and options is already created, returns it.
     *
     * @param vertexShaderSource Source code of vertex shader of the program.
     * @param fragmentShaderSource Source code of fragment shader of the program.
     * @param options Options.
     * @returns Newly created program or one from the cache.
     */
    createProgram(vertexShaderSource, fragmentShaderSource, options) {
        return new _gl_program__WEBPACK_IMPORTED_MODULE_3__["default"](this._gl, vertexShaderSource, fragmentShaderSource, options);
    }
    createVertexBuffer(size, usage = 35044 /* STATIC_DRAW */) {
        return this._createBuffer(this._gl.ARRAY_BUFFER, size, usage);
    }
    createIndexBuffer(size, usage = 35044 /* STATIC_DRAW */) {
        return this._createBuffer(this._gl.ELEMENT_ARRAY_BUFFER, size, usage);
    }
    // TODO: check https://github.com/Microsoft/TypeScript/issues/24195 to update narrowed data type according
    uploadDataToBuffer(buffer, data, offset = 0) {
        buffer.bind();
        this._gl.bufferSubData(buffer.getTarget(), offset, data);
    }
    /**
     * Creates a new vertex array object in the context.
     *
     * @param attributeMapping Mapping of vertex attrbiutes for the VAO.
     * @param vertexBuffer Vertex buffer to be bound to the VAO.
     * @param indexBuffer Index buffer to be bound to the VAO.
     * @returns The new VAO.
     */
    createVao(attributeMapping, vertexBuffer, indexBuffer) {
        const gl = this._gl;
        const vao = new _gl_vao__WEBPACK_IMPORTED_MODULE_8__["default"](gl, this._vaoExt, attributeMapping);
        vao.bind();
        if (indexBuffer) {
            indexBuffer.bind();
        }
        else {
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
        }
        vertexBuffer.bind();
        const vertexByteSize = attributeMapping.vertexByteSize;
        for (const [idx, pointer] of attributeMapping) {
            gl.enableVertexAttribArray(idx);
            gl.vertexAttribPointer(idx, pointer.size, pointer.type, pointer.normalized, vertexByteSize, pointer.offset);
        }
        this._vaoExt.bindVertexArrayOES(null);
        return vao;
    }
    /**
     * Sets new content of texture, provided data must be of length equal to "width * height" and its type
     * must correspond to texture's type {@see PixelType}.
     */
    setTextureData(texture, data) {
        const gl = this._gl;
        const width = texture.getWidth();
        const height = texture.getHeight();
        const format = texture.getFormat();
        const type = texture.getType();
        const params = texture.getParams();
        this._setTextureDataUnpackParams(params);
        this.bindTexture(texture);
        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, format, type, data);
        this._onTextureDataUpdated(texture);
    }
    /**
     * Sets new texture content from canvas element.
     */
    setTextureDataFromDomElement(texture, element) {
        const gl = this._gl;
        const format = texture.getFormat();
        const type = texture.getType();
        const params = texture.getParams();
        this._setTextureDataUnpackParams(params);
        this.bindTexture(texture);
        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, format, type, element);
        this._onTextureDataUpdated(texture);
    }
    /**
     * Returns default render target associated with canvas on which the WebGL
     * context operates.
     */
    getDefaultRenderTarget() {
        return this._defaultRenderTarget;
    }
    /**
     * Clears currently bound render target according to a mask.
     *
     * @param mask Bitwise OR of marks, i.e.
     *      `ClearMask.COLOR_BUFFER_BIT | ClearMask.DEPTH_BUFFER_BIT`.
     */
    clearCurrentTarget(mask) {
        if (mask) {
            this._gl.clear(mask);
            this._boundRenderTarget.isClear = true;
        }
    }
    /**
     * Binds a render target to the WebGL context if it's not already bound.
     *
     * @param target The render target to be bound.
     */
    bindRenderTarget(target) {
        if (this._boundRenderTarget !== target) {
            target.bind();
            this._boundRenderTarget = target;
        }
        // Target size could change even if target is already bound.
        // VECTOR-190
        this._setViewportState(new _state__WEBPACK_IMPORTED_MODULE_6__["default"]({
            viewportWidth: target.getWidth(),
            viewportHeight: target.getHeight()
        }));
    }
    /**
     * Binds a render state to the WebGL context with minimum amount of actual
     * state switching.
     *
     * @param state The state to be bound.
     */
    bindRenderState(state) {
        this._setColorBufferState(state);
        this._setBlendState(state);
        this._setCullFaceState(state);
        this._setFrontFaceState(state);
        this._setDepthTestState(state);
        this._setDitherState(state);
        this._setDrawBuffersState(state);
        this._setPolygonOffsetState(state);
        this._setAlphaToCoverageState(state);
        this._setSampleCoverageState(state);
        this._setStencilTestState(state);
        this._setScissorTestState(state);
        this._setViewportState(state);
    }
    /**
     * Binds a program to the WebGL context if it's not already bound.
     *
     * @param program The program to be bound.
     */
    bindProgram(program) {
        if (this._boundProgram !== program) {
            program.bind();
            this._boundProgram = program;
        }
    }
    /**
     * Binds a vertex array object to the context if it's not already bound.
     *
     * @param vao The vertex array object to bind. Passing `null` will unbind
     *      any currently bound VAO.
     */
    bindVao(vao) {
        if (this._boundVao !== vao) {
            if (vao) {
                vao.bind();
            }
            else {
                this._vaoExt.bindVertexArrayOES(null);
            }
            this._boundVao = vao;
        }
    }
    bindQuadVao() {
        this.bindVao(this._quadVao);
    }
    bindTextureUnit(unit) {
        const gl = this._gl;
        if (this._boundTextureUnit !== unit) {
            gl.activeTexture(gl.TEXTURE0 + unit);
            this._boundTextureUnit = unit;
        }
    }
    bindTexture(texture) {
        const boundUnit = this._boundTextureUnit;
        if (this._boundTextures[boundUnit] !== texture) {
            texture.bind();
            this._boundTextures[boundUnit] = texture;
        }
    }
    /**
     * Draws a quad to currently bound render target with currently bound render
     * state, program and uniform state.
     */
    drawQuad() {
        this.drawMesh(0, 6, 4 /* TRIANGLES */);
    }
    /**
     * Draws a mesh from currently bound to ARRAY_BUFFER buffer.
     *
     * @param offset Index of the vertex to start drawing from.
     * @param count Number of vertices to process.
     * @param primitiveType
     */
    drawMesh(offset, count, primitiveType = 4 /* TRIANGLES */) {
        this._gl.drawArrays(primitiveType, offset, count);
        this._boundRenderTarget.isClear = false;
    }
    /**
     * Draws a mesh to currently bound render target with currently bound render
     * state, program and uniform state.
     *
     * @param offset Offset of indices of the mesh in currently bound memory page.
     * @param indexCount Number of indices in the mesh.
     */
    drawIndexedMesh(offset, indexCount, primitiveType = 4 /* TRIANGLES */) {
        const gl = this._gl;
        gl.drawElements(primitiveType, indexCount, gl.UNSIGNED_SHORT, offset);
        this._boundRenderTarget.isClear = false;
    }
    /**
     * Destroys the context and resources owned by it. Note that resources that
     * were created with `create*` method of the context aren't exactly belong
     * to the context, entities that created them have to destroy them.
     */
    destroy() {
        this._quadVao.destroy();
        this._quadVertexBuffer.destroy();
        this._gl.canvas.removeEventListener('webglcontextlost', this._contextLostListener);
    }
    /**
     * Creates a new context from a canvas.
     *
     * @throws An error if fails to create `webgl` context for the canvas.
     * @param canvas The canvas.
     * @param attribs Attributes of the context.
     */
    static createFromCanvas(canvas, attribs) {
        const gl = canvas.getContext('webgl', attribs);
        if (!gl) {
            throw new Error('Failed to create GL context from canvas.');
        }
        return new RenderContext(gl);
    }
    /**
     * Enables or disables a WebGL capability.
     * @see https://www.khronos.org/registry/OpenGL-Refpages/es2.0/xhtml/glEnable.xml
     *
     * @param capability The capability to be enabled of disabled.
     * @param enabled New state of the capability;
     */
    _setCapabilityEnabled(capability, enabled) {
        if (enabled) {
            this._gl.enable(capability);
        }
        else {
            this._gl.disable(capability);
        }
    }
    /**
     * Sets new clear color and color mask from a state if they're different from
     * currently set ones.
     *
     * @param state The state that contains new clear color and color masks.
     */
    _setColorBufferState(state) {
        const gl = this._gl;
        const boundState = this._boundRenderState;
        const newClearColor = state.clearColor;
        if (!_util_color__WEBPACK_IMPORTED_MODULE_9__["areEqual"](boundState.clearColor, newClearColor)) {
            gl.clearColor(newClearColor.r, newClearColor.g, newClearColor.b, newClearColor.a);
            _util_color__WEBPACK_IMPORTED_MODULE_9__["copy"](newClearColor, boundState.clearColor);
        }
        if (boundState.colorMaskR !== state.colorMaskR ||
            boundState.colorMaskG !== state.colorMaskG ||
            boundState.colorMaskB !== state.colorMaskB ||
            boundState.colorMaskAlpha !== state.colorMaskAlpha) {
            this._gl.colorMask(state.colorMaskR, state.colorMaskG, state.colorMaskB, state.colorMaskAlpha);
            boundState.colorMaskR = state.colorMaskR;
            boundState.colorMaskG = state.colorMaskG;
            boundState.colorMaskB = state.colorMaskB;
            boundState.colorMaskAlpha = state.colorMaskAlpha;
        }
    }
    /**
     * Sets blend state and params.
     *
     * @param state The state that contains new blend params.
     */
    _setBlendState(state) {
        const gl = this._gl;
        const boundState = this._boundRenderState;
        if (boundState.blend !== state.blend) {
            this._setCapabilityEnabled(gl.BLEND, state.blend);
            boundState.blend = state.blend;
        }
        if (state.blend) {
            if (boundState.blendEquationRgb !== state.blendEquationRgb ||
                boundState.blendEquationAlpha !== state.blendEquationAlpha) {
                gl.blendEquationSeparate(state.blendEquationRgb, state.blendEquationAlpha);
                boundState.blendEquationRgb = state.blendEquationRgb;
                boundState.blendEquationAlpha = state.blendEquationAlpha;
            }
            if (boundState.blendFuncDstRgb !== state.blendFuncDstRgb ||
                boundState.blendFuncSrcRgb !== state.blendFuncSrcRgb ||
                boundState.blendFuncDstAlpha !== state.blendFuncDstAlpha ||
                boundState.blendFuncSrcAlpha !== state.blendFuncSrcAlpha) {
                gl.blendFuncSeparate(state.blendFuncSrcRgb, state.blendFuncDstRgb, state.blendFuncSrcAlpha, state.blendFuncDstAlpha);
                boundState.blendFuncSrcRgb = state.blendFuncSrcRgb;
                boundState.blendFuncDstRgb = state.blendFuncDstRgb;
                boundState.blendFuncSrcAlpha = state.blendFuncSrcAlpha;
                boundState.blendFuncDstAlpha = state.blendFuncDstAlpha;
            }
        }
    }
    /**
     * Sets cull face state and params.
     *
     * @param state The state that contains new cull face state and mode.
     */
    _setCullFaceState(state) {
        const gl = this._gl;
        const boundState = this._boundRenderState;
        if (boundState.cullFace !== state.cullFace) {
            this._setCapabilityEnabled(gl.CULL_FACE, state.cullFace);
            boundState.cullFace = state.cullFace;
        }
        if (state.cullFace &&
            boundState.cullFaceMode !== state.cullFaceMode) {
            gl.cullFace(state.cullFaceMode);
            boundState.cullFaceMode = state.cullFaceMode;
        }
    }
    /**
     * Sets front face mode.
     *
     * @param state The state that contains new front face mode.
     */
    _setFrontFaceState(state) {
        const boundState = this._boundRenderState;
        if (boundState.frontFaceMode !== state.frontFaceMode) {
            this._gl.frontFace(state.frontFaceMode);
            boundState.frontFaceMode = state.frontFaceMode;
        }
    }
    /**
     * Sets depth test state and params.
     *
     * @param state The state that contains new depth test state and params.
     */
    _setDepthTestState(state) {
        const gl = this._gl;
        const boundState = this._boundRenderState;
        if (boundState.depthTest !== state.depthTest) {
            this._setCapabilityEnabled(gl.DEPTH_TEST, state.depthTest);
            boundState.depthTest = state.depthTest;
        }
        if (state.depthTest) {
            if (boundState.clearDepth !== state.clearDepth) {
                gl.clearDepth(state.clearDepth);
                boundState.clearDepth = state.clearDepth;
            }
            if (boundState.depthMask !== state.depthMask) {
                gl.depthMask(state.depthMask);
                boundState.depthMask = state.depthMask;
            }
            if (boundState.depthFunc !== state.depthFunc) {
                gl.depthFunc(state.depthFunc);
                boundState.depthFunc = state.depthFunc;
            }
            if (boundState.depthRangeNear !== state.depthRangeNear ||
                boundState.depthRangeFar !== state.depthRangeFar) {
                gl.depthRange(state.depthRangeNear, state.depthRangeFar);
                boundState.depthRangeNear = state.depthRangeNear;
                boundState.depthRangeFar = state.depthRangeFar;
            }
        }
    }
    /**
     * Sets dither state.
     *
     * @param state The state that contains new dither state.
     */
    _setDitherState(state) {
        const boundState = this._boundRenderState;
        if (boundState.dither !== state.dither) {
            this._setCapabilityEnabled(this._gl.DITHER, state.dither);
            boundState.dither = state.dither;
        }
    }
    /**
     * Sets draw buffers.
     *
     * @param state The state that contains array of draw buffers.
     */
    _setDrawBuffersState(state) {
        const boundDrawBuffers = this._boundRenderState.drawBuffers;
        if (boundDrawBuffers.length !== state.drawBuffers.length ||
            boundDrawBuffers
                .some((attachment, i) => attachment !== state.drawBuffers[i])) {
            this._boundRenderState.drawBuffers = state.drawBuffers.slice();
        }
    }
    /**
     * Sets polygon offset state and params.
     *
     * @param state The state that contains new polygon offset state and params.
     */
    _setPolygonOffsetState(state) {
        const gl = this._gl;
        const boundState = this._boundRenderState;
        if (boundState.polygonOffset !== state.polygonOffset) {
            this._setCapabilityEnabled(gl.POLYGON_OFFSET_FILL, state.polygonOffset);
            boundState.polygonOffset = state.polygonOffset;
        }
        if (state.polygonOffset &&
            (boundState.polygonOffsetFactor !== state.polygonOffsetFactor ||
                boundState.polygonOffsetUnits !== state.polygonOffsetUnits)) {
            gl.polygonOffset(state.polygonOffsetFactor, state.polygonOffsetUnits);
            boundState.polygonOffsetFactor = state.polygonOffsetFactor;
            boundState.polygonOffsetUnits = state.polygonOffsetUnits;
        }
    }
    /**
     * Sets alpha-to-coverage state.
     *
     * @param state The state that contains new alpha-to-coverage state.
     */
    _setAlphaToCoverageState(state) {
        const boundState = this._boundRenderState;
        if (boundState.sampleAlphaToCoverage !== state.sampleAlphaToCoverage) {
            this._setCapabilityEnabled(this._gl.SAMPLE_ALPHA_TO_COVERAGE, state.sampleAlphaToCoverage);
            boundState.sampleAlphaToCoverage = state.sampleAlphaToCoverage;
        }
    }
    /**
     * Sets sample coverage state.
     *
     * @param state The state that contains new sample coverage state and params.
     */
    _setSampleCoverageState(state) {
        const gl = this._gl;
        const boundState = this._boundRenderState;
        if (boundState.sampleCoverage !== state.sampleCoverage) {
            this._setCapabilityEnabled(gl.SAMPLE_COVERAGE, state.sampleCoverage);
            boundState.sampleCoverage = state.sampleCoverage;
        }
        if (state.sampleCoverage &&
            (boundState.sampleCoverageValue !== state.sampleCoverageValue ||
                boundState.sampleCoverageInvert !== state.sampleCoverageInvert)) {
            gl.sampleCoverage(state.sampleCoverageValue, state.sampleCoverageInvert);
            boundState.sampleCoverageValue = state.sampleCoverageValue;
            boundState.sampleCoverageInvert = state.sampleCoverageInvert;
        }
    }
    /**
     * Sets stencil test state and params.
     *
     * @param state The state that contains new stencil test state and params.
     */
    _setStencilTestState(state) {
        const gl = this._gl;
        const boundState = this._boundRenderState;
        if (boundState.stencilTest !== state.stencilTest) {
            this._setCapabilityEnabled(gl.STENCIL_TEST, state.stencilTest);
            boundState.stencilTest = state.stencilTest;
        }
        if (state.stencilTest) {
            if (boundState.clearStencil !== state.clearStencil) {
                gl.clearStencil(state.clearStencil);
                boundState.clearStencil = state.clearStencil;
            }
            if (boundState.stencilWriteMask !== state.stencilWriteMask) {
                gl.stencilMask(state.stencilWriteMask);
                boundState.stencilWriteMask = state.stencilWriteMask;
            }
            const refOrMaskIsDifferent = (boundState.stencilMask !== state.stencilMask ||
                boundState.stencilReference !== state.stencilReference);
            if (refOrMaskIsDifferent) {
                boundState.stencilMask = state.stencilMask;
                boundState.stencilReference = state.stencilReference;
            }
            if (boundState.stencilFrontFunc !== state.stencilFrontFunc ||
                refOrMaskIsDifferent) {
                gl.stencilFuncSeparate(gl.FRONT, state.stencilFrontFunc, state.stencilReference, state.stencilMask);
                boundState.stencilFrontFunc = state.stencilFrontFunc;
            }
            if (boundState.stencilBackFunc !== state.stencilBackFunc ||
                refOrMaskIsDifferent) {
                gl.stencilFuncSeparate(gl.BACK, state.stencilBackFunc, state.stencilReference, state.stencilMask);
                boundState.stencilBackFunc = state.stencilBackFunc;
            }
            if (boundState.stencilFrontFailOp !== state.stencilFrontFailOp ||
                boundState.stencilFrontDepthFailOp !== state.stencilFrontDepthFailOp ||
                boundState.stencilFrontDepthPassOp !== state.stencilFrontDepthPassOp) {
                gl.stencilOpSeparate(gl.FRONT, state.stencilFrontFailOp, state.stencilFrontDepthFailOp, state.stencilFrontDepthPassOp);
                boundState.stencilFrontFailOp = state.stencilFrontFailOp;
                boundState.stencilFrontDepthFailOp = state.stencilFrontDepthFailOp;
                boundState.stencilFrontDepthPassOp = state.stencilFrontDepthPassOp;
            }
            if (boundState.stencilBackFailOp !== state.stencilBackFailOp ||
                boundState.stencilBackDepthFailOp !== state.stencilBackDepthFailOp ||
                boundState.stencilBackDepthPassOp !== state.stencilBackDepthPassOp) {
                gl.stencilOpSeparate(gl.BACK, state.stencilBackFailOp, state.stencilBackDepthFailOp, state.stencilBackDepthPassOp);
                boundState.stencilBackFailOp = state.stencilBackFailOp;
                boundState.stencilBackDepthFailOp = state.stencilBackDepthFailOp;
                boundState.stencilBackDepthPassOp = state.stencilBackDepthPassOp;
            }
        }
    }
    /**
     * Sets scissor test state and scissor rectangle.
     *
     * @param state The state that contains new scissor test state and scissor
     *      rectangle.
     */
    _setScissorTestState(state) {
        const gl = this._gl;
        const boundState = this._boundRenderState;
        if (boundState.scissorTest !== state.scissorTest) {
            this._setCapabilityEnabled(gl.SCISSOR_TEST, state.scissorTest);
            boundState.scissorTest = state.scissorTest;
        }
        if (state.scissorTest &&
            state.scissorWidth >= 0 &&
            state.scissorHeight >= 0 &&
            (boundState.scissorX !== state.scissorX ||
                boundState.scissorY !== state.scissorY ||
                boundState.scissorWidth !== state.scissorWidth ||
                boundState.scissorHeight !== state.scissorHeight)) {
            gl.scissor(state.scissorX, state.scissorY, state.scissorWidth, state.scissorHeight);
            boundState.scissorX = state.scissorX;
            boundState.scissorY = state.scissorY;
            boundState.scissorWidth = state.scissorWidth;
            boundState.scissorHeight = state.scissorHeight;
        }
    }
    /**
     * Sets viewport.
     *
     * @param state The state that contains new viewport.
     */
    _setViewportState(state) {
        const boundState = this._boundRenderState;
        if (state.viewportWidth >= 0 &&
            state.viewportHeight >= 0 &&
            (boundState.viewportX !== state.viewportX ||
                boundState.viewportY !== state.viewportY ||
                boundState.viewportWidth !== state.viewportWidth ||
                boundState.viewportHeight !== state.viewportHeight)) {
            this._gl.viewport(state.viewportX, state.viewportY, state.viewportWidth, state.viewportHeight);
            boundState.viewportX = state.viewportX;
            boundState.viewportY = state.viewportY;
            boundState.viewportWidth = state.viewportWidth;
            boundState.viewportHeight = state.viewportHeight;
        }
    }
    /**
     * Sets texture data unpack params.
     *
     * @param params Texture params to be set.
     */
    _setTextureDataUnpackParams(params) {
        const gl = this._gl;
        if (this._unpackPremultiplyAlpha !== params.premultipliedAlpha) {
            gl.pixelStorei(37441 /* UNPACK_PREMULTIPLY_ALPHA_WEBGL */, +params.premultipliedAlpha);
            this._unpackPremultiplyAlpha = params.premultipliedAlpha;
        }
    }
    _onTextureDataUpdated(texture) {
        const gl = this._gl;
        const params = texture.getParams();
        if (params.minificationFilter >= 9984 /* NEAREST_MIPMAP_NEAREST */) {
            gl.generateMipmap(gl.TEXTURE_2D);
        }
    }
    /**
     * Creates a new zeroed buffer with a given size and a target.
     *
     * @param target The target of the new buffer, `ARRAY_BUFFER` or
     *      `ELEMENT_ARRAY_BUFFER`.
     * @param size The size of the buffer.
     * @param usage Usage of the buffer.
     * @returns The buffer.
     */
    _createBuffer(target, size, usage = this._gl.STATIC_DRAW) {
        const gl = this._gl;
        const buffer = new _gl_buffer__WEBPACK_IMPORTED_MODULE_1__["default"](gl, target, size);
        // TODO(dmikis) a cleverer way not to break currently bound VAO;
        this.bindVao(null);
        buffer.bind();
        gl.bufferData(target, size, usage);
        return buffer;
    }
}


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AttributeMapping", function() { return AttributeMapping; });
/* harmony import */ var _util_iterable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);
/* harmony import */ var _util_pow_of_2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);


/**
 * Gives size of a GL type.
 *
 * @param type The type.
 * @returns Size of the type in bytes.
 */
function getTypeSize(type) {
    switch (type) {
        case 5120 /* BYTE */:
        case 5121 /* UNSIGNED_BYTE */:
            return 1;
        case 5122 /* SHORT */:
        case 5123 /* UNSIGNED_SHORT */:
            return 2;
        case 5124 /* INT */:
        case 5125 /* UNSIGNED_INT */:
        case 5126 /* FLOAT */:
            return 4;
    }
}
/**
 * Description of how particular attributes of a vertex are packed into a vertex
 * buffer.
 */
class AttributeMapping extends Map {
    /**
     * Creates a new attribute mapping with a set of attributes of given types and
     * sizes. Automatically computes offsets of the attributes.
     *
     * @param mapping The mapping from attribute IDs to types and sizes.
     * @param alignment Desired alignment of attributes in the vertex data
     *      structure. Must be a power of 2.
     */
    constructor(mapping, alignment = 4 /* ALIGN_4_BYTES */) {
        let offset = 0;
        super(Object(_util_iterable__WEBPACK_IMPORTED_MODULE_0__["mapIterable"])(mapping, ([idx, { type, size, normalized }]) => {
            const pointer = [
                idx,
                {
                    type,
                    size,
                    normalized,
                    offset
                }
            ];
            const attributeSize = size * getTypeSize(type);
            const newOffset = Object(_util_pow_of_2__WEBPACK_IMPORTED_MODULE_1__["align"])(offset + attributeSize, -alignment);
            // TODO(dmikis) Check this in debug mode.
            // if (newOffset - offset > attributeSize) {
            //    console.warn(`${newOffset - offset} byte padding's inserted`);
            // }
            offset = newOffset;
            return pointer;
        }));
        this.vertexByteSize = offset;
    }
}


/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findInIterable", function() { return findInIterable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapIterable", function() { return mapIterable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterIterable", function() { return filterIterable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduceIterable", function() { return reduceIterable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "oneOfIterable", function() { return oneOfIterable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "allOfIterable", function() { return allOfIterable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rangeIterable", function() { return rangeIterable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zipIterables", function() { return zipIterables; });
/**
 * Searches for the first collection item satisfying a predicate.
 *
 * @param collection The collection.
 * @param predicate The predicate.
 * @returns The first item satisfying the predicate or `undefined` if none found.
 */
function findInIterable(collection, predicate) {
    for (const item of collection) {
        if (predicate(item)) {
            return item;
        }
    }
    return;
}
/**
 * Transforms a collection to another one.
 *
 * @param collection The source collection.
 * @param mapper A function producing items for destination collection.
 * @returns Collection of produced items.
 */
function* mapIterable(collection, mapper) {
    for (const item of collection) {
        yield mapper(item);
    }
}
/**
 * Chooses items of a collection satisfying a predicate.
 *
 * @param collection The collection.
 * @param predicate The predicate.
 * @returns Collection of chosen items.
 */
function* filterIterable(collection, predicate) {
    for (const item of collection) {
        if (predicate(item)) {
            yield item;
        }
    }
}
/**
 * Traverses a collection from left to right recomputing an accumulator on every
 * iteration.
 *
 * @param collection The collection.
 * @param reducer The function used to compute next value of the accumulator.
 * @param initial
 * @returns Value of the accumulator.
 */
function reduceIterable(collection, reducer, initial) {
    let result = initial;
    for (const item of collection) {
        result = reducer(result, item);
    }
    return result;
}
/**
 * Checks if there's at least one item in a collection satisfying a predicate.
 *
 * @param collection The collection.
 * @param predicate The predicate.
 * @returns `true` if for at least one item in the collection the predicate returns
 *      `true` and `false` otherwise.
 */
function oneOfIterable(collection, predicate) {
    for (const item of collection) {
        if (predicate(item)) {
            return true;
        }
    }
    return false;
}
/**
 * Checks if all items of a collection satisfy a predicate.
 *
 * @param collection The collection.
 * @param predicate The predicate.
 * @returns `false` if for at least one item in the collection the predicate returns
 *      `false` and `true` otherwise.
 */
function allOfIterable(collection, predicate) {
    for (const item of collection) {
        if (!predicate(item)) {
            return false;
        }
    }
    return true;
}
/**
 * Creates an iterator for [startIndex, startIndex+length) range.
 */
function* rangeIterable(length, startIndex = 0) {
    const endIndex = startIndex + length;
    for (let i = startIndex; i < endIndex; i++) {
        yield i;
    }
}
function* zipIterables(ts, us, zipper = (t, u) => [t, u]) {
    const tIterator = ts[Symbol.iterator]();
    const uIterator = us[Symbol.iterator]();
    for (let t = tIterator.next(), u = uIterator.next(); !(t.done || u.done); t = tIterator.next(), u = uIterator.next()) {
        yield zipper(t.value, u.value);
    }
}


/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPowOf2", function() { return isPowOf2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "align", function() { return align; });
/**
 * Checks if a number is a power of 2.
 *
 * @param x The number to check.
 * @returns `true` if the number is an integer power of 2 and `false` otherwise.
 */
function isPowOf2(x) {
    return x > 0 && !(x & (x - 1));
}
/**
 * Aligns an offset by an alignment given by a mask.
 *
 * @param offset The offset.
 * @param alignmentMask The alignment mask — a bit field that has `log2(alignment)`
 *      of least significant bits unset and other set, e.g. if `alignment` is 4
 *      then the `alignmentMask` will be `0xffffffc`
 * @returns Aligned offset.
 */
function align(offset, alignmentMask) {
    return (offset - 1 & alignmentMask) - alignmentMask;
}


/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Buffer; });
/** Wrapper around WebGLBuffer object. */
class Buffer {
    /**
     * Creates a new empty buffer in a WebGL context.
     *
     * @param gl The context the buffer will be created in.
     * @param target Binding target of the buffer. Since in WebGL once you've
     *      bound a buffer to a given target you can't bind it any other one,
     *      we "tie" the buffer and it's binding point together.
     * @param size Size of the buffer. We don't do actual allocation in the
     *      wrapper, it's context's responsibility. But it's convenient to be
     *      able to get the size from the wrapper object.
     */
    constructor(gl, target, size) {
        this._gl = gl;
        this._target = target;
        this._handle = gl.createBuffer();
        this._size = size;
    }
    /** Binds the buffer to the context to its binding target. */
    bind() {
        this._gl.bindBuffer(this._target, this._handle);
    }
    /**
     * Returns `true` if the buffer is currently bound to the context to its
     * binding target and `false` otherwise.
     */
    isBound() {
        const gl = this._gl;
        const handle = this._handle;
        switch (this._target) {
            case gl.ARRAY_BUFFER:
                return gl.getParameter(gl.ARRAY_BUFFER_BINDING) === handle;
            case gl.ELEMENT_ARRAY_BUFFER:
                return gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING) === handle;
        }
        return false;
    }
    /** Returns binding target of the buffer. */
    getTarget() {
        return this._target;
    }
    /** Returns size of the buffer. */
    getSize() {
        return this._size;
    }
    /**
     * Destroys the buffer.
     */
    destroy() {
        this._gl.deleteBuffer(this._handle);
    }
}


/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Framebuffer; });
/** Wrapper around WebGLFramebuffer object. */
class Framebuffer {
    /**
     * Creates a new framebuffer in a WebGL context.
     *
     * @param gl The context the framebuffer will be created in.
     * @param width Width of the framebuffer.
     * @param height Height of the framebuffer.
     */
    constructor(gl, width, height) {
        this.isClear = false;
        this._gl = gl;
        this._handle = gl.createFramebuffer();
        this._width = width;
        this._height = height;
    }
    /**
     * Binds the framebuffer to the WebGL context.
     */
    bind() {
        const gl = this._gl;
        gl.bindFramebuffer(gl.FRAMEBUFFER, this._handle);
    }
    /**
     * Checks if the framebuffer is bound to the WebGL context.
     *
     * @returns `true` if the framebuffer is currently bound to the WebGL context
     *      and `false` otherwise.
     */
    isBound() {
        const gl = this._gl;
        return gl.getParameter(gl.FRAMEBUFFER_BINDING) === this._handle;
    }
    /**
     * Returns width of the framebuffer.
     */
    getWidth() {
        return this._width;
    }
    /**
     * Returns height of the framebuffer.
     */
    getHeight() {
        return this._height;
    }
    /**
     * Reads content of the color attachment as an RGBA bitmap.
     */
    readPixels() {
        const data = new Uint8Array(this.getWidth() * this.getHeight() * 4);
        this._gl.readPixels(0, 0, this._width, this._height, 6408 /* RGBA */, 5121 /* UNSIGNED_BYTE */, data);
        return data;
    }
    /**
     * Destroys the framebuffer.
     */
    destroy() {
        this._gl.deleteFramebuffer(this._handle);
    }
}


/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Program; });
/**
 * Inserts given parameters as preprocessor define directives into shader source.
 *
 * @param source Shader source.
 * @param defines Dictionary with parameters to define with preprocessor directives.
 * @returns Shader source with preprocessor directives inserted.
 */
function insertDefines(source, defines) {
    const definesString = Object.keys(defines)
        .map((defineName) => '#define ' + defineName + ' ' +
        defines[defineName])
        .join('\n');
    const versionIdx = source.indexOf('#version');
    if (versionIdx === -1) {
        return definesString + '\n' + source;
    }
    const nextLineIdx = source.indexOf('\n', versionIdx) + 1;
    return source.slice(0, nextLineIdx) + definesString + '\n' +
        source.slice(nextLineIdx);
}
/**
 * Creates a new shader of a given type out of a given source string.
 *
 * @param gl WebGL context the shader will be created in.
 * @param type The type of the shader, VERTEX_SHADER or FRAGMENT_SHADER.
 * @param source The source string.
 * @throws An error if compilation of the shader fails.
 * @returns The shader WebGL handle.
 */
function compileShader(gl, type, source) {
    const shader = gl.createShader(type);
    gl.shaderSource(shader, source);
    gl.compileShader(shader);
    // TODO Uncomment and put under debug flag (when implemented)
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        throw new Error('Failed to compile shader:\n' + gl.getShaderInfoLog(shader));
    }
    return shader;
}
/** Wrapper around WebGLProgram objects. */
class Program {
    /**
     * Constructs a new program.
     *
     * @param gl WebGL context the program will be created in.
     * @param vertexShaderSource Source code of vertex shader of the program.
     * @param fragmentShaderSource Source code of fragment shader of the program.
     * @param options Options.
     * @throws An error if shader compilation or program linking fails.
     */
    constructor(gl, vertexShaderSource, fragmentShaderSource, options) {
        this._gl = gl;
        const handle = this._handle = gl.createProgram();
        if (options && options.defines) {
            vertexShaderSource = insertDefines(vertexShaderSource, options.defines);
            fragmentShaderSource = insertDefines(fragmentShaderSource, options.defines);
        }
        const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
        const fragmentShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);
        gl.attachShader(handle, vertexShader);
        gl.attachShader(handle, fragmentShader);
        gl.deleteShader(vertexShader);
        gl.deleteShader(fragmentShader);
        if (options && options.attribMap) {
            Object.keys(options.attribMap)
                .forEach((attributeName) => gl.bindAttribLocation(handle, options.attribMap[attributeName], attributeName));
        }
        gl.linkProgram(handle);
        // TODO Uncomment and put under debug flag (when implemented)
        if (!gl.getProgramParameter(handle, gl.LINK_STATUS)) {
            throw new Error(`Failed to link program:\n${gl.getProgramInfoLog(handle)}`);
        }
        this._uniformCache = new Map();
    }
    /**
     * Binds the program to the WebGL context.
     */
    bind() {
        const gl = this._gl;
        const handle = this._handle;
        // TODO Uncomment and put under debug flag (when implemented)
        // gl.validateProgram(handle);
        // if (!gl.getProgramParameter(handle, gl.VALIDATE_STATUS)) {
        //     throw new Error(
        //         'Failed to validate program:\n' + gl.getProgramInfoLog(handle)
        //     );
        // }
        gl.useProgram(handle);
    }
    /**
     * Checks if the program is bound to the WebGL context.
     *
     * @returns `true` if the program if currently bound to the WebGL context and
     *      `false` otherwise.
     */
    isBound() {
        const gl = this._gl;
        return gl.getParameter(gl.CURRENT_PROGRAM) === this._handle;
    }
    /**
     * Sets an integer scalar value to a uniform. If there's no uniform with
     * given name in the program, silently does nothing.
     *
     * @param uniformName Name of the uniform.
     * @param value The scalar value.
     */
    setIntScalarUniform(uniformName, value) {
        const location = this._getUniformLocation(uniformName);
        if (location) {
            this._gl.uniform1i(location, value);
        }
    }
    /**
     * Sets a scalar value to a uniform. If there's no uniform with
     * given name in the program, silently does nothing.
     *
     * @param uniformName Name of the uniform.
     * @param value The scalar value.
     */
    setScalarUniform(uniformName, value) {
        const location = this._getUniformLocation(uniformName);
        if (location) {
            this._gl.uniform1f(location, value);
        }
    }
    /**
     * Sets a 2D vector to a uniform. If there's no uniform with given name in
     * the program, silently does nothing.
     *
     * @param uniformName Name of the uniform.
     * @param value The vector.
     */
    setVector2Uniform(uniformName, value) {
        const location = this._getUniformLocation(uniformName);
        if (location) {
            this._gl.uniform2f(location, value.x, value.y);
        }
    }
    /**
     * Sets a 3D vector to a uniform. If there's no uniform with given name in
     * the program, silently does nothing.
     *
     * @param uniformName Name of the uniform.
     * @param value The vector.
     */
    setVector3Uniform(uniformName, value) {
        const location = this._getUniformLocation(uniformName);
        if (location) {
            this._gl.uniform3f(location, value.x, value.y, value.z);
        }
    }
    /**
     * Sets a 4D vector to a uniform. If there's no uniform with given name in
     * the program, silently does nothing.
     *
     * @param uniformName Name of the uniform.
     * @param value The vector.
     */
    setVector4Uniform(uniformName, value) {
        const location = this._getUniformLocation(uniformName);
        if (location) {
            this._gl.uniform4f(location, value.x, value.y, value.z, value.w);
        }
    }
    /**
     * Sets a color to a uniform. If there's no uniform with given name in the
     * program, silently does nothing.
     *
     * @param uniformName Name of the uniform.
     * @param value The color.
     */
    setColorUniform(uniformName, value) {
        const location = this._getUniformLocation(uniformName);
        if (location) {
            this._gl.uniform4f(location, value.r, value.g, value.b, value.a);
        }
    }
    /**
     * Sets a 3x3 matrix to a uniform. If there's no uniform with given name in
     * the program, silently does nothing.
     *
     * @param uniformName Name of the uniform.
     * @param value The matrix.
     */
    setMatrix3Uniform(uniformName, value) {
        const location = this._getUniformLocation(uniformName);
        if (location) {
            this._gl.uniformMatrix3fv(location, false, value);
        }
    }
    /**
     * Sets a 4x4 matrix to a uniform. If there's no uniform with given name in
     * the program, silently does nothing.
     *
     * @param uniformName Name of the uniform.
     * @param value The matrix.
     */
    setMatrix4Uniform(uniformName, value) {
        const location = this._getUniformLocation(uniformName);
        if (location) {
            this._gl.uniformMatrix4fv(location, false, value);
        }
    }
    /**
     * Destroys the program.
     */
    destroy() {
        this._gl.deleteProgram(this._handle);
    }
    _getUniformLocation(name) {
        const cache = this._uniformCache;
        let location = cache.get(name);
        if (!location) {
            location = this._gl.getUniformLocation(this._handle, name);
            if (!location) {
                // TODO Uncomment and put under debug flag (when implemented)
                // console.warn(`Uniform ${name} doesn't exist in program.`);
                return null;
            }
            cache.set(name, location);
        }
        return location;
    }
}


/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Renderbuffer; });
/** Wrapper around WebGLRenderbuffer objects. */
class Renderbuffer {
    /**
     * Creates a new renderbuffer in a WebGL context.
     *
     * @param gl The context the renderbuffer will be created in.
     */
    constructor(gl, width, height) {
        this._gl = gl;
        this._handle = gl.createRenderbuffer();
        this._width = width;
        this._height = height;
    }
    /**
     * Binds the renderbuffer to the WebGL context.
     */
    bind() {
        const gl = this._gl;
        gl.bindRenderbuffer(gl.RENDERBUFFER, this._handle);
    }
    /**
     * Checks if the renderbuffer is bound to the WebGL context.
     *
     * @returns `true` if the renderbuffer is currently bound to the WebGL context
     *      and `false` otherwise.
     */
    isBound() {
        const gl = this._gl;
        return gl.getParameter(gl.RENDERBUFFER_BINDING) === this._handle;
    }
    /**
     * Attaches the renderbuffer to a currently bound to the WebGL context
     * framebuffer.
     *
     * @param attachmentPoint Attachment point the renderbuffer will be attached
     *      to.
     */
    attachToFramebuffer(attachmentPoint) {
        const gl = this._gl;
        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachmentPoint, gl.RENDERBUFFER, this._handle);
    }
    getWidth() {
        return this._width;
    }
    getHeight() {
        return this._height;
    }
    /**
     * Destroys the renderbuffer.
     */
    destroy() {
        this._gl.deleteRenderbuffer(this._handle);
    }
}


/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RenderContextCapabilitiesManager; });
// tslint:disable
/*
    This is automatically generated by /tools/gl_gen/gen_capabilities.js script.
    Instead of modifying it edit the script and regenerate this file.
*/
class RenderContextCapabilitiesManager {
    constructor(gl) {
        this._gl = gl;
        this._paramValues = new Map();
    }
    getAliasedLineWidthRange() { return this._getParam(33902 /* ALIASED_LINE_WIDTH_RANGE */); }
    getAliasedPointSizeRange() { return this._getParam(33901 /* ALIASED_POINT_SIZE_RANGE */); }
    getMaxCombinedTextureImageUnits() { return this._getParam(35661 /* MAX_COMBINED_TEXTURE_IMAGE_UNITS */); }
    getMaxCubeMapTextureSize() { return this._getParam(34076 /* MAX_CUBE_MAP_TEXTURE_SIZE */); }
    getMaxFragmentUniformVectors() { return this._getParam(36349 /* MAX_FRAGMENT_UNIFORM_VECTORS */); }
    getMaxRenderbufferSize() { return this._getParam(34024 /* MAX_RENDERBUFFER_SIZE */); }
    getMaxTextureImageUnits() { return this._getParam(34930 /* MAX_TEXTURE_IMAGE_UNITS */); }
    getMaxTextureSize() { return this._getParam(3379 /* MAX_TEXTURE_SIZE */); }
    getMaxVaryingVectors() { return this._getParam(36348 /* MAX_VARYING_VECTORS */); }
    getMaxVertexAttribs() { return this._getParam(34921 /* MAX_VERTEX_ATTRIBS */); }
    getMaxVertexTextureImageUnits() { return this._getParam(35660 /* MAX_VERTEX_TEXTURE_IMAGE_UNITS */); }
    getMaxVertexUniformVectors() { return this._getParam(36347 /* MAX_VERTEX_UNIFORM_VECTORS */); }
    getMaxViewportDims() { return this._getParam(3386 /* MAX_VIEWPORT_DIMS */); }
    getRenderer() { return this._getParam(7937 /* RENDERER */); }
    getSubpixelBits() { return this._getParam(3408 /* SUBPIXEL_BITS */); }
    getVendor() { return this._getParam(7936 /* VENDOR */); }
    getVersion() { return this._getParam(7938 /* VERSION */); }
    /** Calling this method w/o `WEBGL_debug_renderer_info` enabled will return `null`! */
    getUnmaskedVendor() { return this._getParam(37445 /* UNMASKED_VENDOR */); }
    /** Calling this method w/o `WEBGL_debug_renderer_info` enabled will return `null`! */
    getUnmaskedRenderer() { return this._getParam(37446 /* UNMASKED_RENDERER */); }
    _getParam(param) {
        const paramValues = this._paramValues;
        let paramValue = paramValues.get(param);
        if (!paramValue) {
            paramValue = this._gl.getParameter(param);
            paramValues.set(param, paramValue);
        }
        return paramValue;
    }
}


/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BLEND_OVER_RENDER_STATE", function() { return BLEND_OVER_RENDER_STATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BLEND_OVER_PREMULTIPLIED_ALPHA_RENDER_STATE", function() { return BLEND_OVER_PREMULTIPLIED_ALPHA_RENDER_STATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RenderState; });
/* harmony import */ var _util_color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);

/**
 * Preset of render state for OVER compositing,
 * @see T. Porter and T. Duff, "Compositing Digital Images", Proceedings of
 *      SIGGRAPH'84, 18 (1984).
 */
const BLEND_OVER_RENDER_STATE = {
    blend: true,
    blendFuncSrcRgb: 770 /* SRC_ALPHA */,
    blendFuncDstRgb: 771 /* ONE_MINUS_SRC_ALPHA */,
    blendFuncSrcAlpha: 1 /* ONE */,
    blendFuncDstAlpha: 771 /* ONE_MINUS_SRC_ALPHA */
};
const BLEND_OVER_PREMULTIPLIED_ALPHA_RENDER_STATE = {
    blend: true,
    blendFuncSrcRgb: 1 /* ONE */,
    blendFuncDstRgb: 771 /* ONE_MINUS_SRC_ALPHA */,
    blendFuncSrcAlpha: 1 /* ONE */,
    blendFuncDstAlpha: 771 /* ONE_MINUS_SRC_ALPHA */
};
/**
 * State of the WebGL rendering pipeline. Doesn't include object bindings since
 * the context handles them.
 */
class RenderState {
    /**
     * Creates a new render state object.
     *
     * @param state Object with state properties that values differ from default
     *      ones.
     */
    constructor(...state) {
        this.clearColor = _util_color__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0, 0, 0);
        this.clearDepth = 1;
        this.clearStencil = 0;
        this.colorMaskR = true;
        this.colorMaskG = true;
        this.colorMaskB = true;
        this.colorMaskAlpha = true;
        this.blend = false;
        this.blendEquationRgb = 32774 /* ADD */;
        this.blendEquationAlpha = 32774 /* ADD */;
        this.blendFuncSrcRgb = 1 /* ONE */;
        this.blendFuncDstRgb = 0 /* ZERO */;
        this.blendFuncSrcAlpha = 1 /* ONE */;
        this.blendFuncDstAlpha = 0 /* ZERO */;
        this.cullFace = false;
        this.cullFaceMode = 1029 /* BACK */;
        this.frontFaceMode = 2305 /* COUNTERCLOCKWISE */;
        this.depthTest = false;
        this.depthFunc = 513 /* LESS */;
        this.depthRangeNear = 0;
        this.depthRangeFar = 1;
        this.depthMask = true;
        this.dither = true;
        this.drawBuffers = [36064 /* COLOR_ATTACHMENT0 */];
        this.polygonOffset = false;
        this.polygonOffsetFactor = 0;
        this.polygonOffsetUnits = 0;
        this.sampleAlphaToCoverage = false;
        this.sampleCoverage = false;
        this.sampleCoverageValue = 1;
        this.sampleCoverageInvert = false;
        this.scissorTest = false;
        this.scissorX = 0;
        this.scissorY = 0;
        // Actual defaults aren't known here since they depend upon context. -1's
        // as "do not change" values.
        this.scissorWidth = -1;
        this.scissorHeight = -1;
        this.stencilTest = false;
        this.stencilReference = 0;
        this.stencilMask = 0xff;
        this.stencilWriteMask = 0xff;
        this.stencilFrontFunc = 519 /* ALWAYS */;
        this.stencilFrontFailOp = 7680 /* KEEP */;
        this.stencilFrontDepthFailOp = 7680 /* KEEP */;
        this.stencilFrontDepthPassOp = 7680 /* KEEP */;
        this.stencilBackFunc = 519 /* ALWAYS */;
        this.stencilBackFailOp = 7680 /* KEEP */;
        this.stencilBackDepthFailOp = 7680 /* KEEP */;
        this.stencilBackDepthPassOp = 7680 /* KEEP */;
        this.viewportX = 0;
        this.viewportY = 0;
        // Actual defaults aren't known here since they depend upon context. -1's
        // as "do not change" values.
        this.viewportWidth = -1;
        this.viewportHeight = -1;
        Object.assign(this, ...state);
    }
}


/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OPAQUE_BLACK", function() { return OPAQUE_BLACK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TRANSPARENT_BLACK", function() { return TRANSPARENT_BLACK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "areEqual", function() { return areEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeAbgr8", function() { return decodeAbgr8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encodeRgba8", function() { return encodeRgba8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isOpaque", function() { return isOpaque; });
const OPAQUE_BLACK = create(0, 0, 0, 1);
const TRANSPARENT_BLACK = create(0, 0, 0, 0);
/**
 * @param r Red component as a normalized value [0..1]
 * @param g Green component as a normalized value [0..1]
 * @param b Blue component as a normalized value [0..1]
 * @param a Alpha component as a normalized value [0..1]
 *
 * @returns A color with given values assigned to components.
 */
function create(r, g, b, a = 1) {
    return { r, g, b, a };
}
/**
 * Copies a color to another one.
 *
 * @param src The source color.
 * @param dst The color the source color will be copied to.
 * @returns `dst`.
 */
function copy(src, dst = create(0, 0, 0, 0)) {
    dst.r = src.r;
    dst.g = src.g;
    dst.b = src.b;
    dst.a = src.a;
    return dst;
}
function areEqual(c1, c2) {
    return c1.r === c2.r && c1.g === c2.g && c1.b === c2.b && c1.a === c2.a;
}
/**
 * Decodes a color represented as four 8-bit channels encoded into a 32-bit
 * number in ABGR order (from MSB to LSB).
 *
 * @param color Color encoded into unsigned 32-bit integer.
 * @returns Decoded color.
 */
function decodeAbgr8(color) {
    return {
        r: (color >>> 24) / 0xff,
        g: (color >>> 16 & 0xff) / 0xff,
        b: (color >>> 8 & 0xff) / 0xff,
        a: (color & 0xff) / 0xff
    };
}
/**
 * Encodes a color components into four 8 bit numbers packed into 32-bit one.
 *
 * @param c The color to be encoded.
 * @returns The color as 32-bit integer.
 */
function encodeRgba8(c) {
    return (c.r * 0xff |
        (c.g * 0xff << 8) |
        (c.b * 0xff << 16) |
        (c.a * 0xff << 24));
}
/**
 * Checks if a color is completely opaque.
 *
 * @param color The color to be checked.
 * @returns `true` if the color is opaque and `false` otherwise.
 */
function isOpaque(color) {
    return color.a === 1;
}


/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_TEXTURE_PARAMS", function() { return DEFAULT_TEXTURE_PARAMS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Texture; });
/**
 * Our defaults for textures are different from ones in WebGL for two reasons:
 * 1. default minification filter in WebGL is NEAREST_MIPMAP_LINEAR which requires
 *    texture to have all mip levels specified;
 * 2. default wrap modes are REPEAT which isn't supported for NPOT textures.
 */
const DEFAULT_TEXTURE_PARAMS = {
    wrapS: 33071 /* CLAMP_TO_EDGE */,
    wrapT: 33071 /* CLAMP_TO_EDGE */,
    magnificationFilter: 9728 /* NEAREST */,
    minificationFilter: 9728 /* NEAREST */,
    premultipliedAlpha: false
};
/** Wrapper around WebGLTexture objects. For now only works with 2D textures. */
class Texture {
    /**
     * Creates a new texture in a WebGL context.
     *
     * @param gl The context the texture will be created in.
     */
    constructor(gl, width, height, format, type, params = DEFAULT_TEXTURE_PARAMS) {
        this._gl = gl;
        this._format = format;
        this._type = type;
        this._params = params;
        this._width = width;
        this._height = height;
        this._handle = gl.createTexture();
        this.bind();
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, params.wrapS);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, params.wrapT);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, params.magnificationFilter);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, params.minificationFilter);
        gl.texImage2D(gl.TEXTURE_2D, 0, format, width, height, 0, format, type, null);
    }
    /**
     * Binds the texture to the WebGL context as a 2D texture.
     */
    bind() {
        const gl = this._gl;
        gl.bindTexture(gl.TEXTURE_2D, this._handle);
    }
    /**
     * Checks if the texture is bound to the WebGL context.
     *
     * @returns `true` if the texture is currently bound to the WebGL context
     *      and `false` otherwise.
     */
    isBound() {
        const gl = this._gl;
        return gl.getParameter(gl.TEXTURE_BINDING_2D) === this._handle;
    }
    /**
     * Attaches the texture to a currently bound to the WebGL context framebuffer.
     *
     * @param attachmentPoint Attachment point the texture will be attached to.
     */
    attachToFramebuffer(attachmentPoint) {
        const gl = this._gl;
        gl.framebufferTexture2D(gl.FRAMEBUFFER, attachmentPoint, gl.TEXTURE_2D, this._handle, 0);
    }
    /** Returns width of the texture. */
    getWidth() {
        return this._width;
    }
    /** Returns height of the texture. */
    getHeight() {
        return this._height;
    }
    /** Returns pixel format of the texture. */
    getFormat() {
        return this._format;
    }
    /** Return pixel type of the texture. */
    getType() {
        return this._type;
    }
    /** Return params of the texture. */
    getParams() {
        return this._params;
    }
    /**
     * Destroys the texture.
     */
    destroy() {
        this._gl.deleteTexture(this._handle);
    }
}


/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return VertexArrayObject; });
/**
 * Wrapper around vertex array (VAO) object from `OES_vertex_array_object`
 * extension.
 */
class VertexArrayObject {
    /**
     * Creates new VAO in a given WebGL context.
     *
     * @param gl The context.
     * @param vaoExt Instance of `OES_vertex_array_object` extension.
     * @param attributeMapping Mapping of attributes.
     */
    constructor(gl, vaoExt, attributeMapping) {
        this._gl = gl;
        this._vaoExt = vaoExt;
        this._handle = vaoExt.createVertexArrayOES();
        this.attributeMapping = attributeMapping;
    }
    /**
     * Binds the VAO to the context.
     */
    bind() {
        this._vaoExt.bindVertexArrayOES(this._handle);
    }
    /**
     * Checks if the VAO is currently bound to the context.
     *
     * @returns `true` if the VAO is currently bound to the WebGL context and
     *      `false` otherwise.
     */
    isBound() {
        return this._gl.getParameter(this._vaoExt.VERTEX_ARRAY_BINDING_OES) ===
            this._handle;
    }
    /**
     * Destroys the VAO.
     */
    destroy() {
        this._vaoExt.deleteVertexArrayOES(this._handle);
    }
}


/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventEmitter", function() { return EventEmitter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VoidEventEmitter", function() { return VoidEventEmitter; });
/**
 * Simple pub/sub implementation. The emitter is supposed to emit only one type of event,
 * if someone has to emit events of different types, multiple emitters should be created.
 */
class EventEmitter {
    constructor() {
        this._listeners = new Set();
    }
    /**
     * Adds listener.
     */
    addListener(listener) {
        this._listeners.add(listener);
    }
    /**
     * Removes listener.
     */
    removeListener(listener) {
        this._listeners.delete(listener);
    }
    /**
     * Calls all the added listeners, the order (e.g. of adding) is not guaranteed.
     */
    fire(data) {
        this._listeners.forEach((listener) => {
            listener(data);
        });
    }
}
/**
 * Event emitter with no payload emitted.
 */
class VoidEventEmitter extends EventEmitter {
    fire() {
        super.fire(undefined);
    }
}


/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Camera; });
/* harmony import */ var _math_scalar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16);
/* harmony import */ var _util_rad_deg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(17);
/* harmony import */ var _util_options__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(18);
/* harmony import */ var _math_matrix4__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(19);
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(23);
/* harmony import */ var _math_vector3__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(20);
/* harmony import */ var _util_event_emitter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(14);








// TODO(dmikis) We want to constraint coordinates so visible region doesn't extend
//      out of world boundaries. However, in current implementation it doesn't
//      work properly for aspect ratios >1 on zoom 0 since visible region is
//      larger that the world itself (so there's no way to squeeze it in). For
//      the current case (i.e. cycled in horizontal direction) it is not a problem.
const MAX_TILT = Object(_util_rad_deg__WEBPACK_IMPORTED_MODULE_1__["deg2rad"])(40);
/**
 * If a camera has zoom less than of equal to `NO_TILT_MAX_ZOOM`, tilt won't be
 * allowed.
 */
const NO_TILT_MAX_ZOOM = 1;
/**
 * If a camera has zoom greater than of equal to `FULL_TILT_MIN_ZOOM`, tilt will
 * be allowed up to `MAX_TILT`.
 */
const FULL_TILT_MIN_ZOOM = NO_TILT_MAX_ZOOM + 1;
const FRUSTUM_DIRECTIONS = [
    // tslint:disable
    _math_vector3__WEBPACK_IMPORTED_MODULE_5__["create"](-1, 1, -1),
    _math_vector3__WEBPACK_IMPORTED_MODULE_5__["create"](1, 1, -1),
    _math_vector3__WEBPACK_IMPORTED_MODULE_5__["create"](1, -1, -1),
    _math_vector3__WEBPACK_IMPORTED_MODULE_5__["create"](-1, -1, -1)
    // tslint:enable
];
/**
 * How big the world sould be on a screen if zoom is 0, in device independent pixels
 */
const ZOOM_0_WORLD_CSS_PIXEL_SIZE = 256;
const DEFAULT_OPTIONS = {
    wrapModeX: 1 /* CLAMP_TO_EDGE */,
    wrapModeY: 1 /* CLAMP_TO_EDGE */,
    minZoom: 0,
    maxZoom: 24,
    fov: Object(_util_rad_deg__WEBPACK_IMPORTED_MODULE_1__["deg2rad"])(30)
};
/**
 * Restricts a new value for a center's coordinate according to given wrap mode.
 *
 * @param wrapMode The wrap mode.
 * @param newCoordinate The new value.
 * @param oldCoordinate Current value of the coordinate.
 * @param bboxMin Minimum corresponding coordinate of bounding box of the
 *      visible quadrilateral.
 * @param bboxMax Maximum corresponding coordinate of bounding box of the
 *      visible quadrilateral.
 * @returns Restricted value for the coordinate.
 */
function restrictCoordinate(wrapMode, newCoordinate) {
    switch (wrapMode) {
        case 0 /* NONE */:
            return newCoordinate;
        case 1 /* CLAMP_TO_EDGE */:
            return Object(_math_scalar__WEBPACK_IMPORTED_MODULE_0__["clamp"])(newCoordinate, -1, 1);
        case 2 /* REPEAT */:
            return Object(_math_scalar__WEBPACK_IMPORTED_MODULE_0__["cycleRestrict"])(newCoordinate, -1, 1);
    }
}
/**
 * Camera represents user's point of view in the world space, as a real camera it has restricted field of view,
 * it can move and rotate (with or without animation).
 */
class Camera {
    /**
     * Creates a new camera.
     *
     * @param options Options.
     */
    constructor(options) {
        this.options = Object(_util_options__WEBPACK_IMPORTED_MODULE_2__["default"])(DEFAULT_OPTIONS, options);
        this.center = new Camera._Center(this);
        this.onUpdate = new _util_event_emitter__WEBPACK_IMPORTED_MODULE_6__["VoidEventEmitter"]();
        const screenSize = new Camera._ScreenSize(this);
        this.screenSize = screenSize;
        this._distanceToCenter = 1;
        this._zoom = this.options.minZoom;
        this._tilt = this._azimuth = 0;
        this._dirtyBits = -1 /* ALL */;
        this._viewProjMatrix = _math_matrix4__WEBPACK_IMPORTED_MODULE_3__["copy"](_math_matrix4__WEBPACK_IMPORTED_MODULE_3__["IDENTITY"]);
        this._visibleQuadrilateral = [
            _math_vector3__WEBPACK_IMPORTED_MODULE_5__["create"](0, 0, 0),
            _math_vector3__WEBPACK_IMPORTED_MODULE_5__["create"](0, 0, 0),
            _math_vector3__WEBPACK_IMPORTED_MODULE_5__["create"](0, 0, 0),
            _math_vector3__WEBPACK_IMPORTED_MODULE_5__["create"](0, 0, 0)
        ];
        this._visibleQuadrilateralBBox =
            _math_vector2__WEBPACK_IMPORTED_MODULE_4__["computeBBoxForPoints"](this._visibleQuadrilateral);
        this._pixelSize = _math_vector2__WEBPACK_IMPORTED_MODULE_4__["create"](0, 0);
    }
    get aspectRatio() {
        const { width, height } = this.screenSize;
        if (height !== 0) {
            return width / height;
        }
        else {
            // when height == 0 we cannot compute viewProj matrix or visible region, 1 allows to handle this case with
            // no exceptions thrown, but technically it is not correct and should be reconsidered if any issue is found
            return 1;
        }
    }
    get zoom() {
        return this._zoom;
    }
    get worldToPxFactor() {
        return this._worldToPxFactor;
    }
    /**
     * Sets new zoom to the camera with respect to provided limits in the options.
     */
    set zoom(newZoom) {
        newZoom = Object(_math_scalar__WEBPACK_IMPORTED_MODULE_0__["clamp"])(newZoom, this.options.minZoom, this.options.maxZoom);
        if (newZoom !== this._zoom) {
            this._zoom = newZoom;
            this._computeDistanceToCenter();
            // Constraints on tilt may have changed, we need to recompute it.
            this._tilt = this._constrainTilt(this._tilt);
            this._worldToPxFactor = 2.0 / (ZOOM_0_WORLD_CSS_PIXEL_SIZE * Math.pow(2, newZoom));
            this._setDirtyBits(1 /* VIEW_PROJ_MATRIX */ | 2 /* VISIBLE_QUADRILATERAL */);
        }
    }
    get tilt() {
        return this._tilt;
    }
    set tilt(newTilt) {
        newTilt = this._constrainTilt(newTilt);
        if (this._tilt !== newTilt) {
            this._tilt = newTilt;
            this._setDirtyBits(1 /* VIEW_PROJ_MATRIX */ | 2 /* VISIBLE_QUADRILATERAL */);
        }
    }
    get azimuth() {
        return this._azimuth;
    }
    set azimuth(newAzimuth) {
        newAzimuth = Object(_math_scalar__WEBPACK_IMPORTED_MODULE_0__["cycleRestrict"])(newAzimuth, 0, 2 * Math.PI);
        if (this._azimuth !== newAzimuth) {
            this._azimuth = newAzimuth;
            this._setDirtyBits(1 /* VIEW_PROJ_MATRIX */ | 2 /* VISIBLE_QUADRILATERAL */);
        }
    }
    /**
     * Size of a pixel in NDC.
     */
    get pixelSize() {
        return this._pixelSize;
    }
    /**
     * Invalidate all internally cached values (e.g. view matrix).
     */
    setDirty() {
        this._setDirtyBits(-1 /* ALL */);
    }
    /**
     * Recomputes (if needed) the view projection matrix.
     *
     * @returns The view-projection matrix.
     */
    getViewProjMatrix() {
        const viewProjMatrix = this._viewProjMatrix;
        if (this._dirtyBits & 1 /* VIEW_PROJ_MATRIX */) {
            _math_matrix4__WEBPACK_IMPORTED_MODULE_3__["copy"](_math_matrix4__WEBPACK_IMPORTED_MODULE_3__["IDENTITY"], viewProjMatrix);
            _math_matrix4__WEBPACK_IMPORTED_MODULE_3__["lookAt"](viewProjMatrix, this._computeCenterToCameraVector(), _math_vector3__WEBPACK_IMPORTED_MODULE_5__["ORIGIN"], _math_vector3__WEBPACK_IMPORTED_MODULE_5__["rotateZ"](_math_vector3__WEBPACK_IMPORTED_MODULE_5__["POSITIVE_Y"], this._azimuth), viewProjMatrix);
            const { fov } = this.options;
            const tanFactors = Math.tan(this._tilt) * Math.tan(0.5 * fov);
            _math_matrix4__WEBPACK_IMPORTED_MODULE_3__["perspective"](viewProjMatrix, fov, this.aspectRatio, Math.min(this._distanceToCenter * 0.01, this._distanceToCenter / (1 + tanFactors)), this._distanceToCenter / (1 - tanFactors), viewProjMatrix);
            this._dirtyBits &= ~1 /* VIEW_PROJ_MATRIX */;
        }
        return viewProjMatrix;
    }
    /**
     * Recomputes (if needed) and returns quadrilateral cut on the world plane
     * by frustum of the camera.
     *
     * @return The quadrilateral enclosing visible part of the world plane.
     */
    getVisibleRegion() {
        this._computeVisibleQuadrilateral();
        return this._visibleQuadrilateral;
    }
    /**
     * Recomputes (if needed) and returns bounding box of the visible region.
     *
     * @return Bounding box of the visible quadrilateral.
     */
    getVisibleRegionBBox() {
        this._computeVisibleQuadrilateral();
        return this._visibleQuadrilateralBBox;
    }
    _constrainTilt(tilt) {
        return Object(_math_scalar__WEBPACK_IMPORTED_MODULE_0__["clamp"])(tilt, 0, MAX_TILT * Object(_math_scalar__WEBPACK_IMPORTED_MODULE_0__["smoothStep"])(NO_TILT_MAX_ZOOM, FULL_TILT_MIN_ZOOM, this._zoom));
    }
    _setDirtyBits(bits) {
        if (bits ^ (bits & this._dirtyBits)) {
            this._dirtyBits |= bits;
            this.onUpdate.fire();
        }
    }
    _computeDistanceToCenter() {
        this._distanceToCenter =
            this.screenSize.height * Math.pow(2, -this._zoom) /
                (Math.tan(0.5 * this.options.fov) * ZOOM_0_WORLD_CSS_PIXEL_SIZE);
    }
    _computeCenterToCameraVector(dst = _math_vector3__WEBPACK_IMPORTED_MODULE_5__["create"](0, 0, 0)) {
        _math_vector3__WEBPACK_IMPORTED_MODULE_5__["muln"](_math_vector3__WEBPACK_IMPORTED_MODULE_5__["POSITIVE_Z"], this._distanceToCenter, dst);
        _math_vector3__WEBPACK_IMPORTED_MODULE_5__["rotateX"](dst, this._tilt, dst);
        _math_vector3__WEBPACK_IMPORTED_MODULE_5__["rotateZ"](dst, this._azimuth, dst);
        return dst;
    }
    _computeVisibleQuadrilateral() {
        if (this._dirtyBits & 2 /* VISIBLE_QUADRILATERAL */) {
            const visibleQuadrilateral = this._visibleQuadrilateral;
            const halfFovTan = Math.tan(0.5 * this.options.fov);
            const origin = this._computeCenterToCameraVector();
            _math_vector2__WEBPACK_IMPORTED_MODULE_4__["add"](origin, this.center, origin);
            const scale = _math_vector3__WEBPACK_IMPORTED_MODULE_5__["create"](halfFovTan * this.aspectRatio, halfFovTan, 1);
            const direction = _math_vector3__WEBPACK_IMPORTED_MODULE_5__["create"](0, 0, 0);
            const ray = { origin, direction };
            for (let i = 0; i < 4; ++i) {
                _math_vector3__WEBPACK_IMPORTED_MODULE_5__["mulv"](FRUSTUM_DIRECTIONS[i], scale, direction);
                _math_vector3__WEBPACK_IMPORTED_MODULE_5__["rotateX"](direction, this._tilt, direction);
                _math_vector3__WEBPACK_IMPORTED_MODULE_5__["rotateZ"](direction, this._azimuth, direction);
                if (!_math_vector3__WEBPACK_IMPORTED_MODULE_5__["getPlaneRayIntersection"](_math_vector3__WEBPACK_IMPORTED_MODULE_5__["XY"], ray, visibleQuadrilateral[i])) {
                    throw new Error('Visible quadrilateral is unbounded, engine can\'t handle that case (yet)');
                }
            }
            _math_vector2__WEBPACK_IMPORTED_MODULE_4__["computeBBoxForPoints"](visibleQuadrilateral, this._visibleQuadrilateralBBox);
            this._dirtyBits &= ~2 /* VISIBLE_QUADRILATERAL */;
        }
    }
}
/**
 * Implementation of a center vector of a camera. Takes into account wrapping
 * modes and updates camera's dirty flags.
 */
Camera._Center = class {
    /**
     * Creates new center vector for a camera.
     *
     * @param camera The camera.
     */
    constructor(camera) {
        this._camera = camera;
        this._x = this._y = 0;
    }
    /**
     * @returns Values of abscissa of the center vector.
     */
    get x() {
        return this._x;
    }
    /**
     * Properly clamps or wraps new abscissa value and sets it to the vector.
     *
     * @param newX The new
     */
    set x(newX) {
        const camera = this._camera;
        newX = restrictCoordinate(camera.options.wrapModeX, newX);
        if (this._x !== newX) {
            this._x = newX;
            camera._setDirtyBits(2 /* VISIBLE_QUADRILATERAL */);
        }
    }
    /**
     * @returns Values of ordinate of the center vector.
     */
    get y() {
        return this._y;
    }
    /**
     * Properly clamps or wraps new ordinate value and sets it to the vector.
     */
    set y(newY) {
        const camera = this._camera;
        newY = restrictCoordinate(camera.options.wrapModeY, newY);
        if (this._y !== newY) {
            this._y = newY;
            camera._setDirtyBits(2 /* VISIBLE_QUADRILATERAL */);
        }
    }
};
Camera._ScreenSize = class {
    constructor(camera) {
        this._camera = camera;
        this._width = this._height = 0;
    }
    get width() {
        return this._width;
    }
    set width(newWidth) {
        if (this._width !== newWidth) {
            this._width = newWidth;
            const camera = this._camera;
            camera._setDirtyBits(1 /* VIEW_PROJ_MATRIX */ | 2 /* VISIBLE_QUADRILATERAL */);
            camera._pixelSize.x = 2.0 / this._width;
        }
    }
    get height() {
        return this._height;
    }
    set height(newHeight) {
        if (this._height !== newHeight) {
            this._height = newHeight;
            const camera = this._camera;
            camera._computeDistanceToCenter();
            camera._setDirtyBits(1 /* VIEW_PROJ_MATRIX */ | 2 /* VISIBLE_QUADRILATERAL */);
            camera._pixelSize.y = 2.0 / this._height;
        }
    }
};


/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clamp", function() { return clamp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cycleRestrict", function() { return cycleRestrict; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mix", function() { return mix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "smoothStep", function() { return smoothStep; });
/**
 * Clamps a value to a given range.
 *
 * @param x The value.
 * @param min Start of the range.
 * @param max End of the range.
 * @returns Clamped value.
 */
function clamp(x, min, max) {
    return min < x ? x < max ? x : max : min;
}
/**
 * Restricts a value to a given cycled range, i.e. ends of the range are
 * equivalent. E.g. like angles can be restricted to any range of size `2 * PI`.
 *
 * @param x The value.
 * @param min Start of the range.
 * @param max End of the range.
 * @returns Restricted value.
 */
function cycleRestrict(x, min, max) {
    const d = max - min;
    const s = (x - min) / (max - min);
    return min + d * (s - Math.floor(s));
}
/**
 * Linear interpolation.
 *
 * @param min Value that correspond to 0% progress.
 * @param max Value that correspond to 100% progress.
 * @param progress In 0..1.0 range that maps to 0..100% progress. It is allowed to pass a value
 *      outside of this range, that means progress greater then 100% or negative progress.
 */
function mix(min, max, progress) {
    return (1 - progress) * min + progress * max;
}
/**
 * A step function with a smooth transition between given edges. Completely
 * analogous to `smoothstep` in GLSL (GLSL ES 1.0 §8.3).
 *
 * @param edge1 The smaller edge.
 * @param edge2
 * @param x `0` if `x < edge1`, `1` if `x > edge2` and an interpolated value for
 *      `edge1 < x < edge2`.
 */
function smoothStep(edge1, edge2, x) {
    const factor = clamp((x - edge1) / (edge2 - edge1), 0, 1);
    return factor * factor * (3 - 2 * factor);
}


/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deg2rad", function() { return deg2rad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rad2deg", function() { return rad2deg; });
const DEG_TO_RAD = Math.PI / 180;
function deg2rad(x) {
    return x * DEG_TO_RAD;
}
function rad2deg(x) {
    return x / DEG_TO_RAD;
}


/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getFullOptions; });
/**
 * Resolves options.
 *
 * @param defaultOptions Object with default values.
 * @param options Object with custom values for options. Later objects "override"
 *      former ones.
 * @returns New object containing resolved options.
 */
function getFullOptions(defaultOptions, ...options) {
    return Object.assign({}, defaultOptions, ...options);
}


/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IDENTITY", function() { return IDENTITY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZERO", function() { return ZERO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zero", function() { return zero; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateX", function() { return rotateX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateY", function() { return rotateY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateZ", function() { return rotateZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translate", function() { return translate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lookAt", function() { return lookAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "perspective", function() { return perspective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mul", function() { return mul; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apply", function() { return apply; });
/* harmony import */ var _vector3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(20);

// TODO(dmikis) RoMatrix4?
const IDENTITY = [
    1, 0, 0, 0,
    0, 1, 0, 0,
    0, 0, 1, 0,
    0, 0, 0, 1
];
const ZERO = [
    0, 0, 0, 0,
    0, 0, 0, 0,
    0, 0, 0, 0,
    0, 0, 0, 0
];
const MATRIX_SIZE = 16;
/**
 * Creates and returns a new **uninitialized** matrix.
 */
function create() {
    return new Array(MATRIX_SIZE);
}
/**
 * Zeroes a matrix.
 *
 * @param dst The matrix.
 * @returns `dst`.
 */
function zero(dst = create()) {
    for (let i = 0; i < MATRIX_SIZE; ++i) {
        dst[i] = 0;
    }
    return dst;
}
/**
 * Copies a matrix to another one.
 *
 * @param src The matrix to be copied.
 * @param dst The matrix the `src` will be copied to.
 * @returns `dst`.
 */
function copy(src, dst = create()) {
    for (let i = 0; i < MATRIX_SIZE; ++i) {
        dst[i] = src[i];
    }
    return dst;
}
/**
 * Applies a rotation around the X axis by a given angle to a given matrix.
 * Positive direction is from positive Y to positive Z.
 *
 * @param src The matrix to be multiplied by the rotation matrix.
 * @param angle The angle of rotation.
 * @param dst The matrix the product will be stored to. Can be the same as `src`.
 * @returns `dst`.
 */
function rotateX(src, angle, dst = create()) {
    const angleCos = Math.cos(angle);
    const angleSin = Math.sin(angle);
    // The rotation matrix:
    //
    // 1   0    0 0
    // 0 cos -sin 0
    // 0 sin  cos 0
    // 0   0    0 1
    for (let i = 0; i < MATRIX_SIZE; i += 4) {
        dst[i] = src[i];
        const m1i = src[i + 1];
        const m2i = src[i + 2];
        dst[i + 1] = m1i * angleCos - m2i * angleSin;
        dst[i + 2] = m1i * angleSin + m2i * angleCos;
        dst[i + 3] = src[i + 3];
    }
    return dst;
}
/**
 * Applies a rotation around the Y axis by a given angle to a given matrix.
 * Positive direction is from positive X to positive Z.
 *
 * @param src The matrix to be multiplied by the rotation matrix.
 * @param angle The angle of rotation.
 * @param dst The matrix the product will be stored to. Can be the same as `src`.
 * @returns `dst`.
 */
function rotateY(src, angle, dst = create()) {
    const angleCos = Math.cos(angle);
    const angleSin = Math.sin(angle);
    // The rotation matrix:
    //
    // cos 0 -sin 0
    // 0   1    0 0
    // sin 0  cos 0
    // 0    0   0 1
    for (let i = 0; i < MATRIX_SIZE; i += 4) {
        const m0i = src[i];
        const m2i = src[i + 2];
        dst[i] = m0i * angleCos - m2i * angleSin;
        dst[i + 1] = src[i + 1];
        dst[i + 2] = m0i * angleSin + m2i * angleCos;
        dst[i + 3] = src[i + 3];
    }
    return dst;
}
/**
 * Applies a rotation around the X axis by a given angle to a given matrix.
 * Positive direction is from positive X to positive Y.
 *
 * @param src The matrix to be multiplied by the rotation matrix.
 * @param angle The angle of rotation.
 * @param dst The matrix the product will be stored to. Can be the same as `src`.
 * @returns `dst`.
 */
function rotateZ(src, angle, dst = create()) {
    const angleCos = Math.cos(angle);
    const angleSin = Math.sin(angle);
    // The rotation matrix:
    // cos -sin 0 0
    // sin  cos 0 0
    //   0    0 1 0
    //   0    0 0 1
    for (let i = 0; i < MATRIX_SIZE; i += 4) {
        const m0i = src[i];
        const m1i = src[i + 1];
        dst[i] = m0i * angleCos - m1i * angleSin;
        dst[i + 1] = m0i * angleSin + m1i * angleCos;
        dst[i + 2] = src[i + 2];
        dst[i + 3] = src[i + 3];
    }
    return dst;
}
/**
 * Applies a translation by a given vector to a given matrix.
 *
 * @param src The matrix to be multiplied by the translation matrix.
 * @param translation The translation vector.
 * @param dst The matrix the product will be stored to. Can be the same as `src`.
 * @returns `dst`.
 */
function translate(src, translation, dst = create()) {
    for (let i = 0; i < MATRIX_SIZE; i += 4) {
        const m4i = dst[i + 3] = src[i + 3];
        dst[i] = src[i] + m4i * translation.x;
        dst[i + 1] = src[i + 1] + m4i * translation.y;
        dst[i + 2] = src[i + 2] + m4i * translation.z;
    }
    return dst;
}
/**
 * Applies a scale matrix by given factors (packed into a vector) to a given
 * matrix.
 *
 * @param src The matrix to be multiplied by the scale matrix.
 * @param factor The vector the scale factors packed into.
 * @param dst The matrix the product will be stored to. Can be the same as `src`.
 * @returns `dst`.
 */
function scale(src, factor, dst = create()) {
    for (let i = 0; i < MATRIX_SIZE; i += 4) {
        dst[i] = src[i] * factor.x;
        dst[i + 1] = src[i + 1] * factor.y;
        dst[i + 2] = src[i + 2] * factor.z;
        dst[i + 3] = src[i + 3];
    }
    return dst;
}
// The matrix:
// xAxis.x yAxis.x zAxis.x -eye.x
// xAxis.y yAxis.y zAxis.y -eye.y
// xAxis.z yAxis.z zAxis.z -eye.z
//       0       0       0 1
// where xAxis, yAxis and zAxis — axes of the eye coordinate system, eye —
// origin of the eye coordinate system.
const lookAtMatrix = copy(IDENTITY);
/**
 * Applies a matrix of transformation into a coordinate system of a camera
 * defined by its position, a point it's looking at and an up direction vector.
 *
 * @param src The matrix to be multiplied by the scale matrix.
 * @param eye The position of the camera.
 * @param center The point the camera's looking at.
 * @param up The up vector.
 * @param dst The matrix the product will be stored to. Can be the same as `src`.
 * @returns `dst`.
 */
function lookAt(src, eye, center, up, dst = create()) {
    const zAxis = _vector3__WEBPACK_IMPORTED_MODULE_0__["sub"](eye, center);
    _vector3__WEBPACK_IMPORTED_MODULE_0__["normalize"](zAxis, zAxis);
    const xAxis = _vector3__WEBPACK_IMPORTED_MODULE_0__["cross"](up, zAxis);
    _vector3__WEBPACK_IMPORTED_MODULE_0__["normalize"](xAxis, xAxis);
    const yAxis = _vector3__WEBPACK_IMPORTED_MODULE_0__["cross"](zAxis, xAxis);
    lookAtMatrix[0] = xAxis.x;
    lookAtMatrix[1] = yAxis.x;
    lookAtMatrix[2] = zAxis.x;
    lookAtMatrix[4] = xAxis.y;
    lookAtMatrix[5] = yAxis.y;
    lookAtMatrix[6] = zAxis.y;
    lookAtMatrix[8] = xAxis.z;
    lookAtMatrix[9] = yAxis.z;
    lookAtMatrix[10] = zAxis.z;
    lookAtMatrix[12] = -_vector3__WEBPACK_IMPORTED_MODULE_0__["dot"](xAxis, eye);
    lookAtMatrix[13] = -_vector3__WEBPACK_IMPORTED_MODULE_0__["dot"](yAxis, eye);
    lookAtMatrix[14] = -_vector3__WEBPACK_IMPORTED_MODULE_0__["dot"](zAxis, eye);
    return mul(src, lookAtMatrix, dst);
}
/**
 * Applies a perspective matrix to a given one.
 *
 * @param src The matrix to be multiplied by the perspective matrix.
 * @param fov Vertical field of view angle.
 * @param aspectRatio Screen aspect ratio.
 * @param zNear Z-coordinate of near clipping plane.
 * @param zFar Z-coordinate of far clipping plane.
 * @param dst The matrix the product will be stored to. Can be the same as `src`.
 * @returns `dst`.
 */
function perspective(src, fov, aspect, zNear, zFar, dst = create()) {
    const p11 = 1 / Math.tan(0.5 * fov);
    const p00 = p11 / aspect;
    const p22 = (zNear + zFar) / (zNear - zFar);
    const p32 = 2 * zNear * zFar / (zNear - zFar);
    for (let i = 0; i < MATRIX_SIZE; i += 4) {
        dst[i] = src[i] * p00;
        dst[i + 1] = src[i + 1] * p11;
        const m2i = src[i + 2];
        const m3i = src[i + 3];
        dst[i + 2] = m2i * p22 + m3i * p32;
        dst[i + 3] = -m2i;
    }
    return dst;
}
/**
 * Multiplies a matrix by another one, i.e. `dst = m * src`.
 *
 * @param src The right matrix.
 * @param m The left matrix.
 * @param dst The matrix the product will be stored to. Can be the same as `src`.
 * @returns `dst`.
 */
function mul(src, m, dst = create()) {
    for (let i = 0; i < MATRIX_SIZE; i += 4) {
        const m0i = src[i];
        const m1i = src[i + 1];
        const m2i = src[i + 2];
        const m3i = src[i + 3];
        for (let j = 0; j < 4; ++j) {
            dst[i + j] = m0i * m[j] + m1i * m[4 + j] + m2i * m[8 + j] +
                m3i * m[12 + j];
        }
    }
    return dst;
}
/**
 * Applies a matrix to a vector.
 *
 * @param m The matrix.
 * @param v The vector.
 * @returns Normalized product of multiplying the vector by the matrix.
 */
function apply(m, v, dst = _vector3__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0, 0)) {
    const w = m[3] * v.x + m[7] * v.y + m[11] * v.z + m[15];
    const x = (m[0] * v.x + m[4] * v.y + m[8] * v.z + m[12]) / w;
    const y = (m[1] * v.x + m[5] * v.y + m[9] * v.z + m[13]) / w;
    const z = (m[2] * v.x + m[6] * v.y + m[10] * v.z + m[14]) / w;
    dst.x = x;
    dst.y = y;
    dst.z = z;
    return dst;
}


/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ORIGIN", function() { return ORIGIN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POSITIVE_X", function() { return POSITIVE_X; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NEGATIVE_X", function() { return NEGATIVE_X; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POSITIVE_Y", function() { return POSITIVE_Y; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NEGATIVE_Y", function() { return NEGATIVE_Y; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POSITIVE_Z", function() { return POSITIVE_Z; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NEGATIVE_Z", function() { return NEGATIVE_Z; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "areEqual", function() { return areEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "areFuzzyEqual", function() { return areFuzzyEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "areCollinear", function() { return areCollinear; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mulv", function() { return mulv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "muln", function() { return muln; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "divv", function() { return divv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "divn", function() { return divn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "length", function() { return length; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distance", function() { return distance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalize", function() { return normalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return dot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cross", function() { return cross; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateX", function() { return rotateX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateY", function() { return rotateY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateZ", function() { return rotateZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "X_AXIS", function() { return X_AXIS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Y_AXIS", function() { return Y_AXIS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Z_AXIS", function() { return Z_AXIS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XY", function() { return XY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "YZ", function() { return YZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZX", function() { return ZX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPlaneLineIntersection", function() { return getPlaneLineIntersection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPlaneRayIntersection", function() { return getPlaneRayIntersection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPlanePlaneIntersection", function() { return getPlanePlaneIntersection; });
/* harmony import */ var _matrix3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21);
/* harmony import */ var _util_fuzzy_equal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(22);


/**
 * Creates a new vector and initializes it with given components.
 *
 * @param x X component of the vector.
 * @param y Y component of the vector.
 * @param z Z component of the vector.
 * @returns The vector.
 */
function create(x, y, z) {
    return { x, y, z };
}
const ORIGIN = create(0, 0, 0);
const POSITIVE_X = create(1, 0, 0);
const NEGATIVE_X = create(-1, 0, 0);
const POSITIVE_Y = create(0, 1, 0);
const NEGATIVE_Y = create(0, -1, 0);
const POSITIVE_Z = create(0, 0, 1);
const NEGATIVE_Z = create(0, 0, -1);
/**
 * Copies a vector to another one.
 *
 * @param src The source vector.
 * @param dst The vector the source vector will be copied to.
 * @returns `dst`.
 */
function copy(src, dst = create(0, 0, 0)) {
    dst.x = src.x;
    dst.y = src.y;
    dst.z = src.z;
    return dst;
}
/**
 * Checks if two vectors are strictly equal component-wise.
 *
 * @param v1 The first vector.
 * @param v2 The second vector.
 * @returns `true` if the vectors are equal and `false` otherwise.
 */
function areEqual(v1, v2) {
    return v1.x === v2.x && v1.y === v2.y && v1.z === v2.z;
}
/**
 * Checks if corresponding components of two vectors are all within given
 * tolerance from each other.
 *
 * @param v1 The first vector.
 * @param v2 The second vector.
 * @param tolerance The tolerance.
 * @returns `true` if the vectors are "fuzzy" equal and `false` otherwise.
 */
function areFuzzyEqual(v1, v2, tolerance = _util_fuzzy_equal__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_TOLERANCE"]) {
    return (Object(_util_fuzzy_equal__WEBPACK_IMPORTED_MODULE_1__["default"])(v1.x, v2.x, tolerance) &&
        Object(_util_fuzzy_equal__WEBPACK_IMPORTED_MODULE_1__["default"])(v1.y, v2.y, tolerance) &&
        Object(_util_fuzzy_equal__WEBPACK_IMPORTED_MODULE_1__["default"])(v1.z, v2.z, tolerance));
}
/**
 * Checks if two vectors are collinear.
 *
 * @param v1 The first vector.
 * @param v2 The second vector.
 * @returns `true` if the vectors are collinear and `false` otherwise.
 */
function areCollinear(v1, v2) {
    const lambdaX = v1.x / v2.x;
    const lambdaY = v1.y / v2.y;
    const lambdaZ = v1.z / v2.z;
    return lambdaX === lambdaY && lambdaY === lambdaZ;
}
/**
 * Adds two vector and stores the result into a third one, i.e. `dst = a + b`.
 *
 * @param a The first vector.
 * @param b The second vector.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function add(a, b, dst = create(0, 0, 0)) {
    dst.x = a.x + b.x;
    dst.y = a.y + b.y;
    dst.z = a.z + b.z;
    return dst;
}
/**
 * Subtracts a vector from another one and stores the result to a third one, i.e.
 * `dst = a - b`.
 *
 * @param a The minuend vector.
 * @param b The subtrahend vector.
 * @param dst The vector the result will be stored to.
 */
function sub(a, b, dst = create(0, 0, 0)) {
    dst.x = a.x - b.x;
    dst.y = a.y - b.y;
    dst.z = a.z - b.z;
    return dst;
}
/**
 * Multiplies two vectors component-wise and stores the result into a third one.
 *
 * @param a The first vector.
 * @param b The second vector.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function mulv(a, b, dst = create(0, 0, 0)) {
    dst.x = a.x * b.x;
    dst.y = a.y * b.y;
    dst.z = a.z * b.z;
    return dst;
}
/**
 * Multiplies a vector by a scalar and stores the result into a third vector.
 *
 * @param a The vector.
 * @param n The scalar.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function muln(a, n, dst = create(0, 0, 0)) {
    dst.x = a.x * n;
    dst.y = a.y * n;
    dst.z = a.z * n;
    return dst;
}
/**
 * Divides a vector by another one component wise and stores the result into a
 * third one.
 *
 * @param a The dividend vector.
 * @param b The divisor vector.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function divv(a, b, dst = create(0, 0, 0)) {
    dst.x = a.x / b.x;
    dst.y = a.y / b.y;
    dst.z = a.z / b.z;
    return dst;
}
/**
 * Divides a vector by a scalar and stores the result into a third vector.
 *
 * @param a The dividend vector.
 * @param n The scalar.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function divn(a, n, dst = create(0, 0, 0)) {
    dst.x = a.x / n;
    dst.y = a.y / n;
    dst.z = a.z / n;
    return dst;
}
/**
 * Computes length of a vector.
 *
 * @param v The vector.
 * @returns The length.
 */
function length(v) {
    return Math.hypot(v.x, v.y, v.z);
}
/**
 * Computes distance between ends of two vectors.
 *
 * @param a The first vector.
 * @param b The second vector.
 * @returns The distance, i.e. `length(sub(a, b))`.
 */
function distance(a, b) {
    return Math.hypot(a.x - b.x, a.y - b.y, a.z - b.z);
}
/**
 * Divides a vector by its length (thus making it a unit vector) and stores the
 * result to another one.
 *
 * @param v The vector to be normalized.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function normalize(v, dst = create(0, 0, 0)) {
    return divn(v, length(v), dst);
}
/**
 * Computes dot product of two vectors.
 *
 * @param a The first vector.
 * @param b The second vector.
 * @returns The dot product.
 */
function dot(a, b) {
    return a.x * b.x + a.y * b.y + a.z * b.z;
}
/**
 * Computes cross product of two vectors and stores it to a third one.
 *
 * @param a The first vector.
 * @param b The second vector.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function cross(a, b, dst = create(0, 0, 0)) {
    // Write components to a separate variables so we don't produce incorrect
    // results in cases when a == dst or b == dst.
    const x = a.y * b.z - a.z * b.y;
    const y = a.z * b.x - a.x * b.z;
    const z = a.x * b.y - a.y * b.x;
    dst.x = x;
    dst.y = y;
    dst.z = z;
    return dst;
}
/**
 * Rotates vector about the X axis.
 *
 * @param v The vector to be rotated.
 * @param angle The angle of rotation (in radians), positive values rotates from +Y to +Z
 * @param dst The vector the result will be stored to.
 */
function rotateX(v, angle, dst = create(0, 0, 0)) {
    const cos = Math.cos(angle);
    const sin = Math.sin(angle);
    const y = v.y;
    dst.x = v.x;
    dst.y = y * cos - v.z * sin;
    dst.z = y * sin + v.z * cos;
    return dst;
}
/**
 * Rotates vector about the Y axis.
 *
 * @param v The vector to be rotated.
 * @param angle The angle of rotation (in radians), positive values rotates from +X to +Z
 * @param dst The vector the result will be stored to.
 */
function rotateY(v, angle, dst = create(0, 0, 0)) {
    const cos = Math.cos(angle);
    const sin = Math.sin(angle);
    // handle the case when source and destination are the same object: related components can break each other
    v = (v === dst) ? copy(v) : v;
    dst.x = v.x * cos + v.z * sin;
    dst.y = v.y;
    dst.z = -v.x * sin + v.z * cos;
    return dst;
}
/**
 * Rotates vector about the Z axis.
 *
 * @param v The vector to be rotated.
 * @param angle The angle of rotation (in radians), positive values rotates from +X to +Y
 * @param dst The vector the result will be stored to.
 */
function rotateZ(v, angle, dst = create(0, 0, 0)) {
    const cos = Math.cos(angle);
    const sin = Math.sin(angle);
    // handle the case when source and destination are the same object: related components can break each other
    v = (v === dst) ? copy(v) : v;
    dst.x = v.x * cos - v.y * sin;
    dst.y = v.x * sin + v.y * cos;
    dst.z = v.z;
    return dst;
}
const X_AXIS = {
    origin: ORIGIN,
    tangent: POSITIVE_X
};
const Y_AXIS = {
    origin: ORIGIN,
    tangent: POSITIVE_Y
};
const Z_AXIS = {
    origin: ORIGIN,
    tangent: POSITIVE_Z
};
const XY = {
    normal: POSITIVE_Z,
    distance: 0
};
const YZ = {
    normal: POSITIVE_X,
    distance: 0
};
const ZX = {
    normal: POSITIVE_Y,
    distance: 0
};
/**
 * Computes intersection of a plane and a line.
 *
 * @param p The plane.
 * @param l The line.
 * @returns The point or `null` if the line is parallel to the plane.
 */
function getPlaneLineIntersection(p, l) {
    const dotLP = dot(l.tangent, p.normal);
    // If plane normal and line tangent vector are perpendicular intersection is
    // either an empty set or the line itself.
    if (dotLP === 0) {
        return null;
    }
    const intersection = copy(l.tangent);
    muln(intersection, (p.distance - dot(p.normal, l.origin)) / dotLP, intersection);
    add(intersection, l.origin, intersection);
    return intersection;
}
/**
 * Computes an intersection of a plane and a ray and stores it into a given
 * vector.
 *
 * @param plane The plane.
 * @param ray The ray.
 * @param dst The vector the intersection point will be stored to. If there's no
 *      intersection, this vector will be left unmodified.
 * @returns The `dst` or `null` if the ray doesn't have a common point with the
 *      plane.
 */
function getPlaneRayIntersection(plane, ray, dst = create(0, 0, 0)) {
    const dotRP = dot(ray.direction, plane.normal);
    if (dotRP === 0) {
        // The plane normal and the ray direction vector are perpendicular, so
        // intersection is either an empty set or the ray itself.
        return null;
    }
    const lambda = (plane.distance - dot(plane.normal, ray.origin)) / dotRP;
    if (lambda < 0) {
        // The intersection point is on a line that contains the ray, but not on
        // the ray itself.
        return null;
    }
    copy(ray.direction, dst);
    muln(dst, lambda, dst);
    add(dst, ray.origin, dst);
    return dst;
}
/**
 * Computes intersection of two planes.
 *
 * @param p1 The first plane.
 * @param p2 The second plane.
 * @returns The line or `null` if the planes are parallel to each other.
 */
function getPlanePlaneIntersection(p1, p2) {
    const n1 = p1.normal;
    const n2 = p2.normal;
    if (areCollinear(n1, n2)) {
        return null;
    }
    const tangent = cross(n1, n2);
    normalize(tangent);
    return {
        tangent,
        origin: _matrix3__WEBPACK_IMPORTED_MODULE_0__["solve"](_matrix3__WEBPACK_IMPORTED_MODULE_0__["fromRows"](n1, n2, tangent), create(p1.distance, p2.distance, 0))
    };
}


/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zero", function() { return zero; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRows", function() { return fromRows; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "columns", function() { return columns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromColumns", function() { return fromColumns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "determinant", function() { return determinant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "solve", function() { return solve; });
/* harmony import */ var _vector3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(20);

const MATRIX_SIZE = 9;
/**
 * Creates and returns a new **uninitialized** matrix.
 */
function create() {
    return new Array(MATRIX_SIZE);
}
/**
 * Zeroes a matrix.
 *
 * @param dst The matrix.
 * @returns `dst`.
 */
function zero(dst = create()) {
    for (let i = 0; i < MATRIX_SIZE; ++i) {
        dst[i] = 0;
    }
    return dst;
}
/**
 * Copies three vectors to a matrix as rows.
 *
 * @param r0 The first row.
 * @param r1 The second row.
 * @param r2 The third row.
 * @param dst The matrix the rows will be written to.
 * @returns `dst`.
 */
function fromRows(r0, r1, r2, dst = create()) {
    dst[0] = r0.x;
    dst[1] = r1.x;
    dst[2] = r2.x;
    dst[3] = r0.y;
    dst[4] = r1.y;
    dst[5] = r2.y;
    dst[6] = r0.z;
    dst[7] = r1.z;
    dst[8] = r2.z;
    return dst;
}
/**
 * Returns array of columns of a matrix.
 *
 * @param m The matrix.
 * @param dst The array columns of the matrix will be written to.
 * @returns `dst`.
 */
function columns(m, dst = [
    _vector3__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0, 0),
    _vector3__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0, 0),
    _vector3__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0, 0)
]) {
    for (let i = 0, j = 0; i < 3; ++i, j += 3) {
        dst[i].x = m[j];
        dst[i].y = m[j + 1];
        dst[i].z = m[j + 2];
    }
    return dst;
}
/**
 * Copies three vectors to a matrix as columns.
 *
 * @param c0 The first column.
 * @param c1 The second column.
 * @param c2 The third column.
 * @param dst The matrix the columns will be written to.
 * @returns `dst`.
 */
function fromColumns(c0, c1, c2, dst = create()) {
    dst[0] = c0.x;
    dst[1] = c0.y;
    dst[2] = c0.z;
    dst[3] = c1.x;
    dst[4] = c1.y;
    dst[5] = c1.z;
    dst[6] = c2.x;
    dst[7] = c2.y;
    dst[8] = c2.z;
    return dst;
}
/**
 * Computes determinant of a matrix.
 *
 * @param m The matrix.
 * @returns The determinant.
 */
function determinant(m) {
    return m[0] * (m[4] * m[8] - m[7] * m[5]) +
        m[3] * (m[1] * m[8] - m[7] * m[2]) +
        m[6] * (m[1] * m[5] - m[4] * m[2]);
}
const staticMatrixColumns = [
    // Not using vector3.create here due to circular dependency.
    { x: 0, y: 0, z: 0 },
    { x: 0, y: 0, z: 0 },
    { x: 0, y: 0, z: 0 }
];
const staticMatrix = create();
/**
 * Solves a system of linear equations represented with a matrix and a vector,
 * i.e.:
 *
 * ```
 * m * (x, y ,z)^T = v
 * ```
 *
 * Uses Cramer's rule.
 * @see https://en.wikipedia.org/wiki/Cramer's_rule
 *
 * @param m The matrix of the system.
 * @param v The vector of the system.
 * @param dst The vector solution of the system will be written to.
 * @return `dst`.
 */
function solve(m, v, dst = _vector3__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0, 0)) {
    const revDet = 1 / determinant(m);
    const [c0, c1, c2] = columns(m, staticMatrixColumns);
    dst.x = revDet * determinant(fromColumns(v, c1, c2, staticMatrix));
    dst.y = revDet * determinant(fromColumns(c0, v, c2, staticMatrix));
    dst.z = revDet * determinant(fromColumns(c0, c1, v, staticMatrix));
    return dst;
}


/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_TOLERANCE", function() { return DEFAULT_TOLERANCE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return areFuzzyEqual; });
const DEFAULT_TOLERANCE = 1e-6;
/**
 * Checks if two floating point number are within a tolerance from each other.
 *
 * @param a The first number.
 * @param b The second number.
 * @param tolerance The tolerance.
 * @returns `true` if the number are within the tolerance and `false` otherwise.
 */
function areFuzzyEqual(a, b, tolerance = DEFAULT_TOLERANCE) {
    const d = a - b;
    return -tolerance < d && d < tolerance;
}


/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZERO", function() { return ZERO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ORIGIN", function() { return ORIGIN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POSITIVE_X", function() { return POSITIVE_X; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NEGATIVE_X", function() { return NEGATIVE_X; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POSITIVE_Y", function() { return POSITIVE_Y; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NEGATIVE_Y", function() { return NEGATIVE_Y; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "areEqual", function() { return areEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "areCollinear", function() { return areCollinear; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "areFuzzyEqual", function() { return areFuzzyEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mulv", function() { return mulv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "muln", function() { return muln; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "divv", function() { return divv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "divn", function() { return divn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mod", function() { return mod; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mix", function() { return mix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate45", function() { return rotate45; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate90", function() { return rotate90; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateNeg90", function() { return rotateNeg90; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invert", function() { return invert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "length", function() { return length; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distance", function() { return distance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalize", function() { return normalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convert", function() { return convert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return dot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "crossZ", function() { return crossZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EMPTY", function() { return EMPTY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UNIT_BBOX", function() { return UNIT_BBOX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createBBox2", function() { return createBBox2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copyBBox2", function() { return copyBBox2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bboxesOverlap", function() { return bboxesOverlap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pointIsInBBox", function() { return pointIsInBBox; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeBBoxForPoints", function() { return computeBBoxForPoints; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "X_AXIS", function() { return X_AXIS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Y_AXIS", function() { return Y_AXIS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLineFromPoints", function() { return getLineFromPoints; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSignedDistanceToLine", function() { return getSignedDistanceToLine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createExtent2", function() { return createExtent2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copyExtent2", function() { return copyExtent2; });
/* harmony import */ var _util_fuzzy_equal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(22);

/**
 * Creates a new vector and initializes it with given components.
 *
 * @param x X component of the vector.
 * @param y Y component of the vector.
 * @returns The vector.
 */
function create(x, y) {
    return { x, y };
}
const ZERO = create(0, 0);
const ORIGIN = ZERO;
const POSITIVE_X = create(1, 0);
const NEGATIVE_X = create(-1, 0);
const POSITIVE_Y = create(0, 1);
const NEGATIVE_Y = create(0, -1);
/**
 * Copies a vector to another one.
 *
 * @param src The source vector.
 * @param dst The vector the source vector will be copied to.
 * @returns `dst`.
 */
function copy(src, dst = create(0, 0)) {
    dst.x = src.x;
    dst.y = src.y;
    return dst;
}
/**
 * Checks if two vectors are strictly equal component-wise.
 *
 * @param v1 The first vector.
 * @param v2 The second vector.
 * @returns `true` if the vectors are equal and `false` otherwise.
 */
function areEqual(v1, v2) {
    return v1.x === v2.x && v1.y === v2.y;
}
/**
 * Checks if two vectors are collinear.
 *
 * @param v1 The first vector.
 * @param v2 The second vector.
 * @returns `true` if the vectors are collinear and `false` otherwise.
 */
function areCollinear(v1, v2) {
    return v1.x / v2.x === v1.y / v2.y;
}
/**
 * Checks if corresponding components of two vectors are all within given
 * tolerance from each other.
 *
 * @param v1 The first vector.
 * @param v2 The second vector.
 * @param tolerance The tolerance.
 * @returns `true` if the vectors are "fuzzy" equal and `false` otherwise.
 */
function areFuzzyEqual(v1, v2, tolerance = _util_fuzzy_equal__WEBPACK_IMPORTED_MODULE_0__["DEFAULT_TOLERANCE"]) {
    return (Object(_util_fuzzy_equal__WEBPACK_IMPORTED_MODULE_0__["default"])(v1.x, v2.x, tolerance) &&
        Object(_util_fuzzy_equal__WEBPACK_IMPORTED_MODULE_0__["default"])(v1.y, v2.y, tolerance));
}
/**
 * Adds two vector and stores the result into a third one, i.e. `dst = a + b`.
 *
 * @param a The first vector.
 * @param b The second vector.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function add(a, b, dst = create(0, 0)) {
    dst.x = a.x + b.x;
    dst.y = a.y + b.y;
    return dst;
}
/**
 * Subtracts a vector from another one and stores the result to a third one, i.e.
 * `dst = a - b`.
 *
 * @param a The minuend vector.
 * @param b The subtrahend vector.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function sub(a, b, dst = create(0, 0)) {
    dst.x = a.x - b.x;
    dst.y = a.y - b.y;
    return dst;
}
/**
 * Multiplies two vectors component-wise and stores the result into a third one.
 *
 * @param a The first vector.
 * @param b The second vector.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function mulv(a, b, dst = create(0, 0)) {
    dst.x = a.x * b.x;
    dst.y = a.y * b.y;
    return dst;
}
/**
 * Multiplies a vector by a scalar and stores the result into a third vector.
 *
 * @param a The vector.
 * @param n The scalar.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function muln(a, n, dst = create(0, 0)) {
    dst.x = a.x * n;
    dst.y = a.y * n;
    return dst;
}
/**
 * Divides a vector by another one component wise and stores the result into a
 * third one.
 *
 * @param a The dividend vector.
 * @param b The divisor vector.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function divv(a, b, dst = create(0, 0)) {
    dst.x = a.x / b.x;
    dst.y = a.y / b.y;
    return dst;
}
/**
 * Divides a vector by a scalar and stores the result into a third vector.
 *
 * @param a The dividend vector.
 * @param n The scalar.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function divn(a, n, dst = create(0, 0)) {
    dst.x = a.x / n;
    dst.y = a.y / n;
    return dst;
}
/**
 * Calculates the reminder after division of a's components by n and stores the result into a third vector.
 *
 * @param a The dividend vector.
 * @param n The scalar.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function mod(a, n, dst = create(0, 0)) {
    dst.x = a.x % n;
    dst.y = a.y % n;
    return dst;
}
/**
 * Linearly interpolates between two vectors, i.e. computes
 * `(1 - factor) * a + factor * b`, and writes the result into a third vector.
 *
 * @param a The first vector.
 * @param b The second vector.
 * @param factor The interpolation factor.
 * @param dst The vector the result will be written to.
 * @returns `dst`.
 */
function mix(a, b, factor, dst = create(0, 0)) {
    dst.x = (1 - factor) * a.x + factor * b.x;
    dst.y = (1 - factor) * a.y + factor * b.y;
    return dst;
}
/**
 * Rotates a vector by a given angle and stores the result into a second vector.
 * Positive direction is from +X to +Y.
 *
 * @param v The vector to rotate.
 * @param angle The angle of rotation.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function rotate(v, angle, dst = create(0, 0)) {
    const x = v.x;
    const y = v.y;
    const angleCos = Math.cos(angle);
    const angleSin = Math.sin(angle);
    dst.x = angleCos * x - angleSin * y;
    dst.y = angleSin * x + angleCos * y;
    return dst;
}
/**
 * Rotates a vector by 45 degrees and stores the result into a second vector.
 * Analogous to `rotate(v, Math.PI / 4, dst)`, but faster.
 *
 * @param v The vector to rotate.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function rotate45(v, dst = create(0, 0)) {
    const y = v.y;
    const s = Math.SQRT1_2;
    dst.y = s * v.x + s * v.y;
    dst.x = s * v.x - s * y;
    return dst;
}
/**
 * Rotates a vector by 90 degrees and stores the result into a second vector.
 * Analogous to `rotate(v, Math.PI / 2, dst)`, but faster.
 *
 * @param v The vector to rotate.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function rotate90(v, dst = create(0, 0)) {
    const y = v.y;
    dst.y = v.x;
    dst.x = -y;
    return dst;
}
/**
 * Rotates a vector by -90 degrees and stores the result into a second vector.
 * Analogous to `rotate(v, -Math.PI / 2, dst)`, but faster.
 *
 * @param v The vector to rotate.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function rotateNeg90(v, dst = create(0, 0)) {
    const y = v.y;
    dst.y = -v.x;
    dst.x = y;
    return dst;
}
/**
 * Inverts signs of components of a vector and stores the result into a second
 * vector. Analogous to `rotate(v, Math.PI, dst)` (or `rotate(v, -Math.PI, dst)`,
 * which is the same), but faster.
 *
 * @param v The vector to invert.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function invert(v, dst = create(0, 0)) {
    dst.x = -v.x;
    dst.y = -v.y;
    return dst;
}
/**
 * Computes length of a vector.
 *
 * @param v The vector.
 * @returns The length.
 */
function length(v) {
    return Math.hypot(v.x, v.y);
}
/**
 * Computes distance between ends of two vectors.
 *
 * @param a The first vector.
 * @param b The second vector.
 * @returns The distance, i.e. `length(sub(a, b))`.
 */
function distance(a, b) {
    return Math.hypot(a.x - b.x, a.y - b.y);
}
/**
 * Divides a vector by its length (thus making it a unit vector) and stores the
 * result to another one.
 *
 * @param v The vector to be normalized.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function normalize(v, dst = create(0, 0)) {
    return divn(v, length(v), dst);
}
/**
 * Converts each component of vector.
 *
 * @param v The vector to be converted.
 * @param converter The component converter.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function convert(v, converter, dst = create(0, 0)) {
    dst.x = converter(v.x);
    dst.y = converter(v.y);
    return dst;
}
/**
 * Computes dot product of two vectors.
 *
 * @param a The first vector.
 * @param b The second vector.
 * @returns The dot product.
 */
function dot(a, b) {
    return a.x * b.x + a.y * b.y;
}
/**
 * Computes Z-component of a cross product of two vectors.
 *
 * @param a The first vector.
 * @param b The second vector.
 * @returns Z-component of the cross product.
 */
function crossZ(a, b) {
    return a.x * b.y - a.y * b.x;
}
const EMPTY = {
    minX: 0,
    maxX: 0,
    minY: 0,
    maxY: 0
};
const UNIT_BBOX = {
    minX: -1,
    maxX: 1,
    minY: -1,
    maxY: 1
};
/**
 * Creates a new bbox and initializes it with given components.
 *
 * @param minX Left border of the bbox.
 * @param maxX Right border of the bbox.
 * @param minY Lower border of the bbox.
 * @param maxY Upper border of the bbox.
 * @returns The bbox.
 */
function createBBox2(minX, maxX, minY, maxY) {
    return { minX, maxX, minY, maxY };
}
/**
 * Copies a bbox to another one.
 *
 * @param src The source bbox.
 * @param dst The bbox the source bbox will be copied to.
 * @returns `dst`.
 */
function copyBBox2(src, dst = createBBox2(0, 0, 0, 0)) {
    dst.minX = src.minX;
    dst.maxX = src.maxX;
    dst.minY = src.minY;
    dst.maxY = src.maxY;
    return dst;
}
/**
 * Checks if two bounding boxes overlap.
 *
 * @param bbox1 A bounding box.
 * @param bbox2 Another bounding box.
 * @returns `true` if given bounding boxes do overlap and `false` otherwise.
 */
function bboxesOverlap(bbox1, bbox2) {
    let leftBBox;
    let rightBBox;
    if (bbox1.minX < bbox2.minX) {
        leftBBox = bbox1;
        rightBBox = bbox2;
    }
    else {
        leftBBox = bbox2;
        rightBBox = bbox1;
    }
    let topBBox;
    let bottomBBox;
    if (bbox1.maxY > bbox2.maxY) {
        topBBox = bbox1;
        bottomBBox = bbox2;
    }
    else {
        topBBox = bbox2;
        bottomBBox = bbox1;
    }
    return rightBBox.minX < leftBBox.maxX && bottomBBox.maxY > topBBox.minY;
}
/**
 * Checks if a 2D point lies inside a bounding box or on its border.
 *
 * @param point The point.
 * @param bbox The bounding box.
 * @returns `true` if the point is inside of the box and `false` otherwise.
 */
function pointIsInBBox(point, bbox) {
    return bbox.minX <= point.x && point.x <= bbox.maxX &&
        bbox.minY <= point.y && point.y <= bbox.maxY;
}
/**
 * Computes bounding box of an array of points and stores it to a given object.
 *
 * @param points The array of points.
 * @param dst The bbox the result will be written to. Left unmodified if the array
 *      of points is empty.
 * @returns `dst`.
 */
function computeBBoxForPoints(points, dst = { minX: 0, maxX: 0, minY: 0, maxY: 0 }) {
    if (points.length === 0) {
        return dst;
    }
    dst.minX = dst.maxX = points[0].x;
    dst.minY = dst.maxY = points[0].y;
    for (let i = 1; i < points.length; ++i) {
        const { x, y } = points[i];
        if (x < dst.minX) {
            dst.minX = x;
        }
        if (x > dst.maxX) {
            dst.maxX = x;
        }
        if (y < dst.minY) {
            dst.minY = y;
        }
        if (y > dst.maxY) {
            dst.maxY = y;
        }
    }
    return dst;
}
const X_AXIS = {
    origin: ORIGIN,
    tangent: POSITIVE_X
};
const Y_AXIS = {
    origin: ORIGIN,
    tangent: POSITIVE_Y
};
function getLineFromPoints(p1, p2, dst = {
    origin: create(0, 0),
    tangent: create(0, 0)
}) {
    copy(p1, dst.origin);
    sub(p2, p1, dst.tangent);
    return dst;
}
/**
 * Computes signed distance from a point to a line.
 *
 * @param p The point.
 * @param l1 Start point of the line.
 * @param l2 End point of the line.
 * @returns Distance from the point to the line. It'll be greater than 0 if the
 *      point lies to the left of the line and less than 0 otherwise.
 */
function getSignedDistanceToLine(p, l) {
    const tangent = l.tangent;
    return dot(sub(p, l.origin), create(-tangent.y, tangent.x)) / length(tangent);
}
/**
 * Creates a new extent and initializes it with given components.
 *
 * @param width Width of the extent.
 * @param Height Height of the extent.
 * @returns The extent.
 */
function createExtent2(width, height) {
    return { width, height };
}
/**
 * Copies an extent to another one.
 *
 * @param src The source bbox.
 * @param dst The extent the source extent will be copied to.
 * @returns `dst`.
 */
function copyExtent2(src, dst = createExtent2(0, 0)) {
    dst.width = src.width;
    dst.height = src.height;
    return dst;
}


/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return VectorApiAdapter; });
/* harmony import */ var _tile_based_adapter_adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(25);
/* harmony import */ var _primitive_icon_icon_buffer_writer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(35);
/* harmony import */ var _render_memory_sub_chunk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(40);
/* harmony import */ var _billboard_identified_image_atlas_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(42);
/* harmony import */ var _font_df_font__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(44);
/* harmony import */ var _api_image_provider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(46);
/* harmony import */ var _primitive_model_model_buffer_writer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(50);
/* harmony import */ var _primitive_polyline_textured_polyline_buffer_writer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(51);
/* harmony import */ var _billboard_image_manager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(54);
/* harmony import */ var _primitive_polygon_textured_polygon_buffer_rewiter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(55);
/* harmony import */ var _primitive_polygon_polygon_attribute_mapping__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(58);
/* harmony import */ var _primitive_polygon_textured_polygon_attribute_mapping__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(57);
/* harmony import */ var _primitive_billboard_rectangle_attribute_mapping__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(59);
/* harmony import */ var _primitive_label_point_label_attribute_mapping__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(60);
/* harmony import */ var _primitive_label_curved_label_attribute_mapping__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(61);
/* harmony import */ var _primitive_polyline_polyline_attribute_mapping__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(62);
/* harmony import */ var _worker_tile_provider_worker_client__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(63);
/* harmony import */ var _worker_tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(64);
/* harmony import */ var _primitive_polygon_transparent_polygon_attribute_mapping__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(66);
/* harmony import */ var _tile_based_adapter_tile_id__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(29);
/* harmony import */ var _util_idle_task_queue__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(67);
/* harmony import */ var _util_stat__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(34);
/* harmony import */ var _util_unique_id__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(31);
/* harmony import */ var _primitive_polygon_renderable_polygon__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(70);
/* harmony import */ var _primitive_polygon_renderable_textured_polygon__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(72);
/* harmony import */ var _primitive_polyline_renderable_polyline__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(73);
/* harmony import */ var _primitive_polyline_renderable_textured_polyline__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(74);
/* harmony import */ var _primitive_model_renderable_model__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(75);
/* harmony import */ var _tile_data__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(76);
/* harmony import */ var _primitive_manager_renderable_primitive_manager__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(77);
/* harmony import */ var _render_primitives_primitive_set_storage__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(79);
/* harmony import */ var _primitive_manager_polygon_manager__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(80);
/* harmony import */ var _render_primitives_disappearing_primitive_set_storage__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(81);
/* harmony import */ var _render_primitives_delayed_disappearing_primitive_set_storage__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(82);
/* harmony import */ var _primitive_manager_zoom_filterable_primitive_manager__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(83);
/* harmony import */ var _primitive_manager_external_mesh_manager__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(84);
/* harmony import */ var _primitive_billboard_rectangle_renderable_billboard_rectangle__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(85);
/* harmony import */ var _primitive_zoom_restricted_label__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(86);
/* harmony import */ var _primitive_zoom_restricted_icon__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(88);
/* harmony import */ var _util_task_queue__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(92);








































const WORLD_SIZE = 2.0;
const NORMAL_TILE_SIDE_SIZE_PX = 256; // tiles of normal size are optimized for displaying in a 256x256 css px square
function getTileSideSizePx(tileSize) {
    switch (tileSize) {
        case 1 /* X4 */:
            return NORMAL_TILE_SIDE_SIZE_PX * 2;
        case 2 /* X16 */:
            return NORMAL_TILE_SIDE_SIZE_PX * 4;
        default:
            return NORMAL_TILE_SIDE_SIZE_PX;
    }
}
const MAX_PERF_LOG_ITEMS_COUNT = 1024;
const QUEUE_TASK_PRIORITIES = {
    firstTilePortion: 20,
    secondTilePortion: 10
};
const DEFAULT_IDLE_TASK_PRIORITY = 0;
// The values are chosen empirically: https://st.yandex-team.ru/VECTOR-300#5be5b638523211001b9bd941
const MINZOOM_DELTAS = {
    pointLabels: 1,
    curvedLabels: 1,
    icons: 0.75
};
class VectorApiAdapter extends _tile_based_adapter_adapter__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(engine, camera, tileProviderWorkerUrl, layerName, { imageUrlTemplate, tileUrlTemplate, meshUrlTemplate, glyphRangeUrlTemplate }, tileSize = 0 /* X1 */, preloadedTilesBeltSize = 0) {
        super(engine, camera, tileSize, preloadedTilesBeltSize, layerName);
        this._tileSideSizePx = getTileSideSizePx(tileSize);
        this._perfLogItems = [];
        this._destroyables = [];
        this._tileProvider = new _worker_tile_provider_worker_client__WEBPACK_IMPORTED_MODULE_16__["TileProviderWorkerClient"](tileProviderWorkerUrl);
        this._tileProvider.sendMessage({
            type: _worker_tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_17__["TileProviderMessageType"].INIT,
            tileUrlTemplate,
            meshUrlTemplate,
            glyphRangeUrlTemplate
        }, 1 /* IMMEDIATE */);
        this._memoryManager = engine.memoryManager;
        this._glyphAtlas = engine.glyphAtlas;
        this._fontRegistry = engine.fontRegistry;
        this._imageManagerNearest = new _billboard_image_manager__WEBPACK_IMPORTED_MODULE_8__["ImageManager"](new _billboard_identified_image_atlas_manager__WEBPACK_IMPORTED_MODULE_3__["default"](engine.createImageAtlas({
            filter: 9728 /* NEAREST */,
            premultipliedAlpha: false
        })), new _api_image_provider__WEBPACK_IMPORTED_MODULE_5__["ApiImageProvider"](imageUrlTemplate));
        this._imageManagerLinear = new _billboard_image_manager__WEBPACK_IMPORTED_MODULE_8__["ImageManager"](new _billboard_identified_image_atlas_manager__WEBPACK_IMPORTED_MODULE_3__["default"](engine.createImageAtlas({
            filter: 9729 /* LINEAR */,
            premultipliedAlpha: true
        })), new _api_image_provider__WEBPACK_IMPORTED_MODULE_5__["ApiImageProvider"](imageUrlTemplate));
        const fadeEffect = engine.visibilityManager.fadeEffectDuration;
        const opaquePolygonsProvider = this.opaquePolygonsProvider = new _render_primitives_primitive_set_storage__WEBPACK_IMPORTED_MODULE_30__["default"]();
        const transparentPolygonsProvider = this.transparentPolygonsProvider = new _render_primitives_primitive_set_storage__WEBPACK_IMPORTED_MODULE_30__["default"]();
        const texturedPolygonsProvider = this.texturedPolygonsProvider = new _render_primitives_primitive_set_storage__WEBPACK_IMPORTED_MODULE_30__["default"]();
        const polylinesProvider = this.polylinesProvider = new _render_primitives_primitive_set_storage__WEBPACK_IMPORTED_MODULE_30__["default"]();
        const texturedPolylinesProvider = this.texturedPolylinesProvider = new _render_primitives_primitive_set_storage__WEBPACK_IMPORTED_MODULE_30__["default"]();
        const iconsProvider = this.iconsProvider = new _render_primitives_disappearing_primitive_set_storage__WEBPACK_IMPORTED_MODULE_32__["default"]();
        const pointLabelsProvider = this.pointLabelsProvider = new _render_primitives_delayed_disappearing_primitive_set_storage__WEBPACK_IMPORTED_MODULE_33__["default"](fadeEffect);
        const curvedLabelsProvider = this.curvedLabelsProvider = new _render_primitives_delayed_disappearing_primitive_set_storage__WEBPACK_IMPORTED_MODULE_33__["default"](fadeEffect);
        const modelsProvider = this.modelsProvider = new _render_primitives_primitive_set_storage__WEBPACK_IMPORTED_MODULE_30__["default"]();
        this._destroyables.push(pointLabelsProvider, curvedLabelsProvider);
        this._tileDataManagers = [
            new TileDataManager(new _primitive_manager_polygon_manager__WEBPACK_IMPORTED_MODULE_31__["default"](opaquePolygonsProvider, transparentPolygonsProvider), _tile_data__WEBPACK_IMPORTED_MODULE_28__["POLYGON_EXTRACTOR"]),
            new TileDataManager(new _primitive_manager_renderable_primitive_manager__WEBPACK_IMPORTED_MODULE_29__["default"](texturedPolygonsProvider), _tile_data__WEBPACK_IMPORTED_MODULE_28__["TEXTURED_POLYGON_EXTRACTOR"]),
            new TileDataManager(new _primitive_manager_renderable_primitive_manager__WEBPACK_IMPORTED_MODULE_29__["default"](polylinesProvider), _tile_data__WEBPACK_IMPORTED_MODULE_28__["POLYLINE_EXTRACTOR"]),
            new TileDataManager(new _primitive_manager_renderable_primitive_manager__WEBPACK_IMPORTED_MODULE_29__["default"](texturedPolylinesProvider), _tile_data__WEBPACK_IMPORTED_MODULE_28__["TEXTURED_POLYLINE_EXTRACTOR"]),
            new TileDataManager(new _primitive_manager_zoom_filterable_primitive_manager__WEBPACK_IMPORTED_MODULE_34__["default"](iconsProvider, camera), _tile_data__WEBPACK_IMPORTED_MODULE_28__["POINT_EXTRACTOR"]),
            new TileDataManager(new _primitive_manager_zoom_filterable_primitive_manager__WEBPACK_IMPORTED_MODULE_34__["default"](pointLabelsProvider, camera), _tile_data__WEBPACK_IMPORTED_MODULE_28__["POINT_LABEL_EXTRACTOR"]),
            new TileDataManager(new _primitive_manager_zoom_filterable_primitive_manager__WEBPACK_IMPORTED_MODULE_34__["default"](curvedLabelsProvider, camera), _tile_data__WEBPACK_IMPORTED_MODULE_28__["CURVED_LABEL_EXTRACTOR"]),
            new TileDataManager(new _primitive_manager_renderable_primitive_manager__WEBPACK_IMPORTED_MODULE_29__["default"](modelsProvider), _tile_data__WEBPACK_IMPORTED_MODULE_28__["MODEL_EXTRACTOR"]),
            new TileDataManager(new _primitive_manager_external_mesh_manager__WEBPACK_IMPORTED_MODULE_35__["default"](modelsProvider, this._tileProvider, this.engine.memoryManager), _tile_data__WEBPACK_IMPORTED_MODULE_28__["EXTERNAL_MESH_EXTRACTOR"])
        ];
        this._requestedTilesState = new Map();
        this._taskQueue = new _util_task_queue__WEBPACK_IMPORTED_MODULE_39__["default"]();
        this._minorTaskQueue = new _util_idle_task_queue__WEBPACK_IMPORTED_MODULE_20__["default"]();
        this._tileProvider.on(_worker_tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_17__["TileProviderMessageType"].TILE_RESPONSE, (response) => this._onTileProviderResponse(response));
        this._tileProvider.on(_worker_tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_17__["TileProviderMessageType"].TILE_ERROR, (response) => this._onTileError(response.tile));
        this._onCameraUpdate();
    }
    destroy() {
        this._tileProvider.destroy();
        for (const destroyable of this._destroyables) {
            destroyable.destroy();
        }
        super.destroy();
    }
    setTileUrlTemplate(tileUrlTemplate) {
        this._tileProvider.sendMessage({
            type: _worker_tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_17__["TileProviderMessageType"].TILE_URL_UPDATE,
            tileUrlTemplate
        }, 1 /* IMMEDIATE */);
        this._refreshCurrentTiles();
    }
    _createTileRequest(tileItem, priority) {
        const targetZoom = this._getTargetZoom();
        return Object.assign({}, tileItem, { priority, isVisible: this._isTileVisible(tileItem), zoomMin: targetZoom, zoomMax: targetZoom });
    }
    _requestTiles(requests) {
        const requestId = Object(_util_unique_id__WEBPACK_IMPORTED_MODULE_22__["uniqueId"])();
        this._onTilesRequest(requests, requestId);
        for (const request of requests) {
            const requestedTileData = {
                isGeometryReady: false,
                areLabelsReady: false
            };
            this._requestedTilesState.set(Object(_tile_based_adapter_tile_id__WEBPACK_IMPORTED_MODULE_19__["getTileId"])(request), requestedTileData);
        }
        const request = {
            type: _worker_tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_17__["TileProviderMessageType"].TILE_REQUEST_BATCH,
            responseType: _worker_tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_17__["TileProviderMessageType"].TILE_RESPONSE,
            errorType: _worker_tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_17__["TileProviderMessageType"].TILE_ERROR,
            requestId,
            requests
        };
        this._tileProvider.sendMessage(request, 1 /* IMMEDIATE */);
    }
    _cancelTileRequests(requests) {
        for (const request of requests) {
            this._requestedTilesState.delete(Object(_tile_based_adapter_tile_id__WEBPACK_IMPORTED_MODULE_19__["getTileId"])(request.tile));
        }
        this._onCancelTileRequests(requests);
        this._tileProvider.sendMessage({
            type: _worker_tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_17__["TileProviderMessageType"].TILE_REQUEST_CANCEL_BATCH,
            requests
        });
    }
    _onTileDataUpdate(dataToShow, dataToHide) {
        for (const primitiveManager of this._tileDataManagers) {
            primitiveManager.updatePrimitives(dataToShow, dataToHide);
        }
    }
    _onTileDestroy(_tileItem, data) {
        // release primitives that we've created in allocators
        for (const portion of data) {
            (portion.polygons || []).forEach(releasePrimitive);
            (portion.texturedPolygons || []).forEach(releasePrimitive);
            (portion.polylines || []).forEach(releasePrimitive);
            (portion.texturedPolylines || []).forEach(releasePrimitive);
            (portion.points || []).forEach(releasePrimitive);
            (portion.pointLabels || []).forEach(releasePrimitive);
            (portion.curvedLabels || []).forEach(releasePrimitive);
            (portion.models || []).forEach(releasePrimitive);
        }
    }
    _sendStatisticsBeforeDestroy() {
        super._sendStatisticsBeforeDestroy();
        if (this._perfLogItems.length === 0) {
            return;
        }
        const items = this._perfLogItems;
        items.sort((a, b) => a.parseTime - b.parseTime);
        const min = items[0];
        const max = items[items.length - 1];
        const median = items[Math.floor(items.length / 2)];
        Object(_util_stat__WEBPACK_IMPORTED_MODULE_21__["countTileParseTime"])(this._layerName, min.tile, min.parseTime, max.tile, max.parseTime, median.tile, median.parseTime);
    }
    _onTileProviderResponse(response) {
        this._pushPerfLogItem(response.tile, response.parseTime);
        const tile = response.tile;
        const taskPriority = QUEUE_TASK_PRIORITIES.firstTilePortion +
            this._getTilePriority(tile, this._isTileVisible(tile));
        this._taskQueue.enqueue({
            priority: taskPriority,
            execute: () => {
                // atlas must be updated notwithstanding the tile is active or not
                // as these new glyphs will be used in next tiles
                const atlas = response.glyphAtlasToUpdate;
                if (atlas) {
                    this._glyphAtlas.updateContent(atlas.width, atlas.height, atlas.data, new Map(atlas.glyphLocations));
                }
                const registry = response.fontRegistryToUpdate;
                if (registry) {
                    for (const fontData of registry) {
                        let font;
                        if (this._fontRegistry.contains(fontData.id)) {
                            font = this._fontRegistry.get(fontData.id);
                        }
                        else {
                            font = new _font_df_font__WEBPACK_IMPORTED_MODULE_4__["default"](fontData.id, fontData.xheight, fontData.margin);
                            this._fontRegistry.add(font);
                        }
                        font.addAllGlyphs(fontData.glyphs);
                    }
                }
                const requestId = response.requestId;
                if (!this._isTileStillActive(tile, requestId)) {
                    return;
                }
                // If tile is being refreshed don't visualize any portions until all of them are loaded to avoid a blink
                const isRefreshing = this._isTileRefreshing(tile);
                const iconsSplitted = splitImageDependantPrimitives(response.points, this._imageManagerNearest, (point) => point.styles[0].imageId);
                const texturedPolylinesSplitted = splitImageDependantPrimitives(response.texturedPolylines, this._imageManagerLinear, (polyline) => polyline.styles[0].inline.pattern.imageId);
                const texturedPolygonsImages = getImagesIfAllAllocated(response.texturedPolygons, this._imageManagerNearest, (polygon) => polygon.styles[0].pattern.imageId);
                this._taskQueue.enqueue({
                    priority: QUEUE_TASK_PRIORITIES.secondTilePortion +
                        this._getTilePriority(tile, this._isTileVisible(tile)),
                    execute: () => {
                        if (this._isTileStillActive(tile, response.requestId)) {
                            this._putTileData(tile, {
                                polygons: this._allocatePolygons(response),
                                models: this._allocateMeshes(response),
                                externalMeshes: response.externalMeshes,
                                polylines: this._allocatePolylines(response),
                                pointLabels: this._allocatePointLabels(response),
                                curvedLabels: this._allocateCurvedLabels(response),
                                points: this._allocateIcons(tile, iconsSplitted.primitivesWithAllocatedImages, iconsSplitted.allocatedImages),
                                texturedPolylines: this._allocateTexturedPolylines(tile, texturedPolylinesSplitted.primitivesWithAllocatedImages, texturedPolylinesSplitted.allocatedImages),
                                texturedPolygons: !texturedPolygonsImages.allocatedImages ?
                                    [] :
                                    this._allocateTexturedPolygons(tile, response.texturedPolygons, texturedPolygonsImages.allocatedImages, response.texturedPolygonPages)
                            }, requestId, !isRefreshing);
                            iconsSplitted.allocatedImages.forEach(releasePrimitive);
                            texturedPolylinesSplitted.allocatedImages.forEach(releasePrimitive);
                            if (texturedPolygonsImages.allocatedImages) {
                                texturedPolygonsImages.allocatedImages.forEach(releasePrimitive);
                            }
                            const requestedTileData = this._requestedTilesState.get(Object(_tile_based_adapter_tile_id__WEBPACK_IMPORTED_MODULE_19__["getTileId"])(tile));
                            if (requestedTileData !== undefined) {
                                // TODO: the data is synced on these two properties
                                //       and this code doesn't make much sense for now,
                                //       but it is left "as is" since it is not clear
                                //       how it will be changed in nearest future
                                requestedTileData.isGeometryReady = true;
                                requestedTileData.areLabelsReady = true;
                                this._onTileDataReady(tile, response.url);
                            }
                        }
                    }
                });
                const putDataPromises = [];
                putDataPromises.push(iconsSplitted.missingImages.then((images) => {
                    this._onMissingIconImagesReady(response, iconsSplitted, images);
                }));
                putDataPromises.push(texturedPolylinesSplitted.missingImages.then((images) => {
                    this._onMissingPolylineImagesReady(response, texturedPolylinesSplitted, images);
                }));
                if (texturedPolygonsImages.missingImages) {
                    putDataPromises.push(texturedPolygonsImages.missingImages.then((images) => this._onMissingPolygonImagesReady(response, images)));
                }
                if (isRefreshing) {
                    // When all the portions are loaded, put empty data to visuazlize it
                    Promise.all(putDataPromises).then(() => this._putTileData(tile, {}, requestId, true));
                }
            }
        });
    }
    _onMissingIconImagesReady(response, iconsSplitted, images) {
        const tile = response.tile;
        this._minorTaskQueue.enqueue({
            priority: DEFAULT_IDLE_TASK_PRIORITY +
                this._getTilePriority(tile, this._isTileVisible(tile)),
            execute: () => {
                if (this._isTileStillActive(tile, response.requestId)) {
                    const points = this._allocateIcons(tile, iconsSplitted.primitivesWithMissingImages, images);
                    this._putTileData(tile, { points }, response.requestId, false);
                }
                images.forEach(releasePrimitive);
            }
        });
    }
    _onMissingPolylineImagesReady(response, texturedPolylinesSplitted, images) {
        const tile = response.tile;
        this._minorTaskQueue.enqueue({
            priority: DEFAULT_IDLE_TASK_PRIORITY + this._getTilePriority(tile, this._isTileVisible(tile)),
            execute: () => {
                if (this._isTileStillActive(tile, response.requestId)) {
                    const texturedPolylines = this._allocateTexturedPolylines(tile, texturedPolylinesSplitted.primitivesWithMissingImages, images);
                    this._putTileData(tile, { texturedPolylines }, response.requestId, false);
                }
                images.forEach(releasePrimitive);
            }
        });
    }
    _onMissingPolygonImagesReady(response, images) {
        const tile = response.tile;
        this._minorTaskQueue.enqueue({
            priority: DEFAULT_IDLE_TASK_PRIORITY +
                this._getTilePriority(tile, this._isTileVisible(tile)),
            execute: () => {
                if (this._isTileStillActive(tile, response.requestId)) {
                    const texturedPolygons = this._allocateTexturedPolygons(tile, response.texturedPolygons, images, response.texturedPolygonPages);
                    this._putTileData(tile, { texturedPolygons }, response.requestId, false);
                }
                images.forEach(releasePrimitive);
            }
        });
    }
    _onTileError(tile) {
        super._onTileError(tile);
        this._requestedTilesState.delete(Object(_tile_based_adapter_tile_id__WEBPACK_IMPORTED_MODULE_19__["getTileId"])(tile));
    }
    _isTileVisible(tile) {
        return this._currentTiles.has(Object(_tile_based_adapter_tile_id__WEBPACK_IMPORTED_MODULE_19__["getTileId"])(tile));
    }
    _allocatePolygons(response) {
        const polygonPrimitives = new Array(response.polygons.length + response.transparentPolygons.length);
        const memoryChunks = new MemoryChunks(response.polygonPages, this._memoryManager, _primitive_polygon_polygon_attribute_mapping__WEBPACK_IMPORTED_MODULE_10__["POLYGON_ATTRIBUTE_MAPPING"]);
        const transparentPolygonsMemoryChunks = new MemoryChunks(response.transparentPolygonPages, this._memoryManager, _primitive_polygon_transparent_polygon_attribute_mapping__WEBPACK_IMPORTED_MODULE_18__["TRANSPARENT_POLYGON_ATTRIBUTE_MAPPING"]);
        let index = 0;
        for (let i = 0; i < response.polygons.length; i++, index++) {
            const { bufferLocation } = response.polygons[i];
            polygonPrimitives[index] = new _primitive_polygon_renderable_polygon__WEBPACK_IMPORTED_MODULE_23__["default"](new _render_memory_sub_chunk__WEBPACK_IMPORTED_MODULE_2__["default"](memoryChunks[bufferLocation.bufferIndex], bufferLocation), true);
        }
        for (let i = 0; i < response.transparentPolygons.length; i++, index++) {
            const { bufferLocation } = response.transparentPolygons[i];
            polygonPrimitives[index] = new _primitive_polygon_renderable_polygon__WEBPACK_IMPORTED_MODULE_23__["default"](new _render_memory_sub_chunk__WEBPACK_IMPORTED_MODULE_2__["default"](transparentPolygonsMemoryChunks[bufferLocation.bufferIndex], bufferLocation), false);
        }
        memoryChunks.forEach((chunk) => chunk.release());
        transparentPolygonsMemoryChunks.forEach((chunk) => chunk.release());
        return polygonPrimitives;
    }
    _allocateTexturedPolygons(tile, polygonDescriptions, images, texturedPolygonPages) {
        const texturedPolygonRewriter = new _primitive_polygon_textured_polygon_buffer_rewiter__WEBPACK_IMPORTED_MODULE_9__["default"](texturedPolygonPages);
        const worldToPxFactor = WORLD_SIZE / (this._tileSideSizePx * Math.pow(2, tile.zoom));
        const locations = polygonDescriptions.map((parsedPolygon, index) => {
            const image = images[index];
            if (image) {
                const allocatedImage = image;
                const pattern = parsedPolygon.styles[0].pattern;
                const imageScale = pattern.width / allocatedImage.descriptor.width;
                texturedPolygonRewriter.rewriteUV(parsedPolygon.bufferLocation, allocatedImage.bbox, worldToPxFactor * imageScale);
                return parsedPolygon.bufferLocation;
            }
            else {
                return null;
            }
        });
        const memoryChunks = new MemoryChunks(texturedPolygonPages, this._memoryManager, _primitive_polygon_textured_polygon_attribute_mapping__WEBPACK_IMPORTED_MODULE_11__["TEXTURED_POLYGON_ATTRIBUTE_MAPPING"]);
        const texturedPolygonPrimitives = [];
        for (let i = 0; i < locations.length; i++) {
            const location = locations[i];
            const image = images[i];
            if (location && image) {
                const texturedPolygonPrimitive = new _primitive_polygon_renderable_textured_polygon__WEBPACK_IMPORTED_MODULE_24__["default"](new _render_memory_sub_chunk__WEBPACK_IMPORTED_MODULE_2__["default"](memoryChunks[location.bufferIndex], location), image);
                texturedPolygonPrimitives.push(texturedPolygonPrimitive);
            }
        }
        memoryChunks.forEach((chunk) => chunk.release());
        return texturedPolygonPrimitives;
    }
    _allocateMeshes(tileResponse) {
        const memoryChunks = tileResponse.meshPages.map((page) => this._memoryManager.allocate(page.vertexBuffer, page.indexBuffer, _primitive_model_model_buffer_writer__WEBPACK_IMPORTED_MODULE_6__["default"].ATTRIBUTE_MAPPING));
        const meshPrimitives = tileResponse.meshes.map((mesh) => new _primitive_model_renderable_model__WEBPACK_IMPORTED_MODULE_27__["default"](new _render_memory_sub_chunk__WEBPACK_IMPORTED_MODULE_2__["default"](memoryChunks[mesh.bufferLocation.bufferIndex], mesh.bufferLocation)));
        memoryChunks.forEach((chunk) => chunk.release());
        return meshPrimitives;
    }
    _allocatePolylines(response) {
        const polylinePrimitives = new Array(response.polylines.length);
        const memoryChunks = new MemoryChunks(response.polylinePages, this._memoryManager, _primitive_polyline_polyline_attribute_mapping__WEBPACK_IMPORTED_MODULE_15__["POLYLINE_ATTRIBUTE_MAPPING"]);
        let index = 0;
        for (let i = 0; i < response.polylines.length; i++, index++) {
            const { bufferLocation } = response.polylines[i];
            polylinePrimitives[index] = new _primitive_polyline_renderable_polyline__WEBPACK_IMPORTED_MODULE_25__["default"](new _render_memory_sub_chunk__WEBPACK_IMPORTED_MODULE_2__["default"](memoryChunks[bufferLocation.bufferIndex], bufferLocation));
        }
        memoryChunks.forEach((chunk) => chunk.release());
        return polylinePrimitives;
    }
    _allocateTexturedPolylines(tile, parsedPolylines, images) {
        const texturedPolylineWriter = new _primitive_polyline_textured_polyline_buffer_writer__WEBPACK_IMPORTED_MODULE_7__["default"]();
        const worldToPxFactor = WORLD_SIZE / (this._tileSideSizePx * Math.pow(2, tile.zoom));
        const locations = parsedPolylines.map((parsedPolyline, index) => {
            const image = images[index];
            if (image) {
                const style = parsedPolyline.styles[0];
                const width = (style.inline || style.outline).strokeWidth;
                const imageLocation = image.bbox;
                // image size may not match polyline's strokeWidth, so it must be scaled accordingly in
                // both directions, this factor can be passed to the writer in worldToPxFactor updated.
                const pixelRatio = width / (imageLocation.maxY - imageLocation.minY);
                return texturedPolylineWriter.writeTexturedPolyline(parsedPolyline, width, worldToPxFactor * pixelRatio, imageLocation, style.zIndex);
            }
            else {
                return null;
            }
        });
        const pages = texturedPolylineWriter.getBuffers();
        const memoryChunks = new MemoryChunks(pages, this._memoryManager, _primitive_polyline_textured_polyline_buffer_writer__WEBPACK_IMPORTED_MODULE_7__["default"].ATTRIBUTE_MAPPING);
        const texturedPolylinePrimitives = [];
        for (let i = 0; i < locations.length; i++) {
            const location = locations[i];
            const image = images[i];
            if (location && image) {
                const texturedPolylinePrimitive = new _primitive_polyline_renderable_textured_polyline__WEBPACK_IMPORTED_MODULE_26__["default"](new _render_memory_sub_chunk__WEBPACK_IMPORTED_MODULE_2__["default"](memoryChunks[location.bufferIndex], location), image);
                texturedPolylinePrimitives.push(texturedPolylinePrimitive);
            }
        }
        memoryChunks.forEach((chunk) => chunk.release());
        return texturedPolylinePrimitives;
    }
    _allocatePointLabels(response) {
        const memoryChunks = new MemoryChunks(response.pointLabelPages, this._memoryManager, _primitive_label_point_label_attribute_mapping__WEBPACK_IMPORTED_MODULE_13__["POINT_LABEL_ATTRIBUTE_MAPPING"]);
        const backgroundMemoryChunks = new MemoryChunks(response.pointLabelBackgroundPages, this._memoryManager, _primitive_billboard_rectangle_attribute_mapping__WEBPACK_IMPORTED_MODULE_12__["BILLBOARD_RECTANGLE_ATTRIBUTE_MAPPING"]);
        const pointLabels = response.pointLabels.map(({ bufferLocation, backgroundBufferLocation }) => {
            const backgroundPrimitive = backgroundBufferLocation ?
                new _primitive_billboard_rectangle_renderable_billboard_rectangle__WEBPACK_IMPORTED_MODULE_36__["default"](new _render_memory_sub_chunk__WEBPACK_IMPORTED_MODULE_2__["default"](backgroundMemoryChunks[backgroundBufferLocation.bufferIndex], backgroundBufferLocation)) :
                undefined;
            const labelPrimitive = new _primitive_zoom_restricted_label__WEBPACK_IMPORTED_MODULE_37__["ZoomRestrictedLabel"](new _render_memory_sub_chunk__WEBPACK_IMPORTED_MODULE_2__["default"](memoryChunks[bufferLocation.bufferIndex], bufferLocation), this._glyphAtlas, this._computeMinZoom(response.tile, MINZOOM_DELTAS.pointLabels), backgroundPrimitive);
            if (backgroundPrimitive) {
                backgroundPrimitive.release();
            }
            return labelPrimitive;
        });
        backgroundMemoryChunks.forEach((chunk) => chunk.release());
        memoryChunks.forEach((chunk) => chunk.release());
        return pointLabels;
    }
    _allocateCurvedLabels(response) {
        const memoryChunks = new MemoryChunks(response.curvedLabelPages, this._memoryManager, _primitive_label_curved_label_attribute_mapping__WEBPACK_IMPORTED_MODULE_14__["CURVED_LABEL_ATTRIBUTE_MAPPING"]);
        const curvedLabelPrimitives = response.curvedLabels.map(({ bufferLocation }) => new _primitive_zoom_restricted_label__WEBPACK_IMPORTED_MODULE_37__["ZoomRestrictedLabel"](new _render_memory_sub_chunk__WEBPACK_IMPORTED_MODULE_2__["default"](memoryChunks[bufferLocation.bufferIndex], bufferLocation), this._glyphAtlas, this._computeMinZoom(response.tile, MINZOOM_DELTAS.curvedLabels)));
        memoryChunks.forEach((chunk) => chunk.release());
        return curvedLabelPrimitives;
    }
    _allocateIcons(tile, parsedIcons, images) {
        const iconWriter = new _primitive_icon_icon_buffer_writer__WEBPACK_IMPORTED_MODULE_1__["default"]();
        const locations = parsedIcons.map((parsedIcon, index) => {
            const image = images[index];
            if (image) {
                const style = parsedIcon.styles[0];
                const size = image.descriptor;
                const pixelRatio = style.width / size.width;
                return iconWriter.writeIcon(parsedIcon, image.bbox, size, style.offset, pixelRatio);
            }
            else {
                return null;
            }
        });
        const pages = iconWriter.getBuffers();
        const memoryChunks = new MemoryChunks(pages, this._memoryManager, _primitive_icon_icon_buffer_writer__WEBPACK_IMPORTED_MODULE_1__["default"].ATTRIBUTE_MAPPING);
        const iconPrimitives = [];
        for (let i = 0; i < locations.length; i++) {
            const location = locations[i];
            const image = images[i];
            if (location && image) {
                const iconPrimitive = new _primitive_zoom_restricted_icon__WEBPACK_IMPORTED_MODULE_38__["ZoomRestrictedIcon"](new _render_memory_sub_chunk__WEBPACK_IMPORTED_MODULE_2__["default"](memoryChunks[location.bufferIndex], location), image, this._computeMinZoom(tile, MINZOOM_DELTAS.icons));
                iconPrimitives.push(iconPrimitive);
            }
        }
        memoryChunks.forEach((chunk) => chunk.release());
        return iconPrimitives;
    }
    /**
     * Computes a minimum zoom an object should be still displayed on.
     *
     * @param tile Tile the object belongs to.
     * @param delta Tolerance of the visibility to zooming out, default value was empirically chosen.
     * @returns Minimum zoom for the object.
     */
    _computeMinZoom(tile, delta = 1) {
        return tile.zoom - this._zoomShift - this._targetZoomShift - delta;
    }
    _pushPerfLogItem(tile, parseTime) {
        if (this._perfLogItems.length < MAX_PERF_LOG_ITEMS_COUNT) {
            this._perfLogItems.push({ tile, parseTime });
        }
    }
}
/**
 * Helper class for allocation of an array of memory chunks.
 */
class MemoryChunks extends Array {
    constructor(pages, memoryManager, attribMapping) {
        super(pages.length);
        for (let i = 0; i < pages.length; i++) {
            this[i] = memoryManager.allocate(pages[i].vertexBuffer, pages[i].indexBuffer, attribMapping);
        }
    }
}
/**
 * Data managers responsible for specific type of primitives. It just extracts them from TileData and
 * updates appropriate primitive provider.
 */
class TileDataManager {
    constructor(primitiveManager, primitveExtractor) {
        this._primitiveManager = primitiveManager;
        this._primitiveExtractor = primitveExtractor;
    }
    updatePrimitives(toShow, toHide) {
        this._primitiveManager.updateScene(this._primitiveExtractor(toShow), this._primitiveExtractor(toHide));
    }
}
function releasePrimitive(primitive) {
    if (primitive) {
        primitive.release();
    }
}
/**
 * Turns rejection of original promise into null-value resolution. Nulls on appropriate places
 * are required in allocation of textured primitives.
 */
function nullifyRejection(promise) {
    return new Promise((resolve) => promise.then(resolve, () => resolve(null)));
}
/**
 * Splits primitives into two lists: those that have required images allocated and those which images are to be
 * requested. Required images returned in corresponing arrays (requested images as promises).
 */
function splitImageDependantPrimitives(primitives, imageManager, idMapper) {
    const primitivesWithAllocatedImages = [];
    const allocatedImages = [];
    const primitivesWithMissingImages = [];
    const missingImageIds = [];
    for (const primitive of primitives) {
        const id = idMapper(primitive);
        const allocatedImage = imageManager.getImage(id);
        if (allocatedImage) {
            primitivesWithAllocatedImages.push(primitive);
            allocatedImages.push(allocatedImage);
        }
        else {
            primitivesWithMissingImages.push(primitive);
            missingImageIds.push(nullifyRejection(imageManager.requestImage(id)));
        }
    }
    return {
        primitivesWithAllocatedImages,
        allocatedImages,
        primitivesWithMissingImages,
        missingImages: Promise.all(missingImageIds)
    };
}
/**
 * Returns either array of allocated images (if all required images are on the spot) or promises for them (if at least
 * one required image is not yet allocated).
 */
function getImagesIfAllAllocated(primitives, imageManager, idMapper) {
    let isAnyMissing = false;
    const allocatedImages = new Array(primitives.length);
    const missingImages = new Array(primitives.length);
    for (let i = 0; i < primitives.length; i++) {
        const primitive = primitives[i];
        const id = idMapper(primitive);
        const allocatedImage = imageManager.getImage(id);
        if (allocatedImage) {
            allocatedImages[i] = allocatedImage;
        }
        else {
            isAnyMissing = true;
            missingImages[i] = nullifyRejection(imageManager.requestImage(id));
        }
    }
    if (isAnyMissing) {
        for (let i = 0; i < primitives.length; i++) {
            if (allocatedImages[i]) {
                missingImages[i] = Promise.resolve(allocatedImages[i]);
            }
        }
        return { missingImages: Promise.all(missingImages) };
    }
    else {
        return { allocatedImages };
    }
}


/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TileBasedAdapter; });
/* harmony import */ var _adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(26);
/* harmony import */ var _util_tile_system__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(28);
/* harmony import */ var _util_iterable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/* harmony import */ var _tile_id__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(29);
/* harmony import */ var _util_event_emitter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(14);
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(23);
/* harmony import */ var _util_worker__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(30);
/* harmony import */ var _util_visible_tile__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(32);
/* harmony import */ var _belt_tiles__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(33);
/* harmony import */ var _util_stat__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(34);










const NO_TILES_TO_HANDLE = [];
const MAX_PERF_LOG_ITEMS_COUNT = 1024;
// To select which tile to load camera zoom is rounded so the shift is 0.5.
const TARGET_ZOOM_SHIFT = 0.25;
const VISIBLE_TILE_PRIORITY = 200;
function* flattenVisibleDataPortions(tiles) {
    for (const tile of tiles) {
        yield* tile.data.visible;
    }
}
function getZoomShift(tileSize) {
    switch (tileSize) {
        case 1 /* X4 */:
            return -1;
        case 2 /* X16 */:
            return -2;
        default:
            return 0;
    }
}
/**
 * Base class for adapters that get their data in tiles. Content of tiles that come into field of view should
 * be requested, as well as content of invisible tiles should be removed, also tiles on different zoom levels can
 * overlap each other. Managing of all these cases and other tile-specific logic is the responsibility of this class.
 */
class TileBasedAdapter extends _adapter__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(engine, camera, tileSize = 0 /* X1 */, preloadedTilesBeltSize = 0, layerName = '') {
        super(engine, camera);
        this._layerName = layerName;
        this._zoomShift = getZoomShift(tileSize);
        this._targetZoomShift = TARGET_ZOOM_SHIFT;
        this._engineRenderListener = () => this._onEngineRenderEvent();
        this.engine.renderer.onRender.addListener(this._engineRenderListener);
        this._currentTiles = new Map();
        this._allTiles = new Map();
        this._readyForRenderTiles = [];
        this.onTileReady = new _util_event_emitter__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        this.onTileLoadChange = new _util_event_emitter__WEBPACK_IMPORTED_MODULE_4__["EventEmitter"]();
        this._requestedTiles = new Map();
        this._tilesToRefresh = new Set();
        this._beltSize = preloadedTilesBeltSize;
        // Sometimes the adapter isn't destroyed, just the page closes. Listen
        // for that and send measurements to the statface.
        window.addEventListener('beforeunload', this._onBeforeUnloadListener = this._sendStatisticsBeforeDestroy.bind(this));
        this._tileLoadLogs = [];
    }
    destroy() {
        window.removeEventListener('beforeunload', this._onBeforeUnloadListener);
        this._sendStatisticsBeforeDestroy();
        this.engine.renderer.onRender.removeListener(this._engineRenderListener);
        super.destroy();
    }
    getVisibleTilesNumber() {
        return this._currentTiles.size;
    }
    getPendingTilesNumber() {
        let pendingCounter = 0;
        this._requestedTiles.forEach((requestedTile) => {
            if (this._currentTiles.get(Object(_tile_id__WEBPACK_IMPORTED_MODULE_3__["getTileId"])(requestedTile.tileItem))) {
                pendingCounter++;
            }
        });
        return pendingCounter;
    }
    _getTargetZoom() {
        return Math.floor(this.camera.zoom + this._targetZoomShift);
    }
    /**
     * @param tileItem The tile to which the data belongs.
     * @param data Data portion to be shown in tile once it is ready to visualize.
     * @param requestId ID of the request data was requested with. Based on this the data is being displayed, stored for
     * future use or discarded.
     * @param visualize Is this data portion enough to render this tile and replace overlapped ones if any.
     */
    _putTileData(tileItem, data, requestId = _util_worker__WEBPACK_IMPORTED_MODULE_6__["NO_ID"], visualize = true) {
        const tile = this._allTiles.get(Object(_tile_id__WEBPACK_IMPORTED_MODULE_3__["getTileId"])(tileItem));
        if (!tile) {
            // Data recieved late and probably the tile had been destroyed.
            // Destroy data too.
            this._onTileDestroy(tileItem, [data]);
            return;
        }
        // NO_ID passed here means concrete adapter doesn't care to label tile data with a requestId which most likely
        // means adapter keeps its data as a whole, not splitting it into portions and, therefore, doesn't need its data
        // to be maintained separately as visible/actual. In this case the data is always treated like an actual data.
        if (requestId === tile.data.visibleRequestId && requestId !== _util_worker__WEBPACK_IMPORTED_MODULE_6__["NO_ID"]) {
            tile.data.visible.push(data);
            if (tile.isVisible) {
                // The data is currently displayed so the new portion is added to the scene.
                this._updateTileDataPortions([data], []);
            }
        }
        else if (requestId === tile.data.actualRequestId) {
            // The data is actual and either is just being put into the tile or visualizes all `actual` tile data.
            this._putActualTileData(tile, data, visualize);
        }
        else {
            // The data is neither visible nor actual. Destroy data.
            this._onTileDestroy(tileItem, [data]);
        }
    }
    _onCameraUpdate() {
        const camera = this.camera;
        const zoom = this._getTargetZoom();
        const newCurrent = new Set(Object(_util_visible_tile__WEBPACK_IMPORTED_MODULE_7__["computeVisibleTiles"])(camera.getVisibleRegion(), camera.getVisibleRegionBBox(), camera.options.wrapModeX, camera.options.wrapModeY, Math.max(0, zoom + this._zoomShift)));
        // this._currentTiles contains currently visible tiles, newCurrent contains set of tiles visible from updated
        // camera position, compare these two sets and call this._onVisibleTilesChanged() if there is a difference.
        if (newCurrent.size !== this._currentTiles.size ||
            Object(_util_iterable__WEBPACK_IMPORTED_MODULE_2__["oneOfIterable"])(newCurrent, (tile) => !this._currentTiles.has(Object(_tile_id__WEBPACK_IMPORTED_MODULE_3__["getTileId"])(tile)))) {
            this._onVisibleTilesChanged(newCurrent);
        }
        // this checks prevents leaks of tiles when quick zoom-in/zoom-out happens
        for (const tile of this._currentTiles.values()) {
            if (tile.isReadyToVisualize) {
                this._checkTileReplacements(tile);
            }
        }
    }
    _onTilesRequest(requests, requestId = _util_worker__WEBPACK_IMPORTED_MODULE_6__["NO_ID"]) {
        for (const tileRequest of requests) {
            const requestedTileData = {
                info: {
                    priority: tileRequest.priority
                },
                loadTimestamps: {
                    queued: performance.now(),
                    loaded: 0,
                    rendered: 0,
                    ready: 0
                },
                tileItem: tileRequest
            };
            const tileId = Object(_tile_id__WEBPACK_IMPORTED_MODULE_3__["getTileId"])(tileRequest);
            this._requestedTiles.set(tileId, requestedTileData);
            this._readyTilesChange = true;
            const tile = this._allTiles.get(tileId);
            if (tile) {
                tile.data.actualRequestId = requestId;
            }
        }
    }
    _onCancelTileRequests(requests) {
        for (const request of requests) {
            const tileId = Object(_tile_id__WEBPACK_IMPORTED_MODULE_3__["getTileId"])(request.tile);
            if (this._requestedTiles.delete(tileId)) {
                this._readyTilesChange = true;
                this._tilesToRefresh.delete(tileId);
            }
        }
    }
    _onTileError(tileItem) {
        const tileId = Object(_tile_id__WEBPACK_IMPORTED_MODULE_3__["getTileId"])(tileItem);
        if (this._requestedTiles.delete(tileId)) {
            this._readyTilesChange = true;
            this._tilesToRefresh.delete(tileId);
        }
    }
    /**
     * This method is where the whole magic happens, it manages replacement of current set of visible/preloaded tiles
     * with a new one.
     */
    _onVisibleTilesChanged(visibleTiles) {
        this._currentTiles.clear();
        const tilesToRequest = [];
        for (const tileItem of visibleTiles) {
            let tile = this._allTiles.get(Object(_tile_id__WEBPACK_IMPORTED_MODULE_3__["getTileId"])(tileItem));
            if (!tile) {
                tile = new Tile(tileItem);
                this._allTiles.set(tile.id, tile);
                this._currentTiles.set(tile.id, tile);
                tilesToRequest.push(this._createTileRequest(tileItem, this._getTilePriority(tile.tileItem, true)));
            }
            else {
                this._currentTiles.set(tile.id, tile);
            }
        }
        if (tilesToRequest.length > 0) {
            this._requestTiles(tilesToRequest);
        }
        const beltTiles = new Map();
        for (const beltTileItem of Object(_belt_tiles__WEBPACK_IMPORTED_MODULE_8__["calculateBeltTiles"])(visibleTiles, this._beltSize, this.camera.options.wrapModeX === 2 /* REPEAT */, this.camera.options.wrapModeY === 2 /* REPEAT */)) {
            beltTiles.set(Object(_tile_id__WEBPACK_IMPORTED_MODULE_3__["getTileId"])(beltTileItem), beltTileItem);
        }
        const beltTilesToRequest = [];
        for (const beltTileItem of beltTiles.values()) {
            const tileId = Object(_tile_id__WEBPACK_IMPORTED_MODULE_3__["getTileId"])(beltTileItem);
            let tile = this._allTiles.get(tileId);
            if (!tile) {
                tile = new Tile(beltTileItem);
                this._allTiles.set(tileId, tile);
                beltTilesToRequest.push(this._createTileRequest(beltTileItem, this._getTilePriority(beltTileItem, false)));
            }
        }
        if (beltTilesToRequest.length) {
            this._requestTiles(beltTilesToRequest);
        }
        // broke current relationships to set them up again but with new set of visible tiles
        for (const tile of this._allTiles.values()) {
            tile.toBeReplacedBy.clear();
            tile.replacementFor.clear();
        }
        // TODO: optimize this n^2 relationships resolver
        for (const currentTile of this._currentTiles.values()) {
            for (const tile of this._allTiles.values()) {
                if (tile.isReadyToVisualize &&
                    (Object(_util_tile_system__WEBPACK_IMPORTED_MODULE_1__["isParent"])(tile.tileItem, currentTile.tileItem) || Object(_util_tile_system__WEBPACK_IMPORTED_MODULE_1__["isParent"])(currentTile.tileItem, tile.tileItem))) {
                    tile.toBeReplacedBy.add(currentTile);
                    currentTile.replacementFor.add(tile);
                }
            }
        }
        // remove invisible
        const tilesToCancel = [];
        for (const tile of this._allTiles.values()) {
            if (!this._currentTiles.has(tile.id) && tile.toBeReplacedBy.size === 0) {
                if (tile.isVisible) {
                    this._updateTileData(NO_TILES_TO_HANDLE, [tile]);
                }
                if (!beltTiles.get(tile.id)) {
                    this._destroyTile(tile);
                    tilesToCancel.push(tile);
                }
            }
        }
        if (tilesToCancel.length) {
            // issue cancellation also in case there are non processed data enqueued to try to save some efforts
            this._cancelTileRequests(tilesToCancelations(tilesToCancel));
        }
    }
    _refreshCurrentTiles() {
        const tilesToRequest = [];
        for (const tile of this._currentTiles.values()) {
            const tileItem = tile.tileItem;
            const tileRequest = this._createTileRequest(tileItem, this._getTilePriority(tile.tileItem, true));
            tilesToRequest.push(tileRequest);
            this._tilesToRefresh.add(Object(_tile_id__WEBPACK_IMPORTED_MODULE_3__["getTileId"])(tile.tileItem));
        }
        this._cancelTileRequests(tilesToCancelations(this._currentTiles.values()));
        this._requestTiles(tilesToRequest);
    }
    _onTileDataReady(tileItem, url) {
        const tileId = Object(_tile_id__WEBPACK_IMPORTED_MODULE_3__["getTileId"])(tileItem);
        const tileData = this._requestedTiles.get(tileId);
        this._requestedTiles.delete(tileId);
        this._tilesToRefresh.delete(tileId);
        tileData.info.url = url;
        tileData.loadTimestamps.loaded = performance.now();
        if (this._tileLoadLogs.length < MAX_PERF_LOG_ITEMS_COUNT) {
            this._tileLoadLogs.push({
                tileItem,
                processingTime: tileData.loadTimestamps.loaded - tileData.loadTimestamps.queued
            });
        }
        this._readyForRenderTiles.push(tileData);
        if (this._currentTiles.get(tileId)) {
            this._readyTilesChange = true;
        }
    }
    _isTileStillActive(tileItem, requestId = _util_worker__WEBPACK_IMPORTED_MODULE_6__["NO_ID"]) {
        const tile = this._allTiles.get(Object(_tile_id__WEBPACK_IMPORTED_MODULE_3__["getTileId"])(tileItem));
        if (!tile) {
            return false;
        }
        const isRequestActive = tile.data.actualRequestId === requestId || tile.data.visibleRequestId === requestId;
        return isRequestActive;
    }
    _isTileRefreshing(tile) {
        return this._tilesToRefresh.has(Object(_tile_id__WEBPACK_IMPORTED_MODULE_3__["getTileId"])(tile));
    }
    _getTilePriority(tile, isVisible) {
        const center = this._createTileCoordinateSystem().toTileCoordinates(this.camera.center);
        const zoomDiff = Math.ceil(this.camera.zoom) - tile.zoom;
        const distance = _math_vector2__WEBPACK_IMPORTED_MODULE_5__["distance"](tile, {
            x: Math.floor(center.x / Math.pow(2, zoomDiff)),
            y: Math.floor(center.y / Math.pow(2, zoomDiff))
        });
        return (isVisible ? VISIBLE_TILE_PRIORITY : 0) + 1 / (distance + 1);
    }
    _sendStatisticsBeforeDestroy() {
        if (this._tileLoadLogs.length === 0) {
            return;
        }
        const accumulatedTimings = new Map();
        accumulatedTimings.set('average', {
            sum: 0,
            number: 0
        });
        this._tileLoadLogs.forEach((logItem) => {
            accumulatedTimings.get('average').sum += logItem.processingTime;
            accumulatedTimings.get('average').number++;
            const zoom = logItem.tileItem.zoom.toString();
            if (!accumulatedTimings.has(zoom)) {
                accumulatedTimings.set(zoom, {
                    sum: 0,
                    number: 0
                });
            }
            accumulatedTimings.get(zoom).sum += logItem.processingTime;
            accumulatedTimings.get(zoom).number++;
        });
        const result = [];
        for (const item of accumulatedTimings) {
            result.push({
                zoom: item[0],
                time: (item[1].sum / item[1].number)
            });
        }
        Object(_util_stat__WEBPACK_IMPORTED_MODULE_9__["countTileProcessingTime"])(this._layerName, result);
    }
    /**
     * Puts actual data into the tile and optionally visualizes it.
     *
     * @param tile Tile to put data into.
     * @param data Data to be stored in the tile until visualization.
     * @param visualize If `true` replaces `visible` tile data with `actual` tile data and updates the scene.
     */
    _putActualTileData(tile, data, visualize) {
        tile.data.actual.push(data);
        if (visualize) {
            this._visualizeTile(tile);
        }
    }
    /**
     * Visualizes tile `actual` data: replaces tile `visible` data with tile `actual` data, adds it to the scene,
     * removes old visible data from the scene and destroys it, checks tile replacements and updates `visibleRequestId`.
     * @param tile Tile to visualize.
     */
    _visualizeTile(tile) {
        const toDestroy = tile.data.visible;
        tile.data.visible = tile.data.actual;
        tile.data.actual = [];
        tile.data.visibleRequestId = tile.data.actualRequestId;
        if (!tile.isReadyToVisualize) {
            tile.isReadyToVisualize = true;
            this._checkTileReplacements(tile);
        }
        else if (tile.isVisible) {
            this._updateTileDataPortions(tile.data.visible, []);
        }
        if (toDestroy.length > 0) {
            this._updateTileDataPortions([], toDestroy);
            this._onTileDestroy(tile.tileItem, toDestroy);
        }
    }
    _createTileCoordinateSystem() {
        return new _util_tile_system__WEBPACK_IMPORTED_MODULE_1__["default"](this.camera.zoom);
    }
    // We need do detect when tile is rendered to collect perfomance metrics.
    // We expect that tile will be rendered with first render event after
    // tile data is added to scene.
    _onEngineRenderEvent() {
        if (this._readyForRenderTiles.length) {
            this._readyForRenderTiles.forEach((tileData) => {
                if (this._currentTiles.has(Object(_tile_id__WEBPACK_IMPORTED_MODULE_3__["getTileId"])(tileData.tileItem))) {
                    tileData.loadTimestamps.rendered = performance.now();
                    tileData.loadTimestamps.ready = performance.now();
                    this.onTileReady.fire(tileData);
                }
            });
            this._readyForRenderTiles.length = 0;
        }
        if (this._readyTilesChange) {
            this.onTileLoadChange.fire({
                totalTileNumber: this.getVisibleTilesNumber(),
                readyTileNumber: this.getVisibleTilesNumber() - this.getPendingTilesNumber()
            });
            this._readyTilesChange = false;
        }
    }
    /**
     * Shows/hides tiles if they are not shown/hidden yet. It notifies subclasses by calling appropriate
     * abstract method. Even though visible/invisible tiles are not supposed to be shown/hidden again,
     * there are cases where it simplifies tile visualization logic.
     * It is important to have exactly "update", not "add"/"remove" separately, as some business logic may rely on it,
     * e.g. morphing visible data or managing shared resources.
     */
    _updateTileData(toShow, toRemove) {
        const dataToShow = Array.from(flattenVisibleDataPortions(toShow));
        const dataToRemove = Array.from(flattenVisibleDataPortions(toRemove));
        this._updateTileDataPortions(dataToShow, dataToRemove);
        for (const tile of toShow) {
            tile.isVisible = true;
        }
        for (const tile of toRemove) {
            tile.isVisible = false;
        }
    }
    _updateTileDataPortions(toShow, toRemove) {
        this._onTileDataUpdate(toShow, toRemove);
    }
    /**
     * Removes tile if is not removed with calling all appropriate callbacks (abstract methods)
     * to notify descendant classes. Even though removed tile is not supposed to be removed again,
     * allowing this makes much simpler tile management, especially in tile replacements logic where multiple
     * tiles can have links to the same tile (that is to be removed).
     */
    _destroyTile(tile) {
        if (!tile.isRemoved) {
            tile.isRemoved = true;
            this._allTiles.delete(tile.id);
            this._currentTiles.delete(tile.id);
            this._onTileDestroy(tile.tileItem, [...tile.data.actual, ...tile.data.visible]);
        }
    }
    /**
     * Checks tiles that could be replaced by this one, should be called when tile becomes ready to visualize.
     * As overlapping relationships can happen in both directions (children by parents / parent by children) this
     * method goes one step deeper, i.e. it check not only tiles that should be replaced (to remove them),
     * but also all tiles that cover the replaced ones (to show them).
     */
    _checkTileReplacements(tile) {
        const toDestroy = new Set();
        const toShow = new Set();
        const toHide = new Set();
        for (const tileToReplace of tile.replacementFor) {
            if (Object(_util_iterable__WEBPACK_IMPORTED_MODULE_2__["allOfIterable"])(tileToReplace.toBeReplacedBy, (tile) => tile.isReadyToVisualize)) {
                if (tileToReplace.isVisible) {
                    toHide.add(tileToReplace);
                }
                if (!tileToReplace.isRemoved) {
                    toDestroy.add(tileToReplace);
                }
                for (const tileToShow of tileToReplace.toBeReplacedBy) {
                    if (!tileToShow.isVisible) {
                        toShow.add(tileToShow);
                    }
                }
            }
        }
        if (tile.replacementFor.size === 0 && !tile.isVisible) {
            toShow.add(tile);
        }
        if (toShow.size > 0 || toHide.size > 0) {
            this._updateTileData(toShow, toHide);
        }
        for (const tileToDestroy of toDestroy) {
            this._destroyTile(tileToDestroy);
        }
        if (toDestroy.size > 0) {
            this._cancelTileRequests(tilesToCancelations(toDestroy));
        }
    }
}
/**
 * This class is the main unit of the whole process of tile management. It stores visualizable data and links to
 * dependant tiles (for parent/child overlapping cases).
 */
class Tile {
    constructor(tileItem) {
        this.data = {
            actual: [],
            visible: [],
            actualRequestId: _util_worker__WEBPACK_IMPORTED_MODULE_6__["NO_ID"],
            visibleRequestId: _util_worker__WEBPACK_IMPORTED_MODULE_6__["NO_ID"]
        };
        this.tileItem = tileItem;
        this.id = `${tileItem.x}:${tileItem.y}:${tileItem.zoom}`;
        this.isReadyToVisualize = false;
        this.isVisible = false;
        this.isRemoved = false;
        this.toBeReplacedBy = new Set();
        this.replacementFor = new Set();
    }
}
function tilesToCancelations(tiles) {
    return Array.from(tiles, (tile) => ({
        tile: tile.tileItem,
        requestId: tile.data.actualRequestId
    }));
}


/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Adapter; });
/* harmony import */ var _util_function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(27);

class Adapter {
    constructor(engine, camera, cameraUpdateDelay = 5) {
        this.engine = engine;
        this.camera = camera;
        this._cameraUpdateListener = Object(_util_function__WEBPACK_IMPORTED_MODULE_0__["debounce"])(this._onCameraUpdate.bind(this), cameraUpdateDelay);
        camera.onUpdate.addListener(this._cameraUpdateListener);
    }
    destroy() {
        this.camera.onUpdate.removeListener(this._cameraUpdateListener);
    }
    /**
     * Camera update handler, by default do nothing.
     */
    _onCameraUpdate() { }
}


/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "debounce", function() { return debounce; });
/**
 * Creates new function which execution is "debounced".
 */
function debounce(func, wait) {
    let timeout = 0;
    return (...args) => {
        const later = () => {
            timeout = 0;
            func(...args);
        };
        if (timeout) {
            clearTimeout(timeout);
        }
        timeout = setTimeout(later, wait);
    };
}


/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isParent", function() { return isParent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TileCoordinateSystem; });
/* harmony import */ var _math_scalar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16);

/**
 * @return `true` if the first param overlaps the second in tile hierarchy.
 */
function isParent(potentialParent, possibleChild) {
    const zoomDiff = possibleChild.zoom - potentialParent.zoom;
    return zoomDiff > 0 &&
        possibleChild.x >> zoomDiff === potentialParent.x &&
        possibleChild.y >> zoomDiff === potentialParent.y;
}
class TileCoordinateSystem {
    constructor(zoom) {
        this._zoom = Math.ceil(Object(_math_scalar__WEBPACK_IMPORTED_MODULE_0__["clamp"])(zoom, 0, 31));
        this._tileSize = 2 / (1 << this._zoom);
    }
    getZoom() {
        return this._zoom;
    }
    /**
     * @return Tile side length in units of the world coordinate system.
     */
    getTileSize() {
        return this._tileSize;
    }
    /**
     * @return Top left corner coordinates of the tile.
     */
    getTileOffset(tile) {
        return {
            x: this.getTileSize() * tile.x - 1,
            y: 1 - this.getTileSize() * tile.y
        };
    }
    toTileCoordinates(worldCoordinates) {
        return {
            x: (worldCoordinates.x + 1) / this._tileSize,
            y: (1 - worldCoordinates.y) / this._tileSize
        };
    }
}


/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTileIdByRawValues", function() { return getTileIdByRawValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTileId", function() { return getTileId; });
function getTileIdByRawValues(x, y, zoom) {
    return `${x}:${y}:${zoom}`;
}
function getTileId(tile) {
    return getTileIdByRawValues(tile.x, tile.y, tile.zoom);
}


/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NO_ID", function() { return NO_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "messageIs", function() { return messageIs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebWorkerCommunicator", function() { return WebWorkerCommunicator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebWorkerClient", function() { return WebWorkerClient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebWorkerImplementation", function() { return WebWorkerImplementation; });
/* harmony import */ var _event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14);
/* harmony import */ var _unique_id__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(31);
/**
 * Base interface for webworker messages, both incoming and outgoing ones.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Transferable
 */


const MESSAGE_BATCH_MAX_SIZE = 50;
const FLUSH_TIMEOUT = 50;
// each subsequent message debounces postMessage call, that can lead to infinite delay, this const limits it
const MAX_FLUSH_TIMEOUT = 250;
const NO_ID = -1;
/**
 * Checks message type with type guarding. It gives a little bit more elegant alternative
 * to tagged type unions providing the same type safety.
 *
 * @param message to be checked
 * @param type the value of the "type" property
 * @return {boolean}
 */
function messageIs(message, type) {
    return message.type === type;
}
/**
 * Base class for both sides of a webworker: its implementation (separate js that is run in a worker thread) and
 * a controller for the main thread. They have similar mechanism of sending/receiving messages that is implement here.
 */
class WebWorkerCommunicator {
    constructor(addressee) {
        this._addressee = addressee;
        this._events = new _event_emitter__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this._listeners = new Map();
        this._transferableExtractors = new Map();
        this._messages = [];
        this._transferables = [];
        this._timeoutHandle = 0;
        this._flushMessagesBinded = this._flushMessages.bind(this);
    }
    setTransferableExtractor(type, extractor) {
        this._transferableExtractors.set(type, extractor);
    }
    /**
     * Send a message to the opposite side of the web worker communication channel.
     * Messages are batched by delaying postMessage call to group messages that come during this delay and minimize
     * the number of interprocess communications that badly affect performance.
     *
     * @param message Message to be sent.
     * @param urgency IMMEDIATE forces message to be sent immediately (synchronous call) with no batching delay,
     *                DEFAULT debounces sending for another FLUSH_TIMEOUT.
     */
    sendMessage(message, urgency = 0 /* DEFAULT */) {
        const transferableExtractor = this._transferableExtractors.get(message.type);
        const transferables = transferableExtractor ? transferableExtractor(message) : undefined;
        const isFirstMessageInBatch = (this._messages.length === 0);
        if (isFirstMessageInBatch) {
            this._firstMessageTime = performance.now();
        }
        // Send messages asynchronously packing them into one message.
        // We don't want to abuse the web worker communication channel and
        // send messages asynchronously in short period of time or many messages synchronously.
        this._messages.push(message);
        if (transferables) {
            this._transferables = this._transferables.concat(transferables);
        }
        clearTimeout(this._timeoutHandle);
        if (this._messages.length > MESSAGE_BATCH_MAX_SIZE ||
            urgency === 1 /* IMMEDIATE */ ||
            (!isFirstMessageInBatch && (performance.now() - this._firstMessageTime) > MAX_FLUSH_TIMEOUT)) {
            this._flushMessages();
        }
        else {
            this._timeoutHandle = setTimeout(this._flushMessagesBinded, FLUSH_TIMEOUT);
        }
    }
    /**
     * Sends request message to/from worker as promise, the other side can respond and the promise is resolved.
     * Request/response is synchronized by the requestId field.
     */
    request(request, urgency) {
        return new Promise((resolve, reject) => {
            if (request.requestId === NO_ID) {
                request.requestId = Object(_unique_id__WEBPACK_IMPORTED_MODULE_1__["uniqueId"])();
            }
            const listener = (message) => {
                if (messageIs(message, request.responseType) &&
                    message.requestId === request.requestId) {
                    resolve(message);
                    this._events.removeListener(listener);
                }
                if (messageIs(message, request.errorType) &&
                    message.requestId === request.requestId) {
                    reject();
                    this.off(listener);
                }
            };
            this._events.addListener(listener);
            this.sendMessage(request, urgency);
        });
    }
    /**
     * Responds to provided request.
     */
    respond(request, response, urgency) {
        response.requestId = request.requestId;
        this.sendMessage(response, urgency);
    }
    /**
     * Sets a listener to specific type of incoming messages.
     */
    on(type, listener) {
        const typeSafeListener = (message) => {
            if (messageIs(message, type)) {
                listener(message);
            }
        };
        this._listeners.set(listener, typeSafeListener);
        this._events.addListener(typeSafeListener);
    }
    /**
     * Removes incoming messages listener.
     */
    off(listener) {
        const typeSafeListener = this._listeners.get(listener);
        if (typeSafeListener) {
            this._events.removeListener(typeSafeListener);
        }
    }
    /**
     * Starts listening for incoming messages.
     */
    listen() {
        this._addressee.onmessage = ({ data: messages }) => {
            for (const message of messages) {
                this.onMessage(message);
            }
        };
    }
    /**
     * Handler of incoming messages.
     */
    onMessage(message) {
        this._events.fire(message);
    }
    _flushMessages() {
        this._addressee.postMessage(this._messages, this._transferables);
        this._messages.length = 0;
        this._transferables.length = 0;
    }
}
/**
 * Base class for a webworker controller for the main thread code.
 * It also wraps creation of a native Worker.
 */
class WebWorkerClient extends WebWorkerCommunicator {
    /**
     * @param url URL of webworker's deployed js file
     */
    constructor(url) {
        const worker = new Worker(url);
        super(worker);
        this._worker = worker;
        this.listen();
    }
    destroy() {
        this._worker.terminate();
    }
}
/**
 * Base class for a webworker thread implementation. Concrete class should be the entry point for a webworker js build:
 *     new ConcreteWebWorkerImplementation(<DedicatedWorkerGlobalScope>self).run();
 */
class WebWorkerImplementation extends WebWorkerCommunicator {
    run() {
        this.listen();
    }
}


/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uniqueId", function() { return uniqueId; });
let id = 1;
/**
 * Generates unique id
*/
function uniqueId() {
    return id++;
}


/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeVisibleTiles", function() { return computeVisibleTiles; });
const TILE_0_0_0 = { x: 0, y: 0, zoom: 0 };
/**
 * Computes set of tiles visible through a camera. Tiles in the set are guaranteed
 * to be unique.
 *
 * FIXME(dmikis) The uniqueness guarantee is broken currently, but code that uses
 *      this function doesn't suffer from that.
 *
 * @param camera The camera.
 * @returns An iterator over visible tile items.
 */
function* computeVisibleTiles(visibleRegion, visibleRegionBBox, wrapModeX, wrapModeY, zoom) {
    if (zoom === 0) {
        // The only tile on zoom 0 encompasses the whole world. Thus there's
        // little to no point computing that camera sees it: we can tell that
        // right away.
        yield TILE_0_0_0;
        return;
    }
    const tileCount = 1 << zoom;
    const tileIdxMask = tileCount - 1;
    // The idea behind the code below is quite simple: determine columns of the
    // tile grid that are visible to the camera, then for each column find
    // range of row indices that are visible.
    // Here's how we approach computing tile indices from world coordinates.
    // First, we transform world coordinates from [-1, 1] range to [0, 2],
    // dealing with inconsistency with Y axis direction in world and tile grid
    // coordinate system. Let's designate such a coordinate as C (for either X
    // or Y). Size of a tile is 2 / tileCount. Thus,
    //
    //      tileIdx = Math.floor(C / (2 / tileCount))
    //              = Math.floor(C * tileCount / 2)
    //
    const { minX, maxX, minY, maxY } = visibleRegionBBox;
    const minTX = Math.floor((minX + 1) * tileCount / 2);
    const maxTX = Math.floor((maxX + 1) * tileCount / 2);
    const columnCount = maxTX - minTX + 1;
    // Arrays of indices of bottommost and topmost tiles correspondingly for
    // each column.
    // FIXME(dmikis) If number of columns is too large, we'll consume a lot of
    //      memory here. There's a method to do without the arrays, but it's a
    //      bit more complicated to implement.
    const minYs = new Array(columnCount);
    const maxYs = new Array(columnCount);
    // Common sense suggests that those indices can't be greater (less) than the
    // index of a tile row intersected by a line y = minY (y = maxY). Note that
    // maxY corresponds to a tile row with lesser index, not other way around.
    minYs.fill(Math.floor((1 - minY) * tileCount / 2));
    maxYs.fill(Math.floor((1 - maxY) * tileCount / 2));
    const visiblePolygonLength = visibleRegion.length;
    let prevX = visibleRegion[visiblePolygonLength - 1].x + 1;
    let prevY = 1 - visibleRegion[visiblePolygonLength - 1].y;
    let prevTX = Math.floor(prevX * tileCount / 2);
    let prevTY = Math.floor(prevY * tileCount / 2);
    // Iterate over edges of visible polygon of the camera to compute index of
    // topmost and bottommost tiles for each column.
    for (let i = 0; i < visiblePolygonLength; ++i) {
        const x = visibleRegion[i].x + 1;
        const y = 1 - visibleRegion[i].y;
        const tx = Math.floor(x * tileCount / 2);
        const ty = Math.floor(y * tileCount / 2);
        // For each edge we compute 4-connected line of tiles on the tile grid.
        // Length of a 4-connected line always equals Manhattan distance between
        // its ends. However, to avoid unnecessary computation, we omit last tile
        // for every edge. But, since the polygon is closed, we'll iterate over
        // all tiles intersected by edges anyway.
        const l = Math.abs(tx - prevTX) + Math.abs(ty - prevTY);
        const lx = x - prevX;
        const ly = y - prevY;
        const dtx = lx > 0 ? 1 : -1;
        const dty = ly > 0 ? 1 : -1;
        const a = 2 * dtx * ly;
        const b = -2 * dtx * lx;
        const c = dtx * tileCount * (lx * prevY - ly * prevX) + a * (~dtx >>> 31);
        for (let i = 0, tx = prevTX, ty = prevTY; i < l; ++i) {
            const intercept = a * tx + b * ty + c;
            // The math here is somewhat cumbersome to avoid divisions, but the
            // essence is that we try to check through which side the edge of
            // visible polygon exits the tile. Depending on that we "move" to
            // next tile in either vertical or horizontal direction.
            if (0 <= intercept && intercept <= -b) {
                tx += dtx;
            }
            else {
                ty += dty;
            }
            const yIdx = tx - minTX;
            if (maxYs[yIdx] < ty) {
                maxYs[yIdx] = ty;
            }
            if (minYs[yIdx] > ty) {
                minYs[yIdx] = ty;
            }
        }
        prevX = x;
        prevY = y;
        prevTX = tx;
        prevTY = ty;
    }
    // If the world is repeated along X axis, we need to "fold" the array of columns,
    // i.e. compute union of row intervals for columns tileCount indices apart.
    if (wrapModeX === 2 /* REPEAT */ && columnCount > tileCount) {
        for (let i = 0; i < tileCount; ++i) {
            for (let j = i + tileCount; j < columnCount; j += tileCount) {
                if (maxYs[i] < maxYs[j]) {
                    maxYs[i] = maxYs[j];
                }
                if (minYs[i] > minYs[j]) {
                    minYs[i] = minYs[j];
                }
            }
        }
    }
    // If the world is repeated along Y axis, we need to wrap indices in minYs
    // and maxYs arrays to [0, tileCount) interval.
    if (wrapModeY === 2 /* REPEAT */) {
        for (let i = 0; i < columnCount && i < tileCount; ++i) {
            const dy = maxYs[i] - minYs[i];
            // If there's more than tileCount rows between maxY and minY, then the
            // world is encompassed somewhere within visible region.
            if (dy > tileCount) {
                minYs[i] = 0;
                maxYs[i] = tileIdxMask;
            }
            else {
                const minY = minYs[i] &= tileIdxMask;
                maxYs[i] = minY + dy;
            }
        }
    }
    else {
        for (let i = 0; i < columnCount && i < tileCount; ++i) {
            minYs[i] = Math.max(minYs[i], 0);
            maxYs[i] = Math.min(maxYs[i], tileIdxMask);
        }
    }
    if (wrapModeX === 2 /* REPEAT */) {
        for (let i = 0; i < columnCount && i < tileCount; ++i) {
            const tx = (i + minTX) & tileIdxMask;
            for (let ty = minYs[i]; ty <= maxYs[i]; ++ty) {
                yield {
                    x: tx,
                    y: ty & tileIdxMask,
                    zoom
                };
            }
        }
    }
    else {
        for (let tx = Math.max(minTX, 0), txEnd = Math.min(maxTX, tileIdxMask); tx <= txEnd; ++tx) {
            const i = tx - minTX;
            for (let ty = minYs[i]; ty <= maxYs[i]; ++ty) {
                yield {
                    x: tx,
                    y: ty & tileIdxMask,
                    zoom
                };
            }
        }
    }
}


/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "calculateBeltTiles", function() { return calculateBeltTiles; });
/* harmony import */ var _tile_id__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(29);
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(23);
/* harmony import */ var _math_scalar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(16);



const LEFT_SIDE = {
    direction: _math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](0, -1),
    normal: _math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](-1, 0),
    diagonal: _math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](-1, -1),
    prevSide: () => BOTTOM_SIDE,
    nextSide: () => TOP_SIDE
};
const RIGHT_SIDE = {
    direction: _math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](0, +1),
    normal: _math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](+1, 0),
    diagonal: _math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](+1, +1),
    prevSide: () => TOP_SIDE,
    nextSide: () => BOTTOM_SIDE
};
const TOP_SIDE = {
    direction: _math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](+1, 0),
    normal: _math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](0, -1),
    diagonal: _math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](+1, -1),
    prevSide: () => LEFT_SIDE,
    nextSide: () => RIGHT_SIDE
};
const BOTTOM_SIDE = {
    direction: _math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](-1, 0),
    normal: _math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](0, +1),
    diagonal: _math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](-1, +1),
    prevSide: () => RIGHT_SIDE,
    nextSide: () => LEFT_SIDE
};
/**
 * Adds tile to belt tiles if it doesn't fall out of the world. Cycling coordinates can't fall out,
 * they just got adjusted directly in tile item.
 */
function addTileIfAppropriate(tile, beltTiles, maxCoordinate, isXCycled, isYCycled) {
    tile.x = isXCycled ? Object(_math_scalar__WEBPACK_IMPORTED_MODULE_2__["cycleRestrict"])(tile.x, 0, maxCoordinate) : tile.x;
    tile.y = isYCycled ? Object(_math_scalar__WEBPACK_IMPORTED_MODULE_2__["cycleRestrict"])(tile.y, 0, maxCoordinate) : tile.y;
    if ((0 <= tile.x) && (tile.x < maxCoordinate) &&
        (0 <= tile.y) && (tile.y < maxCoordinate)) {
        beltTiles.set(Object(_tile_id__WEBPACK_IMPORTED_MODULE_0__["getTileId"])(tile), tile);
    }
}
/**
 * The algorithm is implemented as a state machine, this method produces belt tiles and sets appropriate state.
 * How to change this state (determine current tile and its side) is described in four TileSide implementations:
 * left, right, top and bottom.
 */
function move(tiles, state, size, maxCoordinate, isXCycled, isYCycled) {
    // add tiles outward in the direction of the normal
    for (let i = 1; i <= size; i++) {
        addTileIfAppropriate({
            x: state.currentTile.x + i * state.currentTileSide.normal.x,
            y: state.currentTile.y + i * state.currentTileSide.normal.y,
            zoom: state.currentTile.zoom
        }, state.beltTiles, maxCoordinate, isXCycled, isYCycled);
    }
    // check diagonal tile
    const diagonalNeighbour = tiles.get(Object(_tile_id__WEBPACK_IMPORTED_MODULE_0__["getTileIdByRawValues"])(state.currentTile.x + state.currentTileSide.diagonal.x, state.currentTile.y + state.currentTileSide.diagonal.y, state.currentTile.zoom));
    if (diagonalNeighbour) {
        state.currentTile = diagonalNeighbour;
        state.currentTileSide = state.currentTileSide.prevSide();
        return;
    }
    // check neighbour in the same direction
    const neighbour = tiles.get(Object(_tile_id__WEBPACK_IMPORTED_MODULE_0__["getTileIdByRawValues"])(state.currentTile.x + state.currentTileSide.direction.x, state.currentTile.y + state.currentTileSide.direction.y, state.currentTile.zoom));
    if (neighbour) {
        state.currentTile = neighbour;
        return;
    }
    // handle corner tiles
    for (let i = 1; i <= size; i++) {
        for (let j = 1; j <= size; j++) {
            addTileIfAppropriate({
                x: state.currentTile.x + i * state.currentTileSide.diagonal.x,
                y: state.currentTile.y + j * state.currentTileSide.diagonal.y,
                zoom: state.currentTile.zoom
            }, state.beltTiles, maxCoordinate, isXCycled, isYCycled);
        }
    }
    state.currentTileSide = state.currentTileSide.nextSide();
}
/**
 * Calculates tiles that surround provided region (set of tiles), the region must be one or more convex polygons
 * with no holes, otherwise correctness is not guaranteed. Multiple polygons can happen when the camera looks
 * at the edge of the world capturing cycled tiles from different sides.
 * The logic of including tiles in the "belt" is as follows: shortest distance from "outside" to any point
 * in the original region should be not less than tileSize * beltSize.
 *
 * @param tiles Set of tiles that cover a convex polygon.
 * @param beltSize "thickness" (in tiles) of the surrounding area.
 */
function calculateBeltTiles(tiles, beltSize, isXCycled, isYCycled) {
    // the algorithm in simple words:
    //   1. find a tile on an edge of the polygon (e.g. one of the leftmost ones)
    //   2. go around the polygon tile-by-tile adding surrounding tiles outwardly
    const indexedTiles = new Map();
    const beltTiles = new Map();
    // index tiles
    for (const tileItem of tiles) {
        indexedTiles.set(Object(_tile_id__WEBPACK_IMPORTED_MODULE_0__["getTileId"])(tileItem), tileItem);
    }
    // tiles are grouped into one or more convex polygons, process these polygons one by one
    const tilesToProcess = new Map(indexedTiles);
    while (tilesToProcess.size > 0) {
        let leftmostTile = { x: Number.POSITIVE_INFINITY, y: 0, zoom: 0 };
        // find the leftmost tile to start walking from
        for (const tileItem of tilesToProcess.values()) {
            if (tileItem.x < leftmostTile.x) {
                leftmostTile = tileItem;
            }
        }
        // save min/max y value per x coordinate to be able
        // to mark these tiles as processed (remove from tilesToProcess)
        const maxY = [];
        const minY = [];
        const initState = { currentTile: leftmostTile, currentTileSide: LEFT_SIDE, beltTiles };
        const state = Object.assign({}, initState);
        const maxCoordinate = Math.pow(2, leftmostTile.zoom);
        do {
            // move around while we don't reach the init position
            move(tilesToProcess, state, beltSize, maxCoordinate, isXCycled, isYCycled);
            const index = state.currentTile.x - initState.currentTile.x;
            maxY[index] = maxY[index] === undefined ? state.currentTile.y : Math.max(maxY[index], state.currentTile.y);
            minY[index] = minY[index] === undefined ? state.currentTile.y : Math.min(minY[index], state.currentTile.y);
        } while (state.currentTile !== initState.currentTile ||
            state.currentTileSide !== initState.currentTileSide);
        // mark tiles from current polygon as processed
        const zoom = leftmostTile.zoom;
        for (let i = 0; i < maxY.length; i++) {
            const x = leftmostTile.x + i;
            for (let y = minY[i]; y <= maxY[i]; y++) {
                tilesToProcess.delete(Object(_tile_id__WEBPACK_IMPORTED_MODULE_0__["getTileIdByRawValues"])(x, y, zoom));
            }
        }
    }
    // remove belt tiles that overlaps to avoid duplications
    for (const tileId of beltTiles.keys()) {
        if (indexedTiles.has(tileId)) {
            beltTiles.delete(tileId);
        }
    }
    return beltTiles.values();
}


/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "countFps", function() { return countFps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "countTileParseTime", function() { return countTileParseTime; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "countTileProcessingTime", function() { return countTileProcessingTime; });
const PROJECT_ID = 443;
function chooseStatUrl() {
    // FIXME(dmikis) Ideally we should be get this URLs from config.
    const STAT_URLS = {
        ru: 'https://yandex.ru/clck',
        com: 'https://yandex.com/clck',
        tr: 'https://yandex.com.tr/clck'
    };
    const tld = location.hostname.split('.').pop();
    switch (tld) {
        case 'tr':
            return STAT_URLS.tr;
        case 'com':
        case 'fr':
            return STAT_URLS.com;
        default:
            return STAT_URLS.ru;
    }
}
const STAT_URL = chooseStatUrl();
function stringifyVars(vars) {
    return Object.keys(vars).map((key) => `${key}=${vars[key]}`).join(',');
}
function count(pid, cid, path, vars) {
    const url = `${STAT_URL}/counter`;
    const data = `/dtype=stred/pid=${pid}/cid=${cid}` +
        `/path=${path.join('.')}/${vars ? `vars=${stringifyVars(vars)}/` : ''}`;
    if (!(navigator.sendBeacon && navigator.sendBeacon(url, data + '*'))) {
        const image = new Image();
        image.src = url + data + `rnd=${Date.now()}${Math.random() * 100 | 0}/*`;
    }
}
const PERF_COUNTER_ID = 73323;
/**
 * Log user's rendering perf to statface.
 *
 * @param fps FPS
 */
function countFps(fps) {
    const roundedFps = Math.floor(fps / 10) * 10;
    count(PROJECT_ID, PERF_COUNTER_ID, ['fps', `${roundedFps}-${roundedFps + 10}`, (fps * 100).toFixed()]);
}
function encodeTileItem(tileItem) {
    return `${tileItem.x}.${tileItem.y}.${tileItem.zoom}`;
}
function countTileParseTime(layer, minTimeTile, minTime, maxTimeTile, maxTime, medianTimeTile, medianTime) {
    count(PROJECT_ID, PERF_COUNTER_ID, [
        'tile_parse',
        layer
    ], {
        minTime: minTime.toFixed(),
        medianTime: medianTime.toFixed(),
        maxTime: maxTime.toFixed(),
        minTileItem: encodeTileItem(minTimeTile),
        medianTileItem: encodeTileItem(medianTimeTile),
        maxTileItem: encodeTileItem(maxTimeTile)
    });
}
function countTileProcessingTime(layer, items) {
    const varsToLog = {};
    items.forEach((item) => {
        if (item.zoom === 'average') {
            count(PROJECT_ID, PERF_COUNTER_ID, [
                'tile_processing_average',
                layer,
                (Math.ceil(item.time / 250) * 250).toString()
            ]);
        }
        varsToLog[item.zoom] = item.time.toFixed();
    });
    count(PROJECT_ID, PERF_COUNTER_ID, ['tile_processing', layer], varsToLog);
}


/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return IconBufferWriter; });
/* harmony import */ var _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _util_buffer_writer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(36);


/**
 * Writer of geometry data of icons.
 */
class IconBufferWriter extends _util_buffer_writer__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor() {
        super(IconBufferWriter.ATTRIBUTE_MAPPING.vertexByteSize);
    }
    /**
     * Writes an icon to buffers.
     *
     * @param icon Icon to be written to buffer.
     * @param location Image location in atlas.
     * @param size Image size in atlas.
     * @param offset Offset of image points in CSS pixels.
     * @param pixelRatio Ratio of image size in CSS pixels to the size in atlas pixels.
     *
     * @returns Location of the icon data in buffers.
     */
    writeIcon(icon, location, size, offset, pixelRatio) {
        const top = offset.y;
        const bottom = offset.y + size.height * pixelRatio;
        const left = offset.x;
        const right = offset.x + size.width * pixelRatio;
        this.writeVertex(icon.position, left, bottom, location.minX, location.minY);
        this.writeVertex(icon.position, left, top, location.minX, location.maxY);
        this.writeVertex(icon.position, right, bottom, location.maxX, location.minY);
        this.writeVertex(icon.position, right, top, location.maxX, location.maxY);
        this.writeIndicesForContinuousStrip(4);
        return this.endMesh();
    }
    /**
     * Writes a vertex to the vertex buffer.
     *
     * @param position Position of the vertex in display coordinates.
     * @param uv UVs of the vertex.
     * @return Index of the written vertex.
     */
    writeVertex(position, displacementX, displacementY, uvX, uvY) {
        const vertexIdx = this.getCurrentVertexIdx();
        this._writeWorldCoordinate(position);
        this._writeHalfWords(displacementX, displacementY);
        this._writeHalfWords(uvX, uvY);
        return vertexIdx;
    }
}
/** Description of how a writer stores vertex data. */
IconBufferWriter.ATTRIBUTE_MAPPING = new _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__["AttributeMapping"]([
    [
        0 /* POSITION_HIGH */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        1 /* POSITION_LOW */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        6 /* DISPLACEMENT */,
        {
            size: 2,
            type: 5122 /* SHORT */,
            normalized: false
        }
    ],
    [
        4 /* UV */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: false
        }
    ]
]);


/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WORD_BYTE_SIZE", function() { return WORD_BYTE_SIZE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return BufferWriter; });
/* harmony import */ var _gputypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(37);
/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(38);


const WORD_BYTE_SIZE = 4;
/**
 * Generates triangles of a fan of a given length as if it is continuous and
 * starts with 0.
 *
 * @param count Number of vertices in the fan.
 * @returns Iterator over indices of triangles.
 */
function* generateFan(count) {
    for (let i = 2; i < count; ++i) {
        yield 0;
        yield i - 1;
        yield i;
    }
}
/**
 * Generates triangles of a strip of a given length as if it is continuous and
 * starts with 0.
 *
 * @param count Number of vertices in the fan.
 * @returns Iterator over indices of triangles.
 */
function* generateStrip(count) {
    yield 0;
    yield 1;
    yield 2;
    let offset0 = 1;
    let offset1 = 2;
    for (let i = 3; i < count; ++i) {
        yield i - offset0;
        yield i - offset1;
        yield i;
        const tmp = offset0;
        offset0 = offset1;
        offset1 = tmp;
    }
}
/**
 * Vertex buffer helper class, that supports sequential writing interface and takes over some single-buffer operations.
 * It is an integral part of the buffer writer class and its main purpose is to make the writer's code easier.
 */
class VertexBuffer {
    /**
     * @param byteSize Initial size of the buffer in bytes. As it gets filled by words
     *      the size must be a multiply of 4.
     */
    constructor(byteSize) {
        this._nextWordOffset = 0;
        this._initBuffers(byteSize);
    }
    /**
     * @returns true if there is no free space remaining in buffer.
     */
    get isFull() {
        return this._nextWordOffset >= this._uint32View.length;
    }
    /**
     * @returns The number of words (4 bytes values) already written.
     */
    get occupiedSize() {
        return this._nextWordOffset;
    }
    /**
     * @return Max number of bytes this buffer is able to store. It can be increased by the extend() method.
     */
    get byteSize() {
        return this._uint32View.byteLength;
    }
    /**
     * Extends buffer to the new size. The new size must be not less than current one and it must be a multiply of 4.
     */
    extend(newByteSize) {
        // TODO assert newByteLength is larger than current _arrayBuffer and its is a multiply of the word size.
        const oldUint32View = this._uint32View;
        this._initBuffers(newByteSize);
        this._uint32View.set(oldUint32View);
    }
    /**
     * Appends value as a uint32 number.
     */
    pushUint32(value) {
        this._uint32View[this._nextWordOffset++] = value;
    }
    /**
     * Appends value as a float32 number.
     */
    pushFloat32(value) {
        this._float32View[this._nextWordOffset++] = value;
    }
    /**
     * @returns uint8 view of this buffer. The size of the view matches the amount of written data.
     */
    asUint32Array() {
        return this._uint32View.subarray(0, this.occupiedSize);
    }
    _initBuffers(byteLength) {
        const arrayBuffer = new ArrayBuffer(byteLength);
        this._uint32View = new Uint32Array(arrayBuffer);
        this._float32View = new Float32Array(arrayBuffer);
    }
    /**
     * Moves "tail" data (from the offset specified to the end of the buffer) of one buffer to another. The cursors of
     * buffers will be appropriately updated to reflect data changes.
     */
    static transferDataTail(src, dst, srcWordOffset, dstOffset = 0) {
        const tailLength = src.occupiedSize - srcWordOffset;
        const srcTail = src._uint32View.subarray(srcWordOffset, src.occupiedSize);
        dst._uint32View.set(srcTail, dstOffset);
        dst._nextWordOffset = tailLength;
        src._nextWordOffset = srcWordOffset;
    }
}
/**
 * Index buffer helper class, that supports sequential writing interface and takes over some single-buffer operations.
 * It is an integral part of the buffer writer class and its main purpose is to make the writer's code easier.
 */
class IndexBuffer {
    /**
     * @param size Initial size of the buffer.
     */
    constructor(size) {
        this._nextIndexOffset = 0;
        this._uint16View = new Uint16Array(size);
    }
    /**
     * @returns The number of indices already written.
     */
    get occupiedSize() {
        return this._nextIndexOffset;
    }
    /**
     * @return Max number of indices this buffer is able to store. It can be increased by the extend() method.
     */
    get size() {
        return this._uint16View.length;
    }
    /**
     * Extends buffer to the new size.
     */
    extend(newSize) {
        // TODO assert newByteLength is larger than current _arrayBuffer
        const oldUint16View = this._uint16View;
        this._uint16View = new Uint16Array(newSize);
        this._uint16View.set(oldUint16View);
    }
    /**
     * Appends index to the end of the buffer.
     */
    push(index) {
        this._uint16View[this._nextIndexOffset++] = index;
    }
    /**
     * @returns uint16 view of this buffer. The size of the view matches the amount of written data.
     */
    asUint16Array() {
        return new Uint16Array(this._uint16View.buffer, 0, this.occupiedSize);
    }
    /**
     * Moves "tail" data (from the offset specified to the end of the buffer) of one buffer to another. The offsets of
     * buffers will be appropriately updated to reflect data changes.
     * baseIndex will be deducted from all moved indices.
     */
    static transferDataTail(src, dst, baseIndex, srcOffset, dstOffset = 0) {
        for (let i = srcOffset, j = dstOffset; i < src.occupiedSize; i++, j++) {
            dst._uint16View[j] = src._uint16View[i] - baseIndex;
        }
        dst._nextIndexOffset = src.occupiedSize - srcOffset;
        src._nextIndexOffset = srcOffset;
    }
}
/**
 * Base buffer writer implementation. Can write unsigned short indices and
 * provides facilities for child classes to handle writing vertex data. Defines
 * a concept of current mesh. Basically, it mean that all vertices and indices
 * written to a writer between two `endMesh` calls (or construction of the writer
 * and an `endMesh` call) must be considered belonging to one atomic piece of
 * geometry and should not be spitted between separate buffers.
 */
class BufferWriter {
    /**
     * Creates a new writer and allocates initial amount of memory to store data.
     * Also implicitly "start" a mesh.
     *
     * @param vertexByteSize
     * @param initVertexBufferSize Init size (in vertices) of growing vertex buffers.
     * @param maxVertexBufferSize Max size (in vertices) of vertex buffers.
     * @param initIndexBufferUint16Size Init size (in uint16 number) of growing index buffers.
     */
    constructor(vertexByteSize, initVertexBufferSize = 0x400, maxVertexBufferSize = 0x10000, initIndexBufferUint16Size = 0xc00) {
        this._vertexByteSize = vertexByteSize;
        this._initVertexBufferByteSize = vertexByteSize * initVertexBufferSize;
        this._maxVertexBufferByteSize = vertexByteSize * maxVertexBufferSize;
        this._initIndexBufferUint16Size = initIndexBufferUint16Size;
        this._vertexBuffer = new VertexBuffer(this._initVertexBufferByteSize);
        this._vertexBuffers = [this._vertexBuffer];
        this._indexBuffer = new IndexBuffer(this._initIndexBufferUint16Size);
        this._indexBuffers = [this._indexBuffer];
        this._currentMeshVertexOffset = 0;
        this._currentMeshIndexOffset = 0;
        this._currentMeshBaseIndex = 0;
    }
    /**
     * Writes a bunch of indices to the underlying storage as unsigned short
     * numbers. If current storage doesn't have enough space to accommodate
     * given indices, the writer will automatically resize it. The writer
     * automatically adds base index to the supplied values, so from a user
     * point of view first vertex of a mesh has index 0 and there's no need
     * to take into account it's offset while generating mesh's topology.
     *
     * @param indices Array of indices to write.
     */
    writeIndices(indices) {
        this._ensureEnoughIndexBufferSpace(indices.length);
        const buffer = this._indexBuffer;
        const baseIndex = this._currentMeshBaseIndex;
        for (let i = 0; i < indices.length; ++i) {
            buffer.push(baseIndex + indices[i]);
        }
    }
    /**
     * Generates triangle indices from an array of indices of a triangle strip
     * (as in GL) and writes generated triplets to the managed index buffer.
     * @see OpenGL ES 2.0 Spec, §2.6.1
     *
     * @param indices Indices of the strip.
     */
    writeIndicesForStrip(indices) {
        this._ensureEnoughIndexBufferSpace(3 * (indices.length - 2));
        const buffer = this._indexBuffer;
        const baseIndex = this._currentMeshBaseIndex;
        for (const i of generateStrip(indices.length)) {
            buffer.push(baseIndex + indices[i]);
        }
    }
    /**
     * Generates triangle indices from a continuous triangle strip of a given
     * length and writes generated triplets to managed index buffer.
     * @see OpenGL ES 2.0 Spec, §2.6.1
     *
     * @param indexCount
     * @param baseIndexInMesh
     */
    writeIndicesForContinuousStrip(indexCount, baseIndexInMesh = 0) {
        this._ensureEnoughIndexBufferSpace(3 * (indexCount - 2));
        const buffer = this._indexBuffer;
        const baseIndex = this._currentMeshBaseIndex + baseIndexInMesh;
        for (const i of generateStrip(indexCount)) {
            buffer.push(baseIndex + i);
        }
    }
    /**
     * Generates triangle indices from an array of indices of a triangle fan (as
     * in GL) and writes generated triplets to the managed index buffer.
     * @see OpenGL ES 2.0 Spec, §2.6.1
     *
     * @param indices Indices of the strip.
     */
    writeIndicesForFan(indices) {
        this._ensureEnoughIndexBufferSpace(3 * (indices.length - 2));
        const buffer = this._indexBuffer;
        const baseIndex = this._currentMeshBaseIndex;
        for (const i of generateFan(indices.length)) {
            buffer.push(baseIndex + indices[i]);
        }
    }
    /**
     * Generates triangle indices from a continuous triangle fan of a given length
     * and writes generated triplets to managed index buffer.
     * @see OpenGL ES 2.0 Spec, §2.6.1
     *
     * @param indexCount
     * @param baseIndexInMesh
     */
    writeIndicesForContinuousFan(indexCount, baseIndexInMesh = 0) {
        this._ensureEnoughIndexBufferSpace(3 * (indexCount - 2));
        const buffer = this._indexBuffer;
        const baseIndex = baseIndexInMesh + this._currentMeshBaseIndex;
        for (const i of generateFan(indexCount)) {
            buffer.push(baseIndex + i);
        }
    }
    /**
     * Ends current mesh and implicitly starts a new one.
     *
     * @returns Internal index of vertex and index buffers the mesh was written
     *      to and its memory location in them.
     */
    endMesh() {
        const currentMeshVertexOffset = this._currentMeshVertexOffset;
        const vertexOccupiedSize = this._vertexBuffer.occupiedSize;
        this._currentMeshVertexOffset = vertexOccupiedSize;
        this._currentMeshBaseIndex = (vertexOccupiedSize << 2) / this._vertexByteSize;
        const currentMeshIndexOffset = this._currentMeshIndexOffset;
        const indexOccupiedSize = this._indexBuffer.occupiedSize;
        this._currentMeshIndexOffset = indexOccupiedSize;
        return {
            vertexByteOffset: currentMeshVertexOffset << 2,
            vertexByteLength: vertexOccupiedSize - currentMeshVertexOffset << 2,
            indexByteOffset: currentMeshIndexOffset << 1,
            indexByteLength: indexOccupiedSize - currentMeshIndexOffset << 1,
            // We can't return actual buffer reference since it can change if
            // the buffer gets reallocated.
            bufferIndex: this._vertexBuffers.length - 1
        };
    }
    /**
     * Returns an array of currently owned buffer data. This call's better
     * made when you're done with the writer since if the writer decides to
     * resize any of the buffers some of the references in the returned array
     * may become outdated.
     */
    getBuffers() {
        return Object(_array__WEBPACK_IMPORTED_MODULE_1__["zip"])(this._vertexBuffers, this._indexBuffers, (vertexBuffer, indexBuffer) => ({
            vertexBuffer: vertexBuffer.asUint32Array(),
            indexBuffer: indexBuffer.asUint16Array()
        }));
    }
    /**
     * Returns an offset in the current vertex buffer to the location where next
     * piece of data will be written.
     */
    getCurrentVertexBufferByteOffset() {
        return this._vertexBuffer.occupiedSize << 2;
    }
    /**
     * Returns index of currently written vertex structure in the current vertex
     * buffer.
     */
    getCurrentVertexIdx() {
        return ((this._vertexBuffer.occupiedSize << 2) / this._vertexByteSize | 0) - this._currentMeshBaseIndex;
    }
    /**
     * Writes a floating point value to the current vertex buffer and advances
     * the offset by 4 bytes.
     *
     * @param value The value to be written.
     */
    _writeFloat32(value) {
        this._ensureEnoughVertexBufferSpace();
        this._vertexBuffer.pushFloat32(value);
    }
    /**
     * Writes an unsigned integer value to the current vertex buffer and advances
     * the offset by 4 bytes.
     *
     * @param value The value to be written.
     */
    _writeWord(value) {
        this._ensureEnoughVertexBufferSpace();
        this._vertexBuffer.pushUint32(value);
    }
    /**
     * Writes an unsigned short value to the current vertex buffer and advances
     * the offset by 2 bytes. Passed values will be truncated to 16 bits.
     *
     * @param value The value to be written.
     */
    _writeHalfWords(v1, v2) {
        this._writeWord(v2 << 16 | v1 & 0xffff);
    }
    /**
     * Writes an unsigned byte value to the current vertex buffer and advances
     * the offset by 1 byte. Passed values will be truncated to 8 bits.
     *
     * @param value The value to be written.
     */
    _writeBytes(v1, v2, v3, v4) {
        this._writeWord(v4 << 24 |
            (v3 & 0xff) << 16 |
            (v2 & 0xff) << 8 |
            v1 & 0xff);
    }
    /**
     * Encodes a world coordinate vector as a pair of 32-bit integers (splitting
     * them in turn into to 16-bit ones).
     *
     * @param c The world coordinate.
     */
    _writeWorldCoordinate(c) {
        // To avoid using GPU singed integer conversions we shift and scale world
        // coordinates so they're in [0, 1] range (instead of [-1, 1]) and then
        // encoded as unsigned 32 bit integers split into to 16 bit ones.
        const xUint32 = Object(_gputypes__WEBPACK_IMPORTED_MODULE_0__["floatToUint32"])(0.5 * (c.x + 1));
        const yUint32 = Object(_gputypes__WEBPACK_IMPORTED_MODULE_0__["floatToUint32"])(0.5 * (c.y + 1));
        this._writeHalfWords(xUint32 >>> 16, yUint32 >>> 16);
        this._writeHalfWords(xUint32, yUint32);
    }
    /**
     * Computes new bigger size of a vertex buffer based on its current size. By
     * default just double the current size.
     *
     * @param currentByteSize Current size of the index buffer in bytes.
     * @returns The new size.
     */
    _getNextVertexBufferByteSize(currentByteSize) {
        return currentByteSize << 1;
    }
    /**
     * Computes new bigger size of an index buffer based on its current size. By
     * default just double the current size.
     *
     * @param currentUint16Size Current size of the index buffer in shorts.
     * @returns The new size.
     */
    _getNextIndexBufferUint16Size(currentUint16Size) {
        return currentUint16Size << 1;
    }
    /**
     * Ensures that the managed vertex buffer has enough space to fit in a chunk
     * of data of a given size. Either does nothing, resizes the current vertex
     * buffer or creates entirely new pair of vertex and index buffers.
     *
     * @param valueSize Byte size of the data that needs to be accommodated by
     *      the vertex buffer.
     */
    _ensureEnoughVertexBufferSpace() {
        const vertexBuffer = this._vertexBuffer;
        if (!vertexBuffer.isFull) {
            // We have enough space, so nothing to be done.
            return;
        }
        if (vertexBuffer.byteSize < this._maxVertexBufferByteSize) {
            // If we can just resize the current vertex buffer, do that.
            this._vertexBuffer.extend(this._getNextVertexBufferByteSize(vertexBuffer.byteSize));
            return;
        }
        // If there's no enough space in the current vertex buffer and it's
        // already of maximum size, allocate new vertex and index buffers and
        // copy data of the current mesh to them from the current buffers.
        // Then make those buffer the current ones.
        const currentMeshVertexOffset = this._currentMeshVertexOffset;
        const currentMeshVertexByteSize = (vertexBuffer.occupiedSize - currentMeshVertexOffset) * 4;
        const maxVertexBufferByteSize = this._maxVertexBufferByteSize;
        if (currentMeshVertexByteSize === maxVertexBufferByteSize) {
            throw new Error('Mesh is too big to fit in.');
        }
        let newVertexBufferByteSize = this._initVertexBufferByteSize;
        // Initial vertex buffer size may be too small to accommodate the current
        // mesh, so we find next bigger size that is sufficient.
        while (newVertexBufferByteSize <= currentMeshVertexByteSize) {
            newVertexBufferByteSize = this._getNextVertexBufferByteSize(newVertexBufferByteSize);
        }
        const newVertexBuffer = new VertexBuffer(newVertexBufferByteSize);
        VertexBuffer.transferDataTail(vertexBuffer, newVertexBuffer, currentMeshVertexOffset);
        this._vertexBuffer = newVertexBuffer;
        this._vertexBuffers.push(newVertexBuffer);
        this._currentMeshVertexOffset = 0;
        const indexBuffer = this._indexBuffer;
        const currentMeshIndexOffset = this._currentMeshIndexOffset;
        const currentMeshIndexSize = indexBuffer.occupiedSize - currentMeshIndexOffset;
        let newIndexBufferSize = this._initIndexBufferUint16Size;
        // Initial index buffer size may be too small to accommodate the current
        // mesh, so we find next bigger size that is sufficient.
        while (newIndexBufferSize <= currentMeshIndexSize) {
            newIndexBufferSize = this._getNextIndexBufferUint16Size(newIndexBufferSize);
        }
        const newIndexBuffer = new IndexBuffer(newIndexBufferSize);
        // Since the current mesh's copied to the beginning of the new vertex
        // buffer, it's base index now is 0. If the mesh has any written indices,
        // they're already offset by the old base index.
        IndexBuffer.transferDataTail(indexBuffer, newIndexBuffer, this._currentMeshBaseIndex, currentMeshIndexOffset);
        this._currentMeshBaseIndex = 0;
        this._currentMeshIndexOffset = 0;
        this._indexBuffer = newIndexBuffer;
        this._indexBuffers.push(newIndexBuffer);
    }
    /**
     * Ensures that the managed index buffer has enough space to fit in a given
     * number of indices. Either does nothing or resizes the current index
     * buffer.
     *
     * @param indexCount Number of indices client wants to write to the managed
     *      index buffer.
     */
    _ensureEnoughIndexBufferSpace(indexCount) {
        const buffer = this._indexBuffer;
        const requiredSize = buffer.occupiedSize + indexCount;
        if (requiredSize <= buffer.size) {
            // We have enough space so nothing to be done.
            return;
        }
        let newBufferSize = buffer.size;
        // Let's compute new larger size of the index buffer until we can
        // accommodate incoming data.
        while (requiredSize > newBufferSize) {
            newBufferSize = this._getNextIndexBufferUint16Size(newBufferSize);
        }
        this._indexBuffer.extend(newBufferSize);
    }
}


/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "floatToUint8", function() { return floatToUint8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "floatToUint16", function() { return floatToUint16; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "floatToInt16", function() { return floatToInt16; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "floatToUint32", function() { return floatToUint32; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "floatToInt32", function() { return floatToInt32; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "int32ToFloat", function() { return int32ToFloat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uint32ToFloat", function() { return uint32ToFloat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "int16ToFloat", function() { return int16ToFloat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uint16ToFloat", function() { return uint16ToFloat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uint8ToFloat", function() { return uint8ToFloat; });
const UINT8_MAX = 0xff;
const UINT16_MAX = 0xffff;
const UINT32_MAX = 0xffffffff;
function floatToUint8(x) {
    return UINT8_MAX * x | 0;
}
function floatToUint16(x) {
    return x * UINT16_MAX | 0;
}
function floatToInt16(x) {
    return (x * UINT16_MAX - 1) / 2 | 0;
}
function floatToUint32(x) {
    return x * UINT32_MAX | 0;
}
function floatToInt32(x) {
    return (x * UINT32_MAX - 1) / 2 | 0;
}
function int32ToFloat(x) {
    return (2 * x + 1) / UINT32_MAX;
}
function uint32ToFloat(x) {
    return x / UINT32_MAX;
}
function int16ToFloat(x) {
    return (2 * x + 1) / UINT16_MAX;
}
function uint16ToFloat(x) {
    return x / UINT16_MAX;
}
function uint8ToFloat(x) {
    return x / UINT8_MAX;
}


/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "swap", function() { return swap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reverse", function() { return reverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shuffle", function() { return shuffle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zip", function() { return zip; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compare", function() { return compare; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertionSort", function() { return insertionSort; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mergeSort", function() { return mergeSort; });
/* harmony import */ var _comparator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39);

/**
 * Swaps two values in an array.
 *
 * @param array The array.
 * @param i Index of a value to be swapped.
 * @param j Index of a value to be swapped.
 */
function swap(array, i, j) {
    const t = array[i];
    array[i] = array[j];
    array[j] = t;
}
/**
 * Reverses order of elements in a range in an array.
 *
 * @param array The array.
 * @param start The start of the range.
 * @param end The end of the range.
 */
function reverse(array, start = 0, end = array.length) {
    for (let i = start, j = end - 1; i < j; ++i, --j) {
        swap(array, i, j);
    }
}
/**
 * Rotates a range of elements in an array by given amount.
 *
 * @param array The array.
 * @param amount The amount.
 * @param start The start of the range.
 * @param end The end of the range.
 */
function rotate(array, amount = 1, start = 0, end = array.length) {
    reverse(array, start, end);
    reverse(array, start, start + amount);
    reverse(array, start + amount, end);
}
/**
 * Copies a range of elements from a source array to a range in a destination
 * array.
 *
 * @param src The source array.
 * @param dst The destination array.
 * @param srcStart The start of the source range.
 * @param srcStart The start of the source range.
 * @param dstStart The start of the destination range.
 */
function copy(src, dst, srcStart = 0, srcEnd = src.length, dstStart = 0) {
    for (let i = srcStart, j = dstStart; i < srcEnd; ++i, ++j) {
        dst[j] = src[i];
    }
}
/**
 * Shuffles randomly a range of elements in an array.
 *
 * @param array The array.
 * @param start The start of the range.
 * @param end The end of the range.
 */
function shuffle(array, start = 0, end = array.length) {
    for (let i = start, j = i + 1; i < end; ++i, ++j) {
        swap(array, i, j + (Math.random() * (end - j) | 0));
    }
}
function zip(ts, us, zipper = (t, u) => [t, u]) {
    const l = Math.min(ts.length, us.length);
    const vs = new Array(l);
    for (let i = 0; i < l; ++i) {
        vs[i] = zipper(ts[i], us[i]);
    }
    return vs;
}
/**
 * Compares two arrays lexicographically. The order is specified be the comparator parameter.
 *
 * @param comparator Elements comparator with standard signature.
 * @param a The first array to compare.
 * @param b The second array to compare.
 * @returns 0 if all elements and lengths are equal,
 *      negative number if the first element is less then the second (lexicographically),
 *      positive number if the first element is greater then the second,
 *      if all the elements are equal the lengths are being compared.
 */
function compare(comparator, a, b) {
    const length = Math.min(a.length, b.length);
    for (let i = 0; i < length; i++) {
        const result = comparator(a[i], b[i]);
        if (result) {
            return result;
        }
    }
    return a.length - b.length;
}
/**
 * Sorts a range of elements of an array in place with insertion sort.
 *
 * @param array The array to be sorted.
 * @param comparator Comparator for array elements.
 * @param start Index of the first element in the range to be sorted.
 * @param end Index of an element behind the last element in the range to be
 *      sorted.
 */
function insertionSort(array, comparator = _comparator__WEBPACK_IMPORTED_MODULE_0__["DEFAULT_COMPARATOR"], start = 0, end = array.length) {
    for (let i = start; i < end; ++i) {
        for (let j = i; j > start && comparator(array[j - 1], array[j]) > 0; --j) {
            swap(array, j - 1, j);
        }
    }
}
const BLOCK_SIZE = 32;
/**
 * Merges two sorted ranges of an array. Stores the result into another one.
 *
 * @param src The array with the ranges to be merged.
 * @param dst The array the resulting range will be stored to.
 * @param comparator The comparator for array elements.
 * @param start Start of the first range to be merged.
 * @param middle End of the first and simultaneously start of the second range
 *      to be merged.
 * @param end End of the second range to be merged.
 * @param dstOffset Offset of merged range in the result array.
 */
function merge(src, dst, comparator, start, middle, end, dstOffset) {
    let i = dstOffset;
    let j = start;
    let k = middle;
    while (j < middle && k < end) {
        dst[i++] = comparator(src[j], src[k]) > 0 ? src[k++] : src[j++];
    }
    copy(src, dst, j, middle, i);
    copy(src, dst, k, end, i);
}
/**
 * Sorts a range of elements of an array with merge sort.
 *
 * @param array  The array to be sorted.
 * @param comparator Comparator for array elements.
 * @param end Index of an element behind the last element in the range to be
 *      sorted.
 */
function mergeSort(array, comparator = _comparator__WEBPACK_IMPORTED_MODULE_0__["DEFAULT_COMPARATOR"], start = 0, end = array.length) {
    // First and foremost: if the range is smaller than the block size, just
    // perform insertion sort on it.
    if (end - start <= BLOCK_SIZE) {
        insertionSort(array, comparator, start, end);
        return;
    }
    // First we split the given range into subranges of size BLOCK_SIZE and
    // sort every range with insertion sort.
    {
        let s = start;
        let e = s + BLOCK_SIZE;
        while (e < end) {
            insertionSort(array, comparator, s, e);
            s = e;
            e += BLOCK_SIZE;
        }
        insertionSort(array, comparator, s, end);
    }
    // TODO(dmikis): Implement in-place merge. It seems there're reasonably
    //      complex solutions out there.
    const auxArray = new Array(end - start);
    // Then we merge blocks pairs, increase block size by 2 and repeat.
    for (let blockSize = BLOCK_SIZE; blockSize < end - start; blockSize += blockSize) {
        // TODO(dmikis): Before aforementioned todo maybe implement array
        // pingponging to cut down amount of full copies.
        copy(array, auxArray, start, end);
        let i = start;
        let s = 0;
        let m = blockSize;
        let e = m + blockSize;
        while (e < end - start) {
            merge(auxArray, array, comparator, s, m, e, i);
            s = e;
            m = s + blockSize;
            e = m + blockSize;
            i += 2 * blockSize;
        }
        merge(auxArray, array, comparator, s, Math.min(m, end - start), end - start, i);
    }
}


/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_COMPARATOR", function() { return DEFAULT_COMPARATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMERICAL_COMPARATOR", function() { return NUMERICAL_COMPARATOR; });
function DEFAULT_COMPARATOR(a, b) {
    if (a > b) {
        return 1;
    }
    if (a < b) {
        return -1;
    }
    return 0;
}
function NUMERICAL_COMPARATOR(a, b) {
    return a - b;
}


/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MemorySubChunk; });
/* harmony import */ var _count_vertices__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41);

/**
 * Represents a region in a memory chunk. Memory is allocated by big chunks for performance reasons,
 * and we need a mechanism to control those chunk's suballocation to properly free
 * the occupied memory - that is what this class is for.
 */
class MemorySubChunk {
    constructor(chunk, location) {
        this.memoryChunk = chunk;
        this._location = location;
        chunk.retain();
    }
    /**
     * @returns Offset of vertex data of the chunk in bytes.
     */
    get vertexByteOffset() {
        return this.memoryChunk.vertexByteOffset + this._location.vertexByteOffset;
    }
    /**
     * @returns Offset of index data of the chunk in bytes.
     */
    get indexByteOffset() {
        return this.memoryChunk.indexByteOffset + this._location.indexByteOffset;
    }
    /**
     * @returns Number of indexes occupied by this chunk.
     */
    get indexCount() {
        return Object(_count_vertices__WEBPACK_IMPORTED_MODULE_0__["countIndices"])(this._location.indexByteLength, this.memoryChunk.page.indexType);
    }
    /**
     * @returns Number of bytes occupied by this chunk for vertex data.
     */
    get vertexByteLength() {
        return this._location.vertexByteLength;
    }
    /**
     * @returns Number of bytes occupied by this chunk for index data.
     */
    get indexByteLength() {
        return this._location.indexByteLength;
    }
    destroy() {
        this.memoryChunk.release();
    }
}


/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "countVertices", function() { return countVertices; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "countIndices", function() { return countIndices; });
/**
 * @returns Integer number of vertices that fit into a region of specified in bytes size.
 */
function countVertices(vertexByteSize, attribMapping) {
    return vertexByteSize / attribMapping.vertexByteSize | 0;
}
/**
 * @returns Integer number of indices that fit into a region of specified in bytes size.
 */
function countIndices(indexByteSize, type) {
    switch (type) {
        case 5123 /* UNSIGNED_SHORT */:
            return indexByteSize >> 1;
        case 5125 /* UNSIGNED_INT */:
            return indexByteSize >> 2;
        default:
            return -1;
    }
}


/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AllocatedImage", function() { return AllocatedImage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return IdentifiedImageAtlasManager; });
/* harmony import */ var _util_ref_counted__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43);

/**
 * Represents an allocated image. Allocated image is a shareable resource that should be resealed
 * when there are no clients use it. As it is not possible to rely on the GC, clients should
 * manually retain their required images and release them when they are not required anymore.
 */
class AllocatedImage extends _util_ref_counted__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(descriptor, bbox, atlasManager) {
        super();
        this.descriptor = descriptor;
        this.bbox = bbox;
        this.atlasManager = atlasManager;
    }
    updateImage(sourceImage, locationRegion, sourceImageRegion) {
        this.atlasManager.atlas.updateImage(this.bbox, sourceImage, locationRegion, sourceImageRegion);
    }
    _destroy() {
        this.atlasManager.removeImage(this.descriptor);
    }
}
/**
 * Manages allocation of images by id.
 */
class IdentifiedImageAtlasManager {
    constructor(imageAtlas) {
        this.atlas = imageAtlas;
        this._locations = new Map();
    }
    get size() {
        return this._locations.size;
    }
    getImage(id, retain = false) {
        const imageLocation = this._locations.get(id);
        if (retain && imageLocation) {
            imageLocation.retain();
        }
        return imageLocation || null;
    }
    allocateImage(descriptor, image) {
        const location = this.atlas.allocateImage(descriptor, image);
        if (location) {
            const image = new AllocatedImage(descriptor, location, this);
            this._locations.set(descriptor.id, image);
            return image;
        }
        return null;
    }
    removeImage(image) {
        const location = this._locations.get(image.id);
        if (location) {
            this.atlas.removeImage(location.bbox);
            this._locations.delete(image.id);
        }
    }
    contains(id) {
        return this._locations.has(id);
    }
    reserveLocation(descriptor) {
        const location = this.atlas.reserveLocation(descriptor);
        if (location) {
            const image = new AllocatedImage(descriptor, location, this);
            this._locations.set(descriptor.id, image);
            return image;
        }
        return null;
    }
}


/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ReferenceCounted; });
/**
 * Simple reference counting for shared entities that need explicit destruction.
 */
class ReferenceCounted {
    /**
     * Initializes reference count to 1.
     */
    constructor() {
        this._refCount = 1;
    }
    /**
     * Increments reference count.
     */
    retain() {
        if (this._refCount === 0) {
            throw new Error('Tried to retain a destroyed object.');
        }
        this._refCount++;
    }
    /**
     * Decrements reference count and, if it's reached 0, destroys the object.
     */
    release() {
        if (this._refCount === 0) {
            throw new Error('Tried to release a destroyed object.');
        }
        this._refCount--;
        if (this._refCount === 0) {
            this._destroy();
        }
    }
}


/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return DfFont; });
/* harmony import */ var _font__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(45);

const UNKNOWN_GLYPH = {
    id: -1,
    width: 0,
    height: 0,
    bearingX: 0,
    bearingY: 0,
    advance: 18
};
/**
 * Font whose glyphs are specified in distance field bitmaps. It's "margin" metric specifies glyph bitmap inner padding,
 * that is required to fit a "blurred" glyph image. This margin should be considered during layouting to draw glyphs of
 * proper sizes.
 */
class DfFont extends _font__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(id, xheight, margin) {
        super(id, xheight, UNKNOWN_GLYPH);
        this.margin = margin;
    }
}


/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Font; });
/**
 * Font is just a collection of glyph descriptions.
 */
class Font {
    /**
     * @param id Font id.
     * @param xheight The height of the "x" char in abstract points, in fact is used a the font size.
     * @param unknownGlyphInstance An instance of glyph to be served as a stub when nonexistent glyph
     *     is requested. Requesting nonexistent glyphs normally should not happen.
     *     The stub just allows to avoid tedious null checks in font clients.
     */
    constructor(id, xheight, unknownGlyphInstance) {
        this.id = id;
        this.xheight = xheight;
        this._unknownGlyphInstance = unknownGlyphInstance;
        this._glyphs = new Map();
    }
    /**
     * @return Glyph with specified id or unknown glyph instance.
     */
    getGlyph(glyphId) {
        const glyph = this._glyphs.get(glyphId);
        if (glyph) {
            return glyph;
        }
        else {
            console.warn('Wow-wow-wow, something went wrong, you should not request nonexistent glyphs');
            return this._unknownGlyphInstance;
        }
    }
    /**
     * @returns All stored glyphs.
     */
    getAllGlyphs() {
        return [...this._glyphs.values()];
    }
    /**
     * Adds glyph description.
     */
    addGlyph(glyph) {
        this._glyphs.set(glyph.id, glyph);
    }
    /**
     * Adds glyph descriptions from the iterable.
     */
    addAllGlyphs(glyphs) {
        for (const glyph of glyphs) {
            this.addGlyph(glyph);
        }
    }
}


/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApiImageProvider", function() { return ApiImageProvider; });
/* harmony import */ var _billboard_image_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(47);
/* harmony import */ var _util_hd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48);
/* harmony import */ var _util_hosts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(49);



/**
 * Image provider that gets images from specific API entry point.
 */
class ApiImageProvider extends _billboard_image_provider__WEBPACK_IMPORTED_MODULE_0__["ImageProvider"] {
    constructor(imageUrlTemplate) {
        super();
        this._imageUrlTemplate = imageUrlTemplate;
    }
    getImageUrl(id) {
        // API can return scaled images that allows us to request images according
        // to user's DPI and render them properly, non-integer numbers are accepted.
        return this._imageUrlTemplate
            .replace('{{hostAlias}}', Object(_util_hosts__WEBPACK_IMPORTED_MODULE_2__["getHostAliasByUid"])(id))
            .replace(/\{\{id\}\}/g, id)
            .replace('{{scale}}', Object(_util_hd__WEBPACK_IMPORTED_MODULE_1__["default"])().toString());
    }
}


/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImageProvider", function() { return ImageProvider; });
/**
 * Abstract image content provider, concrete implementations should specify the entry point in getImageUrl().
 */
class ImageProvider {
    /**
     * Gets image bitmap via an HTMLImageElement and a canvas.
     */
    getImage(id) {
        return new Promise((resolve, reject) => {
            const imageElement = new Image();
            imageElement.crossOrigin = 'anonymous';
            imageElement.onload = () => resolve(imageElement);
            imageElement.onerror = reject;
            imageElement.src = this.getImageUrl(id);
        });
    }
}


/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getDpr; });
/**
 * Gives the device pixel ration if it's greater than 1 and 1 otherwise. This's
 * here purely to be compatible with jsapi which does the same thing for reasons
 * unknows (thanks, kashey).
 *
 * @returns Capped device pixel ratio.
 */
function getDpr() {
    return devicePixelRatio > 1 ? devicePixelRatio : 1;
}


/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getHostAliasByUid", function() { return getHostAliasByUid; });
const HOST_ALIASES_N = 4;
function getHostAliasByUid(uid) {
    let sum = 0;
    for (let i = 0; i < uid.length; i++) {
        sum += uid.charCodeAt(i);
    }
    return (sum % HOST_ALIASES_N + 1).toString();
}


/***/ }),
/* 50 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ModelBufferWriter; });
/* harmony import */ var _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _util_buffer_writer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(36);


/**
 * Base class for 3D models buffer writers. It is not supposed to write indices, instead it writes vertices (possibly
 * duplicated) in order that correspond to triangular facets of the mesh.
 */
class ModelBufferWriter extends _util_buffer_writer__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor() {
        super(ModelBufferWriter.ATTRIBUTE_MAPPING.vertexByteSize);
    }
    /**
     * Writes a vertex to the vertex buffer.
     */
    _writeVertex(v, colorRgba8) {
        const vertexIdx = this.getCurrentVertexIdx();
        this._writeWorldCoordinate(v);
        this._writeFloat32(v.z);
        this._writeWord(colorRgba8);
        return vertexIdx;
    }
}
/**
 * Description of how attributes of vertices are packed into a vertex buffer.
 */
ModelBufferWriter.ATTRIBUTE_MAPPING = new _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__["AttributeMapping"]([
    [
        0 /* POSITION_HIGH */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        1 /* POSITION_LOW */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        3 /* HEIGHT */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ],
    [
        7 /* COLOR */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ]
]);


/***/ }),
/* 51 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TexturedPolylineBufferWriter; });
/* harmony import */ var _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _util_buffer_writer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(36);
/* harmony import */ var _textured_polyline_geometry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(52);
/* harmony import */ var _util_z_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(53);




/**
 * Writer of geometry data of polyline hulls.
 */
class TexturedPolylineBufferWriter extends _util_buffer_writer__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor() {
        super(TexturedPolylineBufferWriter.ATTRIBUTE_MAPPING.vertexByteSize);
    }
    /**
     * Generates a hull for a polyline and writes it to the writer.
     *
     * @param polyline The polyline to be written.
     * @param width Thickness of the polyline.
     * @param worldToPxFactor Ratio of world coordinates to pixels.
     * @param imageLocation Image location in atlas.
     * @param zIndex Z-index of the polyline.
     */
    writeTexturedPolyline(polyline, width, worldToPxFactor, imageLocation, zIndex) {
        Object(_textured_polyline_geometry__WEBPACK_IMPORTED_MODULE_2__["default"])(this, polyline.vertices, worldToPxFactor, imageLocation, width, Object(_util_z_index__WEBPACK_IMPORTED_MODULE_3__["intToZIndex"])(zIndex + 1));
        return this.endMesh();
    }
    /**
     * Writes a vertex to the vertex buffer.
     *
     * @param position Position of the vertex in world coordinates.
     * @param displacement Displacement vector, in most cases must be normalized, the width is considered in shaders.
     * @param halfWidth Thickness of the polyline.
     * @param patterWidth Width of the image that is repeated along the polyline.
     * @param patternHalfHeight Image half height multiplied by `sign(s)`, where `s` is a [-1; 1] distance to the
     * analytical polyline along segment's normal.
     * @param length Length of the polyline for current vertex, needed to correctly calculate image uv x coordinate.
     * @param uv UV coordinates of the image.
     * @param zIndex Z-index of the polyline.
     *
     * @return Index of the written vertex.
     */
    writeVertex(position, displacement, halfWidth, patternWidth, patternHalfHeight, length, uv, zIndex) {
        const vertexIdx = this.getCurrentVertexIdx();
        this._writeWorldCoordinate(position);
        this._writeFloat32(displacement.x);
        this._writeFloat32(displacement.y);
        this._writeHalfWords(uv.x, uv.y);
        this._writeFloat32(zIndex);
        this._writeFloat32(halfWidth);
        this._writeHalfWords(patternWidth, length);
        this._writeFloat32(patternHalfHeight);
        return vertexIdx;
    }
}
/** Description of how a writer stores vertex data. */
TexturedPolylineBufferWriter.ATTRIBUTE_MAPPING = new _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__["AttributeMapping"]([
    [
        0 /* POSITION_HIGH */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        1 /* POSITION_LOW */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        6 /* DISPLACEMENT */,
        {
            size: 2,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ],
    [
        4 /* UV */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: false
        }
    ],
    [
        9 /* PRIORITY */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ],
    [
        11 /* AUX */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ],
    [
        12 /* AUX1 */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: false
        }
    ],
    [
        13 /* AUX2 */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ]
]);


/***/ }),
/* 52 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return writeTexturedPolylineGeometry; });
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(23);

/**
 * Writes polyline image geometry (set of triangles that draw up a solid thick polyline) into a buffer writer.
 *
 * @param writer Output buffer writer.
 * @param polyline Polyline to be written.
 * @param worldToPxFactor Ratio of world coordinates to pixels.
 * @param imageLocation Image location in atlas.
 * @param width Thickness of the polyline.
 * @param z Z-index of the polyline.
 */
function writeTexturedPolylineGeometry(writer, polyline, worldToPxFactor, imageLocation, width, z) {
    const hWidth = width / 2;
    const patternWidth = imageLocation.maxX - imageLocation.minX;
    const patternHalfHeight = (imageLocation.maxY - imageLocation.minY) / 2;
    const segment = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0);
    const dir = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0);
    const prevDir = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0);
    const norm = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0);
    const normInv = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0);
    const uv = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["create"](imageLocation.minX, 0);
    let prevBottomRight = -1;
    let prevTopRight = -1;
    let length = 0;
    let prevLength = 0;
    for (let i = 1; i < polyline.length; i++) {
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["sub"](polyline[i], polyline[i - 1], segment);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["normalize"](segment, dir);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["rotate90"](dir, norm);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](norm, -1, normInv);
        // segment is written as a rectangle (two triangles)
        uv.y = imageLocation.minY;
        const topLeft = writer.writeVertex(polyline[i - 1], norm, hWidth, patternWidth, patternHalfHeight, length, uv, z);
        uv.y = imageLocation.maxY;
        const bottomLeft = writer.writeVertex(polyline[i - 1], normInv, hWidth, patternWidth, -patternHalfHeight, length, uv, z);
        // update length of the polyline in pixels
        length += _math_vector2__WEBPACK_IMPORTED_MODULE_0__["length"](segment) / worldToPxFactor;
        uv.y = imageLocation.minY;
        const topRight = writer.writeVertex(polyline[i], norm, hWidth, patternWidth, patternHalfHeight, length, uv, z);
        uv.y = imageLocation.maxY;
        const bottomRight = writer.writeVertex(polyline[i], normInv, hWidth, patternWidth, -patternHalfHeight, length, uv, z);
        // write line join that fills an empty space on corners
        if (1 < i && i < polyline.length) {
            uv.y = (imageLocation.maxY + imageLocation.minY) / 2;
            const joinPointIndex = writer.writeVertex(polyline[i - 1], _math_vector2__WEBPACK_IMPORTED_MODULE_0__["ZERO"], hWidth, patternWidth, 0, prevLength, uv, z);
            // find out where the fracture of segments is located to create correct join with minimum overdraw
            const turnLeft = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["crossZ"](prevDir, dir) > 0;
            if (turnLeft) {
                writer.writeIndices([
                    joinPointIndex, bottomLeft, prevBottomRight
                ]);
            }
            else {
                writer.writeIndices([
                    joinPointIndex, prevTopRight, topLeft
                ]);
            }
        }
        writer.writeIndices([
            topLeft, topRight, bottomLeft,
            topRight, bottomRight, bottomLeft
        ]);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["copy"](dir, prevDir);
        prevBottomRight = bottomRight;
        prevTopRight = topRight;
        prevLength = length;
    }
}


/***/ }),
/* 53 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intToZIndex", function() { return intToZIndex; });
const MIN_ZINDEX = -1 + Math.pow(2, 1 - 24); // epsilon is added (for normalized 24-bit value) to free up reserved value
function intToZIndex(x) {
    return Math.max(MIN_ZINDEX, x / 0x7fffff);
}


/***/ }),
/* 54 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImageManager", function() { return ImageManager; });
/**
 * Manages allocation of requested images. The same images can be requested multiple times from different places,
 * this class takes over duplication of HTTP requests/atlas allocations providing simple async interface for
 * getting allocated images.
 */
class ImageManager {
    constructor(atlas, provider) {
        this._atlas = atlas;
        this._provider = provider;
        this._requests = new Map();
    }
    /**
     * Returns image if it is already allocated. Pay attention that resulted allocated image is "retained",
     * so it must be released once it is passed to a responsible client.
     */
    getImage(id) {
        const image = this._atlas.getImage(id, true);
        if (image) {
            image.retain();
        }
        return image;
    }
    /**
     * Request image from image provider, if it is already allocated no request is made, but it is returned
     * wrapped into a resolved promise. Pay attention that resulted allocated image is "retained", so it must be
     * released once it is passed to a responsible client.
     */
    requestImage(id) {
        const allocatedImage = this._atlas.getImage(id, true);
        if (allocatedImage) {
            return Promise.resolve(allocatedImage);
        }
        else {
            const request = this._requests.get(id);
            if (request) {
                request.then((allocatedImage) => allocatedImage && allocatedImage.retain());
                return request;
            }
            else {
                const request = this._provider
                    .getImage(id)
                    .then((image) => {
                    this._requests.delete(id);
                    const { width, height } = image;
                    const allocatedImage = this._atlas.allocateImage({ id, width, height }, image);
                    if (!allocatedImage) {
                        throw new Error('Couldn\' allocated image');
                    }
                    else {
                        return allocatedImage;
                    }
                }, () => {
                    this._requests.delete(id);
                    throw new Error('Image request failed');
                });
                this._requests.set(id, request);
                return request;
            }
        }
    }
}


/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TexturedPolygonBufferRewriter; });
/* harmony import */ var _util_buffer_rewriter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(56);
/* harmony import */ var _textured_polygon_attribute_mapping__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(57);


class TexturedPolygonBufferRewriter extends _util_buffer_rewriter__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(buffers) {
        super(_textured_polygon_attribute_mapping__WEBPACK_IMPORTED_MODULE_1__["TEXTURED_POLYGON_ATTRIBUTE_MAPPING"], buffers);
    }
    /**
     * @param location Location of the polygon in memory.
     * @param imageLocation Location of the pattern in atlas.
     * @param imageScale How world coordinates relate to the image size.
     */
    rewriteUV(location, imageLocation, imageScale) {
        const uvOffset = this._getAttribOffset(4 /* UV */);
        const scaleOffset = this._getAttribOffset(11 /* AUX */);
        this._forEachVertex(location, (writer) => {
            writer.writeHalfWords(uvOffset, imageLocation.minX, imageLocation.minY);
            writer.writeHalfWords(uvOffset + 1, imageLocation.maxX - imageLocation.minX, imageLocation.maxY - imageLocation.minY);
            writer.writeFloat32(scaleOffset, imageScale);
        });
    }
}


/***/ }),
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return BufferRewriter; });
/* harmony import */ var _buffer_writer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(36);

/**
 * Class that is exposed as an interface for writing to a specific vertex attribute.
 */
class VertexWriter {
    constructor(vertexBuffer) {
        this._vertexBuffer = new Uint32Array(vertexBuffer.buffer, 0, vertexBuffer.length);
        this._vertexBufferFloat32View = new Float32Array(vertexBuffer.buffer, 0, vertexBuffer.length);
    }
    /**
     * Writes float attribute into specific position in buffer.
     *
     * @param attribOffset Offset of an attribute in words (4 bytes), get it from BufferRewriter#_getAttribOffset().
     * @param value Value to be written.
     */
    writeFloat32(attribOffset, value) {
        this._vertexBufferFloat32View[this.vertexOffset + attribOffset] = value;
    }
    /**
     * Writes a word attribute into specific position in buffer.
     *
     * @param attribOffset Offset of an attribute in words (4 bytes), get it from BufferRewriter#_getAttribOffset().
     * @param value Value to be written.
     */
    writeWord(attribOffset, value) {
        this._vertexBuffer[this.vertexOffset + attribOffset] = value;
    }
    /**
     * Writes two half word attribute values into specific position in buffer.
     *
     * @param attribOffset Offset of an attribute in words (4 bytes), get it from BufferRewriter#_getAttribOffset().
     * @param value Value to be written.
     */
    writeHalfWords(attribOffset, v1, v2) {
        this.writeWord(attribOffset, v2 << 16 | v1 & 0xffff);
    }
}
/**
 * Provides some utils for rewriting vertex attribute values, see VertexWriter and tests for some tips of how to do it.
 * TODO: consider supporting of separate buffers for different attributes, that will make this class less useful
 */
class BufferRewriter {
    constructor(attribMapping, buffers) {
        this._attribMapping = attribMapping;
        this._buffers = buffers;
    }
    /**
     * Walks over all vertices exposing VertexWriter for each one by calling the handler argument.
     */
    _forEachVertex(location, handler) {
        const vertexWriter = new VertexWriter(this._buffers[location.bufferIndex].vertexBuffer);
        const vertexByteSize = this._attribMapping.vertexByteSize;
        for (let i = 0; i < location.vertexByteLength; i += vertexByteSize) {
            vertexWriter.vertexOffset = (location.vertexByteOffset + i) / _buffer_writer__WEBPACK_IMPORTED_MODULE_0__["WORD_BYTE_SIZE"];
            handler(vertexWriter);
        }
    }
    /**
     * @returns Offset in words (4 bytes) of specific attribute in a vertex (format is defined by AttributeMapping).
     */
    _getAttribOffset(attrib) {
        const attribPointer = this._attribMapping.get(attrib);
        return attribPointer ? attribPointer.offset / _buffer_writer__WEBPACK_IMPORTED_MODULE_0__["WORD_BYTE_SIZE"] : -1;
    }
}


/***/ }),
/* 57 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TEXTURED_POLYGON_ATTRIBUTE_MAPPING", function() { return TEXTURED_POLYGON_ATTRIBUTE_MAPPING; });
/* harmony import */ var _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);

/**
 * Description of how attributes of vertices are packed into a vertex buffer.
 */
const TEXTURED_POLYGON_ATTRIBUTE_MAPPING = new _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__["AttributeMapping"]([
    [
        0 /* POSITION_HIGH */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        1 /* POSITION_LOW */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        4 /* UV */,
        {
            size: 4,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: false
        }
    ],
    [
        11 /* AUX */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ],
    [
        10 /* Z_INDEX */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ]
]);


/***/ }),
/* 58 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POLYGON_ATTRIBUTE_MAPPING", function() { return POLYGON_ATTRIBUTE_MAPPING; });
/* harmony import */ var _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);

/**
 * Description of how attributes of vertices are packed into a vertex buffer.
 */
const POLYGON_ATTRIBUTE_MAPPING = new _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__["AttributeMapping"]([
    [
        0 /* POSITION_HIGH */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        1 /* POSITION_LOW */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        7 /* COLOR */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    [
        10 /* Z_INDEX */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ]
]);


/***/ }),
/* 59 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BILLBOARD_RECTANGLE_ATTRIBUTE_MAPPING", function() { return BILLBOARD_RECTANGLE_ATTRIBUTE_MAPPING; });
/* harmony import */ var _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);

/** Description of how a writer stores vertex data. */
const BILLBOARD_RECTANGLE_ATTRIBUTE_MAPPING = new _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__["AttributeMapping"]([
    [
        2 /* ID */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    [
        0 /* POSITION_HIGH */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        1 /* POSITION_LOW */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        6 /* DISPLACEMENT */,
        {
            size: 2,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ],
    [
        4 /* UV */,
        {
            size: 2,
            type: 5122 /* SHORT */,
            normalized: true
        }
    ],
    [
        7 /* COLOR */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    [
        11 /* AUX */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ]
]);


/***/ }),
/* 60 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POINT_LABEL_ATTRIBUTE_MAPPING", function() { return POINT_LABEL_ATTRIBUTE_MAPPING; });
/* harmony import */ var _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);

/** Description of how a writer stores vertex data. */
const POINT_LABEL_ATTRIBUTE_MAPPING = new _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__["AttributeMapping"]([
    [
        2 /* ID */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    [
        0 /* POSITION_HIGH */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        1 /* POSITION_LOW */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        6 /* DISPLACEMENT */,
        {
            size: 2,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ],
    [
        4 /* UV */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: false
        }
    ],
    [
        7 /* COLOR */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    [
        8 /* OUTLINE_COLOR */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    [
        9 /* PRIORITY */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ],
    [
        11 /* AUX */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ]
]);


/***/ }),
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CURVED_LABEL_ATTRIBUTE_MAPPING", function() { return CURVED_LABEL_ATTRIBUTE_MAPPING; });
/* harmony import */ var _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);

/** Description of how a writer stores vertex data. */
const CURVED_LABEL_ATTRIBUTE_MAPPING = new _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__["AttributeMapping"]([
    [
        2 /* ID */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    [
        0 /* POSITION_HIGH */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        1 /* POSITION_LOW */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        6 /* DISPLACEMENT */,
        {
            size: 3,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ],
    [
        4 /* UV */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: false
        }
    ],
    [
        7 /* COLOR */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    [
        8 /* OUTLINE_COLOR */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    [
        9 /* PRIORITY */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ],
    [
        12 /* AUX1 */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    [
        13 /* AUX2 */,
        {
            size: 4,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        14 /* AUX3 */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    [
        15 /* AUX4 */,
        {
            size: 4,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        11 /* AUX */,
        {
            size: 2,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ]
]);


/***/ }),
/* 62 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POLYLINE_ATTRIBUTE_MAPPING", function() { return POLYLINE_ATTRIBUTE_MAPPING; });
/* harmony import */ var _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);

/**
 * Description of how attributes of vertices are packed into a vertex buffer.
 */
const POLYLINE_ATTRIBUTE_MAPPING = new _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__["AttributeMapping"]([
    /** Vertex world position. */
    [
        0 /* POSITION */,
        {
            size: 4,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    /** Normal to polyline segment the vertex belong to. */
    [
        5 /* NORMAL */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    /**
     * "UV" vertex that used to compute stroke and dashes. It's components:
     *
     *   - distance to the analytical polyline along segment's normal;
     *   - distance to the analytical polyline along segment.
     */
    [
        4 /* UV */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: false
        }
    ],
    /**
     * Vector with polyline's half width and dash style. It's components:
     *
     *   - half width;
     *   - length of a dash;
     *   - distance between dashes.
     */
    [
        11 /* AUX */,
        {
            size: 3,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    /**
     * Miter (i.e. how much displacement of the vertex is longer then the
     * normal).
     */
    [
        12 /* AUX1 */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ],
    /**
     * Limit on displacement tangent component.Applied to avoid geometry
     * glitches in over-degenerative cases.
     */
    [
        13 /* AUX2 */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ],
    /**
     * Distance to the first vertex along the polyline.
     */
    [
        14 /* AUX3 */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ],
    /** Polyline's color. */
    [
        7 /* COLOR */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    /** Polyline's Z index. */
    [
        10 /* Z_INDEX */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ]
]);


/***/ }),
/* 63 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TileProviderWorkerClient", function() { return TileProviderWorkerClient; });
/* harmony import */ var _util_worker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(30);

class TileProviderWorkerClient extends _util_worker__WEBPACK_IMPORTED_MODULE_0__["WebWorkerClient"] {
}


/***/ }),
/* 64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TileProviderMessageType", function() { return TileProviderMessageType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "geometryTransferableExtractor", function() { return geometryTransferableExtractor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "meshTransferableExtractor", function() { return meshTransferableExtractor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "labelTransferableExtractor", function() { return labelTransferableExtractor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tileTransferableExtractor", function() { return tileTransferableExtractor; });
/* harmony import */ var _primitive_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(65);

var TileProviderMessageType;
(function (TileProviderMessageType) {
    TileProviderMessageType[TileProviderMessageType["INIT"] = 0] = "INIT";
    TileProviderMessageType[TileProviderMessageType["TILE_URL_UPDATE"] = 1] = "TILE_URL_UPDATE";
    TileProviderMessageType[TileProviderMessageType["TILE_REQUEST_BATCH"] = 2] = "TILE_REQUEST_BATCH";
    TileProviderMessageType[TileProviderMessageType["TILE_REQUEST_CANCEL_BATCH"] = 3] = "TILE_REQUEST_CANCEL_BATCH";
    TileProviderMessageType[TileProviderMessageType["TILE_RESPONSE"] = 4] = "TILE_RESPONSE";
    TileProviderMessageType[TileProviderMessageType["TILE_ERROR"] = 5] = "TILE_ERROR";
    TileProviderMessageType[TileProviderMessageType["GEOMETRY_RESPONSE"] = 6] = "GEOMETRY_RESPONSE";
    TileProviderMessageType[TileProviderMessageType["LABELS_RESPONSE"] = 7] = "LABELS_RESPONSE";
    TileProviderMessageType[TileProviderMessageType["MESH_REQUEST"] = 8] = "MESH_REQUEST";
    TileProviderMessageType[TileProviderMessageType["MESH_REQUEST_CANCEL"] = 9] = "MESH_REQUEST_CANCEL";
    TileProviderMessageType[TileProviderMessageType["MESH_RESPONSE"] = 10] = "MESH_RESPONSE";
    TileProviderMessageType[TileProviderMessageType["MESH_ERROR"] = 11] = "MESH_ERROR";
})(TileProviderMessageType || (TileProviderMessageType = {}));
const geometryTransferableExtractor = function (message, transferables = []) {
    Object(_primitive_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__["extractTransferables"])(message.polygonPages, transferables);
    Object(_primitive_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__["extractTransferables"])(message.transparentPolygonPages, transferables);
    Object(_primitive_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__["extractTransferables"])(message.texturedPolygonPages, transferables);
    Object(_primitive_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__["extractTransferables"])(message.meshPages, transferables);
    Object(_primitive_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__["extractTransferables"])(message.polylinePages, transferables);
    return transferables;
};
const meshTransferableExtractor = function (message) {
    const transferables = [];
    Object(_primitive_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__["extractTransferables"])(message.pages, transferables);
    return transferables;
};
const labelTransferableExtractor = function (message, transferables = []) {
    Object(_primitive_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__["extractTransferables"])(message.pointLabelPages, transferables);
    Object(_primitive_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__["extractTransferables"])(message.pointLabelBackgroundPages, transferables);
    Object(_primitive_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__["extractTransferables"])(message.curvedLabelPages, transferables);
    return transferables;
};
const tileTransferableExtractor = function (message) {
    const transferables = [];
    geometryTransferableExtractor(message, transferables);
    labelTransferableExtractor(message, transferables);
    return transferables;
};


/***/ }),
/* 65 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extractTransferables", function() { return extractTransferables; });
/**
 * Extract ArrayBuffers (that are tansferable) from pages.
 */
function extractTransferables(pages, output) {
    for (const page of pages) {
        output.push(page.vertexBuffer.buffer, page.indexBuffer.buffer);
    }
}


/***/ }),
/* 66 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TRANSPARENT_POLYGON_ATTRIBUTE_MAPPING", function() { return TRANSPARENT_POLYGON_ATTRIBUTE_MAPPING; });
/* harmony import */ var _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _polygon_attribute_mapping__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(58);


/**
 * Description of how attributes of vertices are packed into a vertex buffer.
 */
const TRANSPARENT_POLYGON_ATTRIBUTE_MAPPING = new _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__["AttributeMapping"](_polygon_attribute_mapping__WEBPACK_IMPORTED_MODULE_1__["POLYGON_ATTRIBUTE_MAPPING"]);


/***/ }),
/* 67 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return IdleTaskQueue; });
/* harmony import */ var _priority_queue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(68);

const MAX_DEQUEUE_TIMEOUT = 1000; // ms
// TODO: remove this shim when all supported browsers implement it
const SHIMMED_PROCESSING_DURATION_MS = 25;
window.cancelIdleCallback = window.cancelIdleCallback || window.clearTimeout;
window.requestIdleCallback = window.requestIdleCallback || function (handler) {
    const startTime = performance.now();
    return setTimeout(() => {
        handler({
            didTimeout: false,
            timeRemaining: () => Math.max(0, SHIMMED_PROCESSING_DURATION_MS - (performance.now() - startTime))
        });
    });
};
/**
 * It is a task queue. Tasks are dequeued during idle period.
 */
class IdleTaskQueue {
    constructor() {
        this._queue = new _priority_queue__WEBPACK_IMPORTED_MODULE_0__["default"]();
        this._dequeueIdleHandle = 0;
    }
    destroy() {
        cancelIdleCallback(this._dequeueIdleHandle);
    }
    /**
     * Enqueues a task to the queue.
     *
     * @param task The task.
     */
    enqueue(task) {
        this._queue.enqueue(task);
        this._run();
    }
    _dequeue(deadline) {
        const queue = this._queue;
        if (queue.isEmpty()) {
            return;
        }
        if (deadline.didTimeout) {
            queue.dequeue().execute();
        }
        else {
            while (deadline.timeRemaining() && !queue.isEmpty()) {
                queue.dequeue().execute();
            }
        }
        this._dequeueIdleHandle = 0;
        if (!this._queue.isEmpty()) {
            this._run();
        }
    }
    _run() {
        if (!this._dequeueIdleHandle) {
            this._dequeueIdleHandle = requestIdleCallback((deadline) => {
                this._dequeue(deadline);
            }, { timeout: MAX_DEQUEUE_TIMEOUT });
        }
    }
}


/***/ }),
/* 68 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PriorityQueue; });
/* harmony import */ var _binary_heap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(69);

function itemComparator(a, b) {
    return a.priority - b.priority;
}
/**
 * Priority queue based on a heap.
 */
class PriorityQueue {
    /**
     * Constructs new empty priority queue.
     */
    constructor() {
        this._heap = new _binary_heap__WEBPACK_IMPORTED_MODULE_0__["default"](itemComparator);
    }
    /**
     * Adds an item into the queue.
     *
     * @param item The item.
     */
    enqueue(item) {
        this._heap.insert(item);
    }
    /**
     * Removes next item from the queue.
     *
     * @returns The next item or `undefined` if the queue's empty.
     */
    dequeue() {
        return this._heap.pop();
    }
    /**
     * Checks if the queue has no items in it.
     *
     * @returns `true` if there're no items it the queue and `false` otherwise.
     */
    isEmpty() {
        return this._heap.size === 0;
    }
}


/***/ }),
/* 69 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return BinaryHeap; });
/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38);
/* harmony import */ var _comparator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(39);


/**
 * Computes index of the parent of an item.
 *
 * @param idx Index of the item.
 * @returns Index of the parent.
 */
function getParentIdx(idx) {
    return (idx + 1 >> 1) - 1;
}
/**
 * Computes index of the left child of an item.
 *
 * @param idx Index of the item.
 * @returns Index of the child.
 */
function getFirstChildIdx(idx) {
    return (idx + 1 << 1) - 1;
}
class BinaryHeap {
    /**
     * Constructs a new empty heap. Order of items in the heap will be defined
     * by a given comparator.
     *
     * @param comparator The comparator.
     */
    constructor(comparator = _comparator__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_COMPARATOR"]) {
        // TODO(dmikis) Investigate preallocation.
        this._items = [];
        this._comparator = comparator;
    }
    /**
     * Inserts an item into the heap.
     *
     * @param item The item to be inserted.
     */
    insert(item) {
        const items = this._items;
        const comparator = this._comparator;
        // Insert the new item as bottom right-most child of the heap.
        let idx = items.push(item) - 1;
        let parentIdx = getParentIdx(idx);
        // Walk the heap upward and restore heap property on the way.
        while (parentIdx > -1 &&
            comparator(items[idx], items[parentIdx]) > 0) {
            Object(_array__WEBPACK_IMPORTED_MODULE_0__["swap"])(items, idx, parentIdx);
            idx = parentIdx;
            parentIdx = getParentIdx(idx);
        }
    }
    /**
     * Removes "maximum" item from the head.
     *
     * @returns The removed item or `undefined` is the heap's empty.
     */
    pop() {
        const items = this._items;
        if (items.length === 0) {
            return undefined;
        }
        const newSize = items.length - 1;
        // Place max item at the end of the items array.
        Object(_array__WEBPACK_IMPORTED_MODULE_0__["swap"])(items, 0, newSize);
        // Walk downward from the new root to restore heap property.
        let idx = 0;
        let childIdx = 1;
        const comparator = this._comparator;
        while (childIdx < newSize) {
            if (childIdx + 1 < newSize &&
                comparator(items[childIdx], items[childIdx + 1]) < 0) {
                childIdx += 1;
            }
            if (comparator(items[idx], items[childIdx]) > 0) {
                break;
            }
            Object(_array__WEBPACK_IMPORTED_MODULE_0__["swap"])(items, idx, childIdx);
            idx = childIdx;
            childIdx = getFirstChildIdx(childIdx);
        }
        // Remove previously placed at the end previous max item.
        return items.pop();
    }
    /**
     * @returns "Maximum" item in the heap or `undefined` if the head is empty.
     */
    peek() {
        return this._items[0];
    }
    /**
     * @returns Iterator over all items in the heap. Note that order of items
     *      is undefined.
     */
    *[Symbol.iterator]() {
        for (const item of this._items) {
            yield item;
        }
    }
    /**
     * @returns Number of items in the heap.
     */
    get size() {
        return this._items.length;
    }
}


/***/ }),
/* 70 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RenderablePolygon; });
/* harmony import */ var _renderable_primitive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71);

/**
 * Allocated in GPU memory polygon.
 */
class RenderablePolygon extends _renderable_primitive__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(memorySubChunk, isOpaque) {
        super(memorySubChunk);
        this.isOpaque = isOpaque;
    }
}


/***/ }),
/* 71 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RenderablePrimitive; });
/* harmony import */ var _util_ref_counted__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43);

/**
 * Base class for primitive objects that are ready to be fed to the renderer.
 */
class RenderablePrimitive extends _util_ref_counted__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(memorySubChunk) {
        super();
        this.memorySubChunk = memorySubChunk;
    }
    _destroy() {
        this.memorySubChunk.destroy();
    }
}


/***/ }),
/* 72 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RenderableTexturedPolygon; });
/* harmony import */ var _renderable_primitive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71);

class RenderableTexturedPolygon extends _renderable_primitive__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(memoryChunk, allocatedImage) {
        super(memoryChunk);
        this._allocatedImage = allocatedImage;
        this.atlas = allocatedImage.atlasManager.atlas;
        allocatedImage.retain();
    }
    _destroy() {
        this._allocatedImage.release();
        super._destroy();
    }
}


/***/ }),
/* 73 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RenderablePolyline; });
/* harmony import */ var _renderable_primitive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71);

class RenderablePolyline extends _renderable_primitive__WEBPACK_IMPORTED_MODULE_0__["default"] {
}


/***/ }),
/* 74 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RenderableTexturedPolyline; });
/* harmony import */ var _renderable_polyline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(73);

class RenderableTexturedPolyline extends _renderable_polyline__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(memoryChunk, allocatedImage) {
        super(memoryChunk);
        this._allocatedImage = allocatedImage;
        this.atlas = allocatedImage.atlasManager.atlas;
        allocatedImage.retain();
    }
    _destroy() {
        this._allocatedImage.release();
        super._destroy();
    }
}


/***/ }),
/* 75 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RenderableModel; });
/* harmony import */ var _renderable_primitive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71);

/**
 * A general primitive that is best suitable for storing simple colored 3D models.
 */
class RenderableModel extends _renderable_primitive__WEBPACK_IMPORTED_MODULE_0__["default"] {
}


/***/ }),
/* 76 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POLYGON_EXTRACTOR", function() { return POLYGON_EXTRACTOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TEXTURED_POLYGON_EXTRACTOR", function() { return TEXTURED_POLYGON_EXTRACTOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POLYLINE_EXTRACTOR", function() { return POLYLINE_EXTRACTOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TEXTURED_POLYLINE_EXTRACTOR", function() { return TEXTURED_POLYLINE_EXTRACTOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POINT_EXTRACTOR", function() { return POINT_EXTRACTOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POINT_LABEL_EXTRACTOR", function() { return POINT_LABEL_EXTRACTOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CURVED_LABEL_EXTRACTOR", function() { return CURVED_LABEL_EXTRACTOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MODEL_EXTRACTOR", function() { return MODEL_EXTRACTOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EXTERNAL_MESH_EXTRACTOR", function() { return EXTERNAL_MESH_EXTRACTOR; });
const POLYGON_EXTRACTOR = (data) => flat(map('polygons', data));
const TEXTURED_POLYGON_EXTRACTOR = (data) => flat(map('texturedPolygons', data));
const POLYLINE_EXTRACTOR = (data) => flat(map('polylines', data));
const TEXTURED_POLYLINE_EXTRACTOR = (data) => flat(map('texturedPolylines', data));
const POINT_EXTRACTOR = (data) => flat(map('points', data));
const POINT_LABEL_EXTRACTOR = (data) => flat(map('pointLabels', data));
const CURVED_LABEL_EXTRACTOR = (data) => flat(map('curvedLabels', data));
const MODEL_EXTRACTOR = (data) => flat(map('models', data));
const EXTERNAL_MESH_EXTRACTOR = (data) => flat(map('externalMeshes', data));
/**
 * Maps list of TileData's into list of specified primitives.
 */
function* map(type, data) {
    for (const portion of data) {
        yield portion[type];
    }
}
/**
 * Flatten two dimensional list of primitives in a single dimensional one.
 */
function* flat(primitives) {
    for (const portion of primitives) {
        if (portion) {
            yield* portion;
        }
    }
}


/***/ }),
/* 77 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RenderablePrimitiveManager; });
/* harmony import */ var _primitive_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(78);

/**
 * Manager of primitives that have a single assiciated renderable primitive. The "management" is pretty straightforward:
 * it directly adds/removes associated primitives into the storage.
 */
class RenderablePrimitiveManager extends _primitive_manager__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(primitivesStorage) {
        super();
        this._primitivesStorage = primitivesStorage;
    }
    updateScene(toShow, toHide) {
        this._primitivesStorage.add(...toShow);
        this._primitivesStorage.delete(...toHide);
    }
    destroyPrimitives(_toDestroy) {
        // no need to destroy anything, RenderablePrimitive are released when removed from primmitive storage
    }
}


/***/ }),
/* 78 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PrimitiveManager; });
/**
 * Often primitives can't be dirrectly added into or removed from scene, there can be some specific (business) logic
 * associated with these operations. This class provides basic methods for such implementations that
 * allows to manage primitives of all types in the same manner.
 */
class PrimitiveManager {
    destroy() { }
}


/***/ }),
/* 79 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PrimitiveSetStorage; });
/* harmony import */ var _util_event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14);

/**
 * Primitive storage that stores primitive in a set. It acts as a primitive provider as well.
 */
class PrimitiveSetStorage {
    constructor() {
        this._primitiveSet = new Set();
        this.onUpdate = new _util_event_emitter__WEBPACK_IMPORTED_MODULE_0__["VoidEventEmitter"]();
    }
    get primitives() {
        return this._primitiveSet;
    }
    add(...primitives) {
        for (const primitive of primitives) {
            primitive.retain();
            this._primitiveSet.add(primitive);
        }
        if (primitives.length > 0) {
            this.onUpdate.fire();
        }
    }
    delete(...primitives) {
        for (const primitive of primitives) {
            if (this._primitiveSet.delete(primitive)) {
                primitive.release();
            }
        }
        if (primitives.length > 0) {
            this.onUpdate.fire();
        }
    }
    clear() {
        this._primitiveSet.clear();
        this.onUpdate.fire();
    }
}


/***/ }),
/* 80 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PolygonManager; });
/* harmony import */ var _renderable_primitive_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(77);

/**
 * Polygons should be separated by opaqueness and there are two distinct primitive providers
 * for them: opaque and tansparent. That is what this manager takes care of.
 */
class PolygonManager extends _renderable_primitive_manager__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(opaquePolygonStorage, transparentPolygonStorage) {
        super(opaquePolygonStorage);
        this._opaquePolygonStorage = opaquePolygonStorage;
        this._transparentPolygonStorage = transparentPolygonStorage;
    }
    updateScene(toShow, toHide) {
        for (const primitive of toShow) {
            if (primitive.isOpaque) {
                this._opaquePolygonStorage.add(primitive);
            }
            else {
                this._transparentPolygonStorage.add(primitive);
            }
        }
        for (const primitive of toHide) {
            if (primitive.isOpaque) {
                this._opaquePolygonStorage.delete(primitive);
            }
            else {
                this._transparentPolygonStorage.delete(primitive);
            }
        }
    }
}


/***/ }),
/* 81 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return DisappearingPrimitiveSetStorage; });
/* harmony import */ var _primitive_set_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(79);

/**
 * Simple primitive set storage that distinguish visible/hidden primitives. It also acts as a primitive provider.
 */
class DisappearingPrimitiveSetStorage extends _primitive_set_storage__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super();
        this._visiblePrimitives = new Set();
    }
    get primitives() {
        return this.visiblePrimitives;
    }
    get visiblePrimitives() {
        return this._visiblePrimitives;
    }
    add(...primitives) {
        super.add(...primitives);
        this.show(...primitives);
    }
    delete(...primitives) {
        this.hide(...primitives);
        super.delete(...primitives);
    }
    show(...primitives) {
        for (const primitive of primitives) {
            if (this._primitiveSet.has(primitive)) {
                this._visiblePrimitives.add(primitive);
            }
        }
    }
    hide(...primitives) {
        for (const primitive of primitives) {
            this._visiblePrimitives.delete(primitive);
        }
    }
    _isAllowedToShowPrimitive(primitive) {
        return this._primitiveSet.has(primitive);
    }
}


/***/ }),
/* 82 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return DelayedDisappearingPrimitiveSetStorage; });
/* harmony import */ var _util_iterable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);
/* harmony import */ var _disappearing_primitive_set_storage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(81);


/**
 * Primitive storage that stores primitive in a set. It acts as a primitive provider as well.
 */
class DelayedDisappearingPrimitiveSetStorage extends _disappearing_primitive_set_storage__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor(appearingEffectDuration) {
        super();
        this._appearingEffectDuration = appearingEffectDuration;
        this._scheduledRemoves = new Map();
        this._timeoutIds = new Set();
    }
    get primitives() {
        return this._primitiveSet;
    }
    add(...primitives) {
        // primitives that are scheduled for removing was not removed "physically", that is why
        // they should be filtered out to prevent multiple adding of the same primitive in parent
        const notScheduledForRemovePrimitives = [];
        for (const primitive of primitives) {
            const primitivesToDelete = this._scheduledRemoves.get(primitive);
            if (primitivesToDelete) {
                // if this primitive is scheduled for removing it is deleted from its batch,
                // thus canceling the removing in the callback
                primitivesToDelete.delete(primitive);
                this._scheduledRemoves.delete(primitive);
            }
            else {
                notScheduledForRemovePrimitives.push(primitive);
            }
        }
        super.add(...notScheduledForRemovePrimitives);
        this.show(...notScheduledForRemovePrimitives);
    }
    delete(...primitives) {
        this.hide(...primitives);
        // primitives are batched in a set to be deleted in one setTimeout callback for performance,
        // filter out primitives which removing was already scheduled
        const primitivesToDelete = new Set(Object(_util_iterable__WEBPACK_IMPORTED_MODULE_0__["filterIterable"])(primitives, (primitive) => !this._scheduledRemoves.has(primitive)));
        if (primitivesToDelete.size > 0) {
            const timeoutId = setTimeout(() => {
                // primitivesToDelete contains relevant for removing primitives, it can be updated in the add() method
                // if a primitive is added back, thus, in fact, canceling removing of this specific primitive
                super.delete(...primitivesToDelete);
                for (const primitive of primitivesToDelete) {
                    this._scheduledRemoves.delete(primitive);
                }
                this._timeoutIds.delete(timeoutId);
            }, this._appearingEffectDuration);
            for (const primitive of primitivesToDelete) {
                this._scheduledRemoves.set(primitive, primitivesToDelete);
            }
            this._timeoutIds.add(timeoutId);
        }
    }
    destroy() {
        for (const timeoutId of this._timeoutIds) {
            clearTimeout(timeoutId);
        }
    }
    _isAllowedToShowPrimitive(primitive) {
        return super._isAllowedToShowPrimitive(primitive) && !this._scheduledRemoves.has(primitive);
    }
}


/***/ }),
/* 83 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ZoomFilterablePrimitiveManager; });
/* harmony import */ var _renderable_primitive_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(77);
/* harmony import */ var _util_iterable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);


/**
 * It is required to hide some primitives (that don't scale with zoom, e.g. labels or icons) by "too irrelevant" zoom,
 * to prevent mess of collapsed objects on the screen. This primitive manager is a temporary solution,
 * proper handling of zoom slices will replace it.
 */
// TODO: this manager is a tmp solution, correct handling of zoom slices is going to replace it
class ZoomFilterablePrimitiveManager extends _renderable_primitive_manager__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(primitivesStorage, camera) {
        super(primitivesStorage);
        this._disappearingPrimitivesStorage = primitivesStorage;
        this._camera = camera;
        this._primitives = new Set();
        this._prevZoom = camera.zoom;
        this._zoomUpdateListener = this._onZoomUpdated.bind(this);
        this._camera.onUpdate.addListener(this._zoomUpdateListener);
    }
    updateScene(toShow, toHide) {
        // save primitives to filter them later
        super.updateScene(Object(_util_iterable__WEBPACK_IMPORTED_MODULE_1__["mapIterable"])(toShow, (primitive) => {
            this._primitives.add(primitive);
            return primitive;
        }), Object(_util_iterable__WEBPACK_IMPORTED_MODULE_1__["mapIterable"])(toHide, (primitive) => {
            this._primitives.delete(primitive);
            return primitive;
        }));
        // check if there are added primitives that could be removed by zoom restrictions
        this._updateZoomVisibility();
    }
    _onZoomUpdated() {
        if (this._prevZoom !== this._camera.zoom) {
            this._updateZoomVisibility();
            this._prevZoom = this._camera.zoom;
        }
    }
    _updateZoomVisibility() {
        const zoom = this._camera.zoom;
        this._disappearingPrimitivesStorage.show(...Object(_util_iterable__WEBPACK_IMPORTED_MODULE_1__["filterIterable"])(this._primitives, ({ minZoom }) => zoom >= minZoom));
        this._disappearingPrimitivesStorage.hide(...Object(_util_iterable__WEBPACK_IMPORTED_MODULE_1__["filterIterable"])(this._primitives, ({ minZoom }) => zoom < minZoom));
    }
    destroy() {
        this._camera.onUpdate.removeListener(this._zoomUpdateListener);
    }
}


/***/ }),
/* 84 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ExternalMeshPrimitiveManager; });
/* harmony import */ var _worker_tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(64);
/* harmony import */ var _render_memory_sub_chunk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(40);
/* harmony import */ var _primitive_model_model_buffer_writer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(50);
/* harmony import */ var _primitive_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(78);
/* harmony import */ var _primitive_model_renderable_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(75);
/* harmony import */ var _util_worker__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(30);






/**
 * External meshes come in polygons (kind of building outlines). This manager controls quering external meshes
 * according to added polygons, as many of them can share the same mesh (usually across multiple tiles).
 */
class ExternalMeshPrimitiveManager extends _primitive_manager__WEBPACK_IMPORTED_MODULE_3__["default"] {
    constructor(primitivesStorage, geometryProvider, memoryManager) {
        super();
        this._primitivesStorage = primitivesStorage;
        this._tileProvider = geometryProvider;
        this._memoryManager = memoryManager;
        this._externalMeshes = new Map();
    }
    updateScene(toShow, toHide) {
        for (const primitive of toShow) {
            this._addPrimitive(primitive);
        }
        for (const primitive of toHide) {
            this._removePrimitive(primitive);
        }
    }
    _addPrimitive(primitive) {
        const id = getFullMeshId(primitive);
        let external = this._externalMeshes.get(id);
        if (!external) {
            external = {
                visiblePolygons: new Set(),
                isVisible: false
            };
            this._externalMeshes.set(id, external);
            this._tileProvider.request({
                type: _worker_tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__["TileProviderMessageType"].MESH_REQUEST,
                responseType: _worker_tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__["TileProviderMessageType"].MESH_RESPONSE,
                errorType: _worker_tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__["TileProviderMessageType"].MESH_ERROR,
                mesh: primitive,
                requestId: _util_worker__WEBPACK_IMPORTED_MODULE_5__["NO_ID"]
            }).then((response) => {
                const external = this._externalMeshes.get(id);
                if (external && !external.isVisible) {
                    const location = response.location;
                    const chunks = response.pages.map((page) => this._memoryManager.allocate(page.vertexBuffer, page.indexBuffer, _primitive_model_model_buffer_writer__WEBPACK_IMPORTED_MODULE_2__["default"].ATTRIBUTE_MAPPING));
                    external.mesh = new _primitive_model_renderable_model__WEBPACK_IMPORTED_MODULE_4__["default"](new _render_memory_sub_chunk__WEBPACK_IMPORTED_MODULE_1__["default"](chunks[location.bufferIndex], location));
                    external.isVisible = true;
                    this._primitivesStorage.add(external.mesh);
                    chunks.forEach((chunk) => chunk.release());
                }
            });
        }
        external.visiblePolygons.add(primitive);
    }
    _removePrimitive(primitive) {
        const id = getFullMeshId(primitive);
        const external = this._externalMeshes.get(id);
        if (external) {
            external.visiblePolygons.delete(primitive);
            // destroy external mesh if there is no visible polygons remaining
            if (external.visiblePolygons.size === 0) {
                this._externalMeshes.delete(id);
                if (external.mesh) {
                    external.mesh.release();
                    this._primitivesStorage.delete(external.mesh);
                    external.isVisible = false;
                }
                else {
                    // if no mesh yet returned cancel request
                    this._tileProvider.sendMessage({
                        type: _worker_tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__["TileProviderMessageType"].MESH_REQUEST_CANCEL,
                        mesh: primitive
                    });
                }
            }
        }
    }
}
function getFullMeshId(mesh) {
    return mesh.objectId + mesh.meshId;
}


/***/ }),
/* 85 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RenderableBillboardRectangle; });
/* harmony import */ var _renderable_primitive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71);

class RenderableBillboardRectangle extends _renderable_primitive__WEBPACK_IMPORTED_MODULE_0__["default"] {
}


/***/ }),
/* 86 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZoomRestrictedLabel", function() { return ZoomRestrictedLabel; });
/* harmony import */ var _primitive_label_renderable_label__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(87);

class ZoomRestrictedLabel extends _primitive_label_renderable_label__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(memorySubChunk, atlas, minZoom, background) {
        super(memorySubChunk, atlas, background);
        this.minZoom = minZoom;
    }
}


/***/ }),
/* 87 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RenderableLabel; });
/* harmony import */ var _renderable_primitive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71);

/**
 * Allocated in GPU memory label.
 */
class RenderableLabel extends _renderable_primitive__WEBPACK_IMPORTED_MODULE_0__["default"] {
    /**
     * Constructs a new renderable label.
     *
     * @param memorySubChunk
     * @param atlas
     * @param background
     */
    constructor(memorySubChunk, atlas, background) {
        super(memorySubChunk);
        this.atlas = atlas;
        this.background = background;
        if (background) {
            background.retain();
        }
    }
    _destroy() {
        if (this.background) {
            this.background.release();
        }
        super._destroy();
    }
}


/***/ }),
/* 88 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZoomRestrictedIcon", function() { return ZoomRestrictedIcon; });
/* harmony import */ var _primitive_icon_renderable_icon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(89);

class ZoomRestrictedIcon extends _primitive_icon_renderable_icon__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(memorySubChunk, allocatedImage, minZoom) {
        super(memorySubChunk, allocatedImage);
        this.minZoom = minZoom;
    }
}


/***/ }),
/* 89 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RenderableIcon; });
/* harmony import */ var _image_renderable_image__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(90);

class RenderableIcon extends _image_renderable_image__WEBPACK_IMPORTED_MODULE_0__["default"] {
}


/***/ }),
/* 90 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RenderableImage; });
/* harmony import */ var _textured_renderable_primitive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91);

class RenderableImage extends _textured_renderable_primitive__WEBPACK_IMPORTED_MODULE_0__["default"] {
}


/***/ }),
/* 91 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TexturedRenderablePrimitive; });
/* harmony import */ var _renderable_primitive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71);

class TexturedRenderablePrimitive extends _renderable_primitive__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(memoryChunk, allocatedImage) {
        super(memoryChunk);
        this._allocatedImage = allocatedImage;
        this.atlas = allocatedImage.atlasManager.atlas;
        this._allocatedImage.retain();
    }
    _destroy() {
        this._allocatedImage.release();
        super._destroy();
    }
}


/***/ }),
/* 92 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TaskQueue; });
/* harmony import */ var _priority_queue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(68);
/* harmony import */ var _util_event_emitter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(14);


const DEQUEUE_TIMEOUT = 1; // ms
/**
 * Prioritized task queue.
 */
class TaskQueue {
    /**
     * Constructs an empty task queue.
     */
    constructor() {
        this._queue = new _priority_queue__WEBPACK_IMPORTED_MODULE_0__["default"]();
        this._frozen = false;
        this._dequeueTimeoutHandle = 0;
        this.onEmpty = new _util_event_emitter__WEBPACK_IMPORTED_MODULE_1__["VoidEventEmitter"]();
    }
    /**
     * Destroys the queue. Any remaining tasks won't be executed.
     */
    destroy() {
        clearTimeout(this._dequeueTimeoutHandle);
    }
    /**
     * Enqueues a task to the queue and schedules processing of the queue.
     *
     * @param task The task.
     * @returns Promise that will be fullfilled when the task successfully
     *      finishes or rejected if there's an error.
     */
    enqueue(task) {
        if (!this._frozen) {
            this._setDequeueTimeout();
        }
        return new Promise((resolve, reject) => {
            this._queue.enqueue({
                execute() {
                    try {
                        task.execute();
                        resolve();
                    }
                    catch (error) {
                        reject(error);
                    }
                },
                priority: task.priority
            });
        });
    }
    isEmpty() {
        return this._queue.isEmpty();
    }
    freeze() {
        if (this._dequeueTimeoutHandle) {
            clearTimeout(this._dequeueTimeoutHandle);
            this._dequeueTimeoutHandle = 0;
        }
        this._frozen = true;
    }
    unfreeze() {
        this._frozen = false;
        if (!this._queue.isEmpty()) {
            this._setDequeueTimeout();
        }
    }
    _dequeue() {
        const task = this._queue.dequeue();
        if (task) {
            task.execute();
        }
        if (this._queue.isEmpty()) {
            this._dequeueTimeoutHandle = 0;
            this.onEmpty.fire();
        }
        else {
            this._dequeueTimeoutHandle = setTimeout(() => this._dequeue(), DEQUEUE_TIMEOUT);
        }
    }
    _setDequeueTimeout() {
        if (!this._dequeueTimeoutHandle) {
            this._dequeueTimeoutHandle = setTimeout(() => this._dequeue(), DEQUEUE_TIMEOUT);
        }
    }
}


/***/ }),
/* 93 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MouseDragController", function() { return MouseDragController; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollZoomController", function() { return ScrollZoomController; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CameraMouseController", function() { return CameraMouseController; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderCameraState", function() { return renderCameraState; });
/* harmony import */ var _src_vector_render_engine_util_delegator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(94);
/* harmony import */ var _src_vector_render_engine_math_vector2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(23);


class MouseDragController extends _src_vector_render_engine_util_delegator__WEBPACK_IMPORTED_MODULE_0__["DelegatorBase"] {
    constructor(target) {
        super();
        this._target = target;
        this._pressedButton = -1 /* NONE */;
        this._prevMouseCoords = _src_vector_render_engine_math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](0, 0);
        target.addEventListener('mousedown', this);
        target.addEventListener('click', this);
        target.addEventListener('contextmenu', this);
    }
    handleEvent(e) {
        switch (e.type) {
            case 'click':
            case 'contextmenu':
                e.preventDefault();
                break;
            case 'mousedown':
                if (this._pressedButton === -1 /* NONE */) {
                    this._pressedButton = e.button;
                    this._prevMouseCoords.x = e.clientX;
                    this._prevMouseCoords.y = e.clientY;
                    document.body.addEventListener('mousemove', this);
                    document.body.addEventListener('mouseup', this);
                }
                e.preventDefault();
                break;
            case 'mousemove':
                if (this._delegate === null) {
                    break;
                }
                const mouseCoords = _src_vector_render_engine_math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](e.clientX, e.clientY);
                const delta = _src_vector_render_engine_math_vector2__WEBPACK_IMPORTED_MODULE_1__["sub"](mouseCoords, this._prevMouseCoords);
                switch (this._pressedButton) {
                    case 0 /* LEFT */:
                        this._delegate.onLeftButtonDrag(delta);
                        break;
                    case 1 /* MIDDLE */:
                        this._delegate.onMiddleButtonDrag(delta);
                        break;
                    case 2 /* RIGHT */:
                        this._delegate.onRightButtonDrag(delta);
                        break;
                }
                _src_vector_render_engine_math_vector2__WEBPACK_IMPORTED_MODULE_1__["copy"](mouseCoords, this._prevMouseCoords);
                e.preventDefault();
                break;
            case 'mouseup':
                if (this._pressedButton === e.button) {
                    document.body.removeEventListener('mouseup', this);
                    document.body.removeEventListener('mousemove', this);
                    this._pressedButton = -1 /* NONE */;
                }
                e.preventDefault();
                break;
        }
    }
    destroy() {
        this._target.removeEventListener('contextmenu', this);
        this._target.removeEventListener('click', this);
        this._target.removeEventListener('mousedown', this);
    }
}
class ScrollZoomController extends _src_vector_render_engine_util_delegator__WEBPACK_IMPORTED_MODULE_0__["DelegatorBase"] {
    constructor(target) {
        super();
        this._target = target;
        target.addEventListener('wheel', this);
    }
    handleEvent(e) {
        const delegate = this._delegate;
        if (!delegate) {
            return;
        }
        if (e.deltaY < 0) {
            delegate.onScrollIn();
        }
        else {
            delegate.onScrollOut();
        }
        e.preventDefault();
    }
    destroy() {
        this._target.removeEventListener('wheel', this);
    }
}
const ZOOM_STEP = 0.1;
const TILT_AZIMUTH_FACTOR = Math.PI / 1024;
class CameraMouseController {
    constructor(canvas, camera) {
        this._camera = camera;
        this._canvasSize = _src_vector_render_engine_math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](canvas.width, canvas.height);
        this.dragFactor = 1;
    }
    onLeftButtonDrag(delta) {
        // That's not exact, but good enough for now.
        _src_vector_render_engine_math_vector2__WEBPACK_IMPORTED_MODULE_1__["divv"](delta, this._canvasSize, delta);
        const camera = this._camera;
        _src_vector_render_engine_math_vector2__WEBPACK_IMPORTED_MODULE_1__["muln"](delta, this.dragFactor * camera.screenSize.height * Math.pow(2, -camera.zoom) /
            (Math.tan(0.5 * camera.options.fov) * 64), delta);
        const center = this._camera.center;
        center.x -= delta.x;
        center.y += delta.y;
        this._camera.setDirty();
    }
    onMiddleButtonDrag() { }
    onRightButtonDrag(delta) {
        const camera = this._camera;
        camera.tilt += delta.y * TILT_AZIMUTH_FACTOR;
        camera.azimuth += delta.x * TILT_AZIMUTH_FACTOR;
        this._camera.setDirty();
    }
    onScrollIn() {
        this._camera.zoom += ZOOM_STEP;
        this._camera.setDirty();
    }
    onScrollOut() {
        this._camera.zoom -= ZOOM_STEP;
        this._camera.setDirty();
    }
}
const cameraStateElement = document.querySelector('#camera_state');
const cameraStateText = cameraStateElement && cameraStateElement.firstChild;
function renderCameraState(camera) {
    const { center: { x, y }, zoom, tilt, azimuth } = camera;
    cameraStateText.replaceData(0, cameraStateText.length, `center: (${x.toFixed(8)},${y.toFixed(8)}); zoom: ${zoom.toFixed(4)}; ` +
        `tilt: ${tilt.toFixed(4)}; azimuth: ${azimuth.toFixed(4)}`);
}


/***/ }),
/* 94 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DelegatorBase", function() { return DelegatorBase; });
class DelegatorBase {
    constructor() {
        this._delegate = null;
    }
    setDelegate(delegate) {
        this._delegate = delegate;
    }
}


/***/ }),
/* 95 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ColorIdPointLabelRenderer; });
/* harmony import */ var _shader_point_label_vert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96);
/* harmony import */ var _shader_point_label_vert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_shader_point_label_vert__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shader_color_id_frag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(97);
/* harmony import */ var _shader_color_id_frag__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_shader_color_id_frag__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _color_id_label_renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(98);
/* harmony import */ var _render_primitives_label_point_label_render_unit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(104);




/**
 * Point labels renderer for collision resolution.
 */
class ColorIdPointLabelRenderer extends _color_id_label_renderer__WEBPACK_IMPORTED_MODULE_2__["default"] {
    constructor(context, camera, primitiveProvider) {
        const program = context.createProgram(_shader_point_label_vert__WEBPACK_IMPORTED_MODULE_0___default.a, _shader_color_id_frag__WEBPACK_IMPORTED_MODULE_1___default.a, _render_primitives_label_point_label_render_unit__WEBPACK_IMPORTED_MODULE_3__["PROGRAM_OPTIONS"]);
        super(context, program, primitiveProvider, camera);
    }
}


/***/ }),
/* 96 */
/***/ (function(module, exports) {

module.exports = "#version 100\n#define GLSLIFY 1\n\nattribute vec2 vertexId;\n\n// point in the world the label is anchored to\nattribute vec2 vertexPosHigh;\nattribute vec2 vertexPosLow;\n\n// vector of concrete glyph point displacement (top-left, bottom-left, ...) relative to label's center, in px\nattribute vec2 vertexDisplacement;\n\n// coordinates of the glyph vertex in the atlas\nattribute vec2 vertexUV;\n\nattribute float vertexPriority;\n\nuniform vec2 lookAtHigh;\nuniform vec2 lookAtLow;\nuniform mat4 viewProjMatrix;\nuniform vec2 pixelSize;\nuniform sampler2D visibility;\nuniform vec2 idHalfPxSize;\nuniform vec2 shift;\nuniform lowp float currentZoom;\n\nvarying vec2 uv;\nvarying lowp vec4 color;\nvarying lowp vec4 outlineColor;\nvarying mediump float scale;\n\nconst vec4 DISCARD_POSITION = vec4(2, 2, 2, 1);\n\nconst float YV_H_1_0 = 1.999969482421875;\nconst float YV_L_1_1 = 0.000030517112463712692;\n\n/**\n * Projects specific point label vertex onto the screen.\n */\nvec4 projectPointLabelVertex_1_2(\n    mat4 viewProjMatrix,\n    vec2 lookAtHigh,\n    vec2 lookAtLow,\n    vec2 posHigh,\n    vec2 posLow,\n    vec2 displacement,\n    vec2 pxSize\n) {\n    vec4 position = viewProjMatrix * vec4(\n        YV_H_1_0 * (posHigh - lookAtHigh) +\n            YV_L_1_1 * (posLow - lookAtLow),\n        0,\n        1\n    );\n    position = vec4(position.xy / position.w, 0.0, 1.0);\n\n    return position + vec4(displacement * pxSize, 0.0, 0.0);\n}\n\n\n\n\nvoid main(void) {\n    vec2 idTexCoordinate = vertexId.xy + idHalfPxSize;\n    float overlapZoom = texture2D(visibility, idTexCoordinate).b;\n    if (currentZoom < overlapZoom) {\n        gl_Position = DISCARD_POSITION;\n    } else {\n        gl_Position = projectPointLabelVertex_1_2(\n            viewProjMatrix,\n            lookAtHigh,\n            lookAtLow,\n            vertexPosHigh,\n            vertexPosLow,\n            vertexDisplacement,\n            pixelSize\n        );\n        gl_Position.xy += shift;\n        gl_Position.z = vertexPriority;\n        color = vec4(vertexId, 0, 1);\n    }\n\n}\n"

/***/ }),
/* 97 */
/***/ (function(module, exports) {

module.exports = "#version 100\n#define GLSLIFY 1\n\nvarying lowp vec4 color;\n\nvoid main(void) {\n    gl_FragColor = color;\n}\n"

/***/ }),
/* 98 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ColorIdLabelRenderer; });
/* harmony import */ var _colliding_primitive_color_id_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99);

/**
 * "color id" renderer for labels, both for point and curved ones.
 */
class ColorIdLabelRenderer extends _colliding_primitive_color_id_renderer__WEBPACK_IMPORTED_MODULE_0__["CollidingPrimitiveColorIdRenderer"] {
    constructor(context, program, primitiveProvider, camera) {
        super(context, program, primitiveProvider);
        this._camera = camera;
    }
    _prepareProgram(program, viewProjMatrix, cameraPositions, state, stabilityShift, visibility, currentZoom) {
        super._prepareProgram(program, viewProjMatrix, cameraPositions, state, stabilityShift, visibility, currentZoom);
        program.setVector2Uniform('pixelSize', this._camera.pixelSize);
    }
}


/***/ }),
/* 99 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CollidingPrimitiveColorIdRenderer", function() { return CollidingPrimitiveColorIdRenderer; });
/* harmony import */ var _render_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10);
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(23);
/* harmony import */ var _render_primitives_world_primitive_render_unit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(100);



class CollidingPrimitiveColorIdRenderer extends _render_primitives_world_primitive_render_unit__WEBPACK_IMPORTED_MODULE_2__["default"] {
    constructor(context, program, primitiveProvider) {
        super(context, new _render_state__WEBPACK_IMPORTED_MODULE_0__["default"](), program, primitiveProvider);
        this._idHalfPxSizeUniform = _math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](0, 0);
    }
    _getPrimitives() {
        return this.primitiveProvider.visiblePrimitives;
    }
    _prepareProgram(program, viewProjMatrix, cameraPositions, state, stabilityShift, visibility, currentZoom) {
        super._prepareProgram(program, viewProjMatrix, cameraPositions, state, stabilityShift, visibility, currentZoom);
        this._idHalfPxSizeUniform.x = 0.5 / visibility.getWidth();
        this._idHalfPxSizeUniform.y = 0.5 / visibility.getHeight();
        this._context.bindTextureUnit(0);
        this._context.bindTexture(visibility);
        program.setIntScalarUniform('visibility', 0);
        program.setVector2Uniform('idHalfPxSize', this._idHalfPxSizeUniform);
        program.setVector2Uniform('shift', stabilityShift);
        program.setScalarUniform('currentZoom', currentZoom);
    }
    _prepareRenderTarget(target, _viewProjMatrix, _cameraPositions, state, _stabilityShift, _visibility, _currentZoom) {
        this._context.bindRenderState(state);
        this._context.bindRenderTarget(target);
    }
}


/***/ }),
/* 100 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return WorldPrimitiveRenderUnit; });
/* harmony import */ var _gl_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(101);
/* harmony import */ var _memory_count_vertices__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(41);
/* harmony import */ var _primitive_batch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(102);



/**
 * Base class for rendering visible primitives. Being visible in the world means that they all need view-projection
 * matrix and camera positions (multiple positions are used for rendering repeated world). These parameters are
 * predefined as external requirements for render() method.
 */
class WorldPrimitiveRenderUnit extends _gl_renderer__WEBPACK_IMPORTED_MODULE_0__["GlRenderer"] {
    constructor(context, renderState, program, primitiveProvider) {
        super(context, renderState, program);
        this.primitiveProvider = primitiveProvider;
        this.onUpdate = primitiveProvider.onUpdate;
    }
    render(target, viewProjMatrix, cameraPositions, ...args) {
        super.render(target, viewProjMatrix, cameraPositions, ...args);
    }
    _render(_viewProjMatrix, cameraPositions) {
        for (const cameraPosition of cameraPositions) {
            this._program.setVector2Uniform('lookAtHigh', cameraPosition.lookAtHigh);
            this._program.setVector2Uniform('lookAtLow', cameraPosition.lookAtLow);
            for (const memoryBatch of Object(_primitive_batch__WEBPACK_IMPORTED_MODULE_2__["batchPrimitives"])(this._getPrimitives(), this._canBatchAdjacentPrimitives)) {
                this._renderBatch(memoryBatch);
            }
        }
    }
    _getPrimitives() {
        return this.primitiveProvider.primitives;
    }
    _prepareProgram(program, viewProjMatrix, cameraPositions, ...args) {
        super._prepareProgram(program, viewProjMatrix, cameraPositions, ...args);
        program.setMatrix4Uniform('viewProjMatrix', viewProjMatrix);
    }
    _renderBatch(memoryBatch) {
        this._context.bindVao(memoryBatch.page.vao);
        this._context.drawIndexedMesh(memoryBatch.indexByteOffset, Object(_memory_count_vertices__WEBPACK_IMPORTED_MODULE_1__["countIndices"])(memoryBatch.indexByteLength, memoryBatch.page.indexType));
    }
    /**
     * Determines if two adjacent primitives can be rendered in one batch (by a single draw call). They already
     * lay successively in memory, but there could be other reasons that forbid batching, like using different textures.
     * The method should be overridden in subclasses if their primitives have such complex rules of batching.
     */
    _canBatchAdjacentPrimitives(_a, _b) {
        return true;
    }
}


/***/ }),
/* 101 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GlRenderer", function() { return GlRenderer; });
/**
 * Base class for any WebGL renderer, it just defines basic structure of GL-calls allowing to override any part.
 * A specific renderer may need any number of additional arguments to perform rendering, they are provided in
 * additionalParams in the render() method.
 */
class GlRenderer {
    constructor(context, renderState, program) {
        this._context = context;
        this._renderState = renderState;
        this._program = program;
    }
    render(target, ...args) {
        if (this._program) {
            this._prepareProgram(this._program, ...args);
        }
        this._prepareRenderTarget(target, ...args);
        this._render(...args);
    }
    destroy() {
        if (this._program) {
            this._program.destroy();
        }
    }
    /**
     * Binds program and sets required uniforms. Subclasses are supposed to override
     * this method to add their own uniforms.
     */
    _prepareProgram(program, ..._args) {
        this._context.bindProgram(program);
    }
    /**
     * Binds render state and render target, no clear happens here, but this method
     * can be overridden in subclasses to add any setups they need.
     */
    _prepareRenderTarget(target, ..._args) {
        this._context.bindRenderState(this._renderState);
        this._context.bindRenderTarget(target);
    }
}


/***/ }),
/* 102 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "batchPrimitives", function() { return batchPrimitives; });
/* harmony import */ var _memory_relative_location__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(103);

/**
 * Creates batch from first primitives.
 */
function initBatch(primitive) {
    const subChunk = primitive.memorySubChunk;
    return {
        firstPrimitive: primitive,
        page: subChunk.memoryChunk.page,
        vertexByteOffset: subChunk.vertexByteOffset,
        vertexByteLength: subChunk.vertexByteLength,
        indexByteOffset: subChunk.indexByteOffset,
        indexByteLength: subChunk.indexByteLength
    };
}
/**
 * Batches primitives that can be rendered by a single draw call, that is critical for performance.
 * Performance gain from this method is possible (while it is not strictly required) if primitives
 * are sorted by memory offset and there are no many "holes" between them.
 * Minimal requiremets for batching is location in the same buffer (memory page), additional
 * requirements (such as having shared texture or similar) can be imposed in canBatchPridicate.
 */
function batchPrimitives(primitives, canBatchPridicate) {
    const canBatch = (a, b) => {
        if (
        // minimal requirements for batching is that primitives lay in the same page
        (a.memorySubChunk.memoryChunk.page !== b.memorySubChunk.memoryChunk.page) ||
            // chack external requirements if specified
            (canBatchPridicate && !canBatchPridicate(a, b))) {
            return false;
        }
        else {
            return true;
        }
    };
    return Object(_memory_relative_location__WEBPACK_IMPORTED_MODULE_0__["batchAllocatedObjects"])(primitives, (primitive) => primitive.memorySubChunk, initBatch, canBatch);
}


/***/ }),
/* 103 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appendToBatch", function() { return appendToBatch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "batchAllocatedObjects", function() { return batchAllocatedObjects; });
/**
 * Appends portion of memory to batch if they are adjacent.
 *
 * @returns `true` if both params are adjacent and the batch was successfully updated, `false` otherwise.
 */
function appendToBatch(memoryLocation, batch) {
    if (batch.vertexByteOffset + batch.vertexByteLength === memoryLocation.vertexByteOffset &&
        batch.indexByteOffset + batch.indexByteLength === memoryLocation.indexByteOffset) {
        batch.vertexByteLength += memoryLocation.vertexByteLength;
        batch.indexByteLength += memoryLocation.indexByteLength;
        return true;
    }
    return false;
}
/**
 * Combines objects allocated in memory into batches. No sorting is done in this method, the objects are supposed
 * to be sorted by index/vertex offsets to make batching effective. The batch is created by factory since it can
 * contains problem specific information.
 *
 * @param objects List of allocated objects.
 * @param getMemoryLocation Returns memory location of specific object.
 * @param createBatch Initiates batch by the first object.
 * @param canBatch Checks if two objects can be allocated.
 * @returns Iterable list of batches.
 */
function* batchAllocatedObjects(objects, getMemoryLocation, createBatch, canBatch = () => true) {
    const iterator = objects[Symbol.iterator]();
    let primitive = iterator.next().value;
    if (!primitive) {
        return;
    }
    let prev = primitive;
    let batch = createBatch(prev);
    primitive = iterator.next().value;
    while (primitive) {
        const primitiveMemoryLocation = getMemoryLocation(primitive);
        if (!canBatch(prev, primitive, batch) || !appendToBatch(primitiveMemoryLocation, batch)) {
            yield batch;
            batch = createBatch(primitive);
        }
        prev = primitive;
        primitive = iterator.next().value;
    }
    yield batch;
}


/***/ }),
/* 104 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PROGRAM_OPTIONS", function() { return PROGRAM_OPTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PointLabelRenderUnit; });
/* harmony import */ var _shader_point_label_vert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(105);
/* harmony import */ var _shader_point_label_vert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_shader_point_label_vert__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shader_df_text_frag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(106);
/* harmony import */ var _shader_df_text_frag__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_shader_df_text_frag__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _label_render_unit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(107);
/* harmony import */ var _billboard_rectangle_billboard_rectangle_render_unit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(108);
/* harmony import */ var _util_event_emitter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(14);
/* harmony import */ var _util_iterable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(3);






const PROGRAM_OPTIONS = {
    attribMap: {
        vertexId: 2 /* ID */,
        vertexPosHigh: 0 /* POSITION_HIGH */,
        vertexPosLow: 1 /* POSITION_LOW */,
        vertexDisplacement: 6 /* DISPLACEMENT */,
        vertexUV: 4 /* UV */,
        vertexPriority: 9 /* PRIORITY */,
        vertexColor: 7 /* COLOR */,
        vertexOutlineColor: 8 /* OUTLINE_COLOR */,
        vertexScale: 11 /* AUX */
    }
};
/**
 * Renders backgrounds extracted from point labels.
 */
class BackgroundPrimitiveProvider {
    constructor(labelsProvider) {
        this.onUpdate = new _util_event_emitter__WEBPACK_IMPORTED_MODULE_4__["VoidEventEmitter"]();
        this._labelsProvider = labelsProvider;
    }
    get primitives() {
        return Object(_util_iterable__WEBPACK_IMPORTED_MODULE_5__["mapIterable"])(Object(_util_iterable__WEBPACK_IMPORTED_MODULE_5__["filterIterable"])(this._labelsProvider.primitives, (label) => label.background !== undefined), (label) => label.background);
    }
}
/**
 * Point labels renderer. It uses appropriate program to layout glyphs on GPU.
 */
class PointLabelRenderUnit extends _label_render_unit__WEBPACK_IMPORTED_MODULE_2__["default"] {
    constructor(context, camera, visibilityProvider, primitiveProvider) {
        const program = context.createProgram(_shader_point_label_vert__WEBPACK_IMPORTED_MODULE_0___default.a, _shader_df_text_frag__WEBPACK_IMPORTED_MODULE_1___default.a, PROGRAM_OPTIONS);
        super(context, program, camera, visibilityProvider, primitiveProvider);
        this._backgroundRenderer = new _billboard_rectangle_billboard_rectangle_render_unit__WEBPACK_IMPORTED_MODULE_3__["default"](context, camera, visibilityProvider, new BackgroundPrimitiveProvider(primitiveProvider));
        this._backgroundRenderer.onUpdate.addListener(() => this.onUpdate.fire());
    }
    render(target, viewProjMatrix, cameraPositions) {
        this._backgroundRenderer.render(target, viewProjMatrix, cameraPositions);
        super.render(target, viewProjMatrix, cameraPositions);
    }
}


/***/ }),
/* 105 */
/***/ (function(module, exports) {

module.exports = "#version 100\n#define GLSLIFY 1\n\nattribute vec2 vertexId;\n\n// point in the world the label is anchored to\nattribute vec2 vertexPosHigh;\nattribute vec2 vertexPosLow;\n\n// vector of concrete glyph point displacement (top-left, bottom-left, ...) relative to label's center, in px\nattribute vec2 vertexDisplacement;\n\n// coordinates of the glyph vertex in the atlas\nattribute vec2 vertexUV;\n\nattribute float vertexPriority;\n\nattribute lowp vec4 vertexColor;\nattribute lowp vec4 vertexOutlineColor;\nattribute float vertexScale;\n\nuniform vec2 lookAtHigh;\nuniform vec2 lookAtLow;\nuniform mat4 viewProjMatrix;\nuniform vec2 pixelSize;\nuniform sampler2D visibility;\nuniform vec2 idHalfPxSize;\nuniform vec2 shift;\nuniform lowp float currentZoom;\n\nvarying vec2 uv;\nvarying lowp vec4 color;\nvarying lowp vec4 outlineColor;\nvarying mediump float scale;\n\nconst vec4 DISCARD_POSITION = vec4(2, 2, 2, 1);\n\nconst float YV_H_1_0 = 1.999969482421875;\nconst float YV_L_1_1 = 0.000030517112463712692;\n\n/**\n * Projects specific point label vertex onto the screen.\n */\nvec4 projectPointLabelVertex_1_2(\n    mat4 viewProjMatrix,\n    vec2 lookAtHigh,\n    vec2 lookAtLow,\n    vec2 posHigh,\n    vec2 posLow,\n    vec2 displacement,\n    vec2 pxSize\n) {\n    vec4 position = viewProjMatrix * vec4(\n        YV_H_1_0 * (posHigh - lookAtHigh) +\n            YV_L_1_1 * (posLow - lookAtLow),\n        0,\n        1\n    );\n    position = vec4(position.xy / position.w, 0.0, 1.0);\n\n    return position + vec4(displacement * pxSize, 0.0, 0.0);\n}\n\n\n\n\nvoid main(void) {\n    //float visibilityAlpha = texture2D(visibility, vertexId.xy + idHalfPxSize).a;\n    float visibilityAlpha = 1.0;\n    if (visibilityAlpha != 0.0) {\n        gl_Position = projectPointLabelVertex_1_2(\n            viewProjMatrix,\n            lookAtHigh,\n            lookAtLow,\n            vertexPosHigh,\n            vertexPosLow,\n            vertexDisplacement,\n            pixelSize\n        );\n\n        uv = vertexUV;\n        color = vertexColor;\n        outlineColor = vertexOutlineColor;\n        scale = vertexScale;\n\n        color.a *= visibilityAlpha;\n        outlineColor.a *= visibilityAlpha;\n    } else {\n        gl_Position = DISCARD_POSITION;\n    }\n}\n"

/***/ }),
/* 106 */
/***/ (function(module, exports) {

module.exports = "#version 100\n\nprecision mediump float;\n#define GLSLIFY 1\n\nuniform float dpr;\nuniform sampler2D atlas;\nuniform vec2 atlasSize;\n\nvarying vec2 uv;\nvarying lowp vec4 color;\nvarying lowp vec4 outlineColor;\nvarying float scale;\n\nconst float MAX_CORRECTED_GLYPH_SCALE = 0.5;\nconst float GLYPH_BASE_WEIGHT = 0.7;\nconst float GLYPH_BASE_SMOTHNESS = 0.1;\nconst float GLYPH_WEIGHT_SCALE_IMPACT = 0.1;\nconst float GLYPH_SMOOTHNESS_SCALE_IMPACT = 0.06;\nconst float OUTLINE_WEIGHT_SCALE_IMPACT = 0.125;\n\nvoid main(void) {\n    // low scale glyphs (less than 0.5) should be a little bit bolder and smoother\n    float scaleClamped = clamp(scale, 0.0, MAX_CORRECTED_GLYPH_SCALE);\n    // weight is responsible for glyph boldness, the less weight value the bolder the text\n    float weight = GLYPH_BASE_WEIGHT + GLYPH_WEIGHT_SCALE_IMPACT * scaleClamped;\n    // smoothness is how blurred glyphs are, the less smoothness value the less blurring\n    float smoothness = (GLYPH_BASE_SMOTHNESS + GLYPH_SMOOTHNESS_SCALE_IMPACT / scaleClamped) / dpr;\n\n    vec4 resultColor = color;\n    float dist = texture2D(atlas, uv / atlasSize).a;\n    float alpha = smoothstep(weight - smoothness, weight + smoothness, dist);\n\n    if (outlineColor.a != 0.0) {\n        // to render outline the glyph is rendered a little bit bolder with different color at edges\n        weight = weight - OUTLINE_WEIGHT_SCALE_IMPACT / scale;\n        resultColor = mix(outlineColor, color, alpha);\n        alpha = smoothstep(weight - smoothness, weight + smoothness, dist);\n    }\n\n    gl_FragColor = vec4(resultColor.rgb, resultColor.a * alpha);\n}\n"

/***/ }),
/* 107 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return LabelRenderUnit; });
/* harmony import */ var _world_primitive_render_unit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(100);
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(23);
/* harmony import */ var _render_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(10);



/**
 * Base renderer that incapsulates all the GL specifics to make labels rendered.
 */
class LabelRenderUnit extends _world_primitive_render_unit__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(context, program, camera, visibilityProvider, primitiveProvider) {
        super(context, new _render_state__WEBPACK_IMPORTED_MODULE_2__["default"](_render_state__WEBPACK_IMPORTED_MODULE_2__["BLEND_OVER_RENDER_STATE"]), program, primitiveProvider);
        this._camera = camera;
        this._visibilityProvider = visibilityProvider;
        this._idHalfPxSizeUniform = _math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](0, 0);
        this._atlasSizeUniform = _math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](0, 0);
        context.bindProgram(program);
        program.setIntScalarUniform('visibility', 0);
    }
    _prepareProgram(program, viewProjMatrix, cameraPositions) {
        const visibility = this._visibilityProvider();
        super._prepareProgram(program, viewProjMatrix, cameraPositions);
        this._idHalfPxSizeUniform.x = 0.5 / visibility.getWidth();
        this._idHalfPxSizeUniform.y = 0.5 / visibility.getHeight();
        this._context.bindTextureUnit(0);
        this._context.bindTexture(visibility);
        program.setVector2Uniform('idHalfPxSize', this._idHalfPxSizeUniform);
        program.setVector2Uniform('pixelSize', this._camera.pixelSize);
        program.setScalarUniform('dpr', window.devicePixelRatio);
    }
    _renderBatch(memoryBatch) {
        const atlas = memoryBatch.firstPrimitive.atlas;
        this._atlasSizeUniform.x = atlas.width;
        this._atlasSizeUniform.y = atlas.height;
        this._program.setIntScalarUniform('atlas', 1);
        this._program.setVector2Uniform('atlasSize', this._atlasSizeUniform);
        this._context.bindTextureUnit(1);
        this._context.bindTexture(atlas.texture);
        super._renderBatch(memoryBatch);
    }
    _canBatchAdjacentPrimitives(a, b) {
        return super._canBatchAdjacentPrimitives(a, b) && (a.atlas === b.atlas);
    }
}


/***/ }),
/* 108 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return BillboardRectangleRenderUnit; });
/* harmony import */ var _shader_billboard_rectangle_vert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(109);
/* harmony import */ var _shader_billboard_rectangle_vert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_shader_billboard_rectangle_vert__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shader_billboard_rectangle_frag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(110);
/* harmony import */ var _shader_billboard_rectangle_frag__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_shader_billboard_rectangle_frag__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(23);
/* harmony import */ var _world_primitive_render_unit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(100);
/* harmony import */ var _render_state__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(10);






const RENDER_STATE = new _render_state__WEBPACK_IMPORTED_MODULE_4__["default"](_render_state__WEBPACK_IMPORTED_MODULE_4__["BLEND_OVER_RENDER_STATE"]);
/**
 * Renderer of billboard rectangles.
 */
class BillboardRectangleRenderUnit extends _world_primitive_render_unit__WEBPACK_IMPORTED_MODULE_3__["default"] {
    constructor(context, camera, visibilityProvider, primitiveProvider) {
        const program = context.createProgram(_shader_billboard_rectangle_vert__WEBPACK_IMPORTED_MODULE_0___default.a, _shader_billboard_rectangle_frag__WEBPACK_IMPORTED_MODULE_1___default.a, {
            attribMap: {
                vertexId: 2 /* ID */,
                vertexPosHigh: 0 /* POSITION_HIGH */,
                vertexPosLow: 1 /* POSITION_LOW */,
                vertexDisplacement: 6 /* DISPLACEMENT */,
                vertexUV: 4 /* UV */,
                vertexColor: 7 /* COLOR */,
                vertexBorderRadii: 11 /* AUX */
            }
        });
        super(context, RENDER_STATE, program, primitiveProvider);
        this._visibilityProvider = visibilityProvider;
        this._camera = camera;
        this._visibilitySizeUniform = _math_vector2__WEBPACK_IMPORTED_MODULE_2__["create"](0, 0);
        context.bindProgram(program);
        program.setIntScalarUniform('visibility', 0);
    }
    _prepareProgram(program, viewProjMatrix, cameraPositions) {
        super._prepareProgram(program, viewProjMatrix, cameraPositions);
        const visibility = this._visibilityProvider();
        this._visibilitySizeUniform.x = visibility.getWidth();
        this._visibilitySizeUniform.y = visibility.getHeight();
        this._context.bindTextureUnit(0);
        this._context.bindTexture(visibility);
        program.setVector2Uniform('visibilitySize', this._visibilitySizeUniform);
        program.setVector2Uniform('pixelSize', this._camera.pixelSize);
    }
}


/***/ }),
/* 109 */
/***/ (function(module, exports) {

module.exports = "#version 100\n#define GLSLIFY 1\n\nattribute vec2 vertexId;\nattribute vec2 vertexPosHigh;\nattribute vec2 vertexPosLow;\nattribute vec2 vertexDisplacement;\nattribute vec2 vertexUV;\nattribute vec4 vertexColor;\nattribute vec2 vertexBorderRadii;\n\nuniform vec2 lookAtHigh;\nuniform vec2 lookAtLow;\nuniform mat4 viewProjMatrix;\nuniform vec2 pixelSize;\nuniform sampler2D visibility;\nuniform vec2 visibilitySize;\n\nvarying vec2 uv;\nvarying vec4 color;\nvarying vec2 borderRadii;\n\nconst vec4 DISCARD_POSITION = vec4(2, 2, 2, 1);\nconst float YV_H = 1.999969482421875;\nconst float YV_L = 0.000030517112463712692;\nvec2 VISIBILITY_HALF_PX = 0.5 / visibilitySize;\n\nvoid main(void) {\n    float visibilityAlpha = texture2D(visibility, vertexId.xy + VISIBILITY_HALF_PX).a;\n    if (visibilityAlpha == 0.0) {\n        gl_Position = DISCARD_POSITION;\n        return;\n    }\n\n    vec4 position = viewProjMatrix * vec4(\n        YV_H * (vertexPosHigh - lookAtHigh) +\n            YV_L * (vertexPosLow - lookAtLow),\n        0,\n        1\n    );\n    position.xyz /= position.w;\n    position.w = 1.0;\n\n    gl_Position = position + vec4(vertexDisplacement * pixelSize, 0.0, 0.0);\n\n    uv = vertexUV;\n    color = vertexColor;\n    color.a *= visibilityAlpha;\n    borderRadii = vertexBorderRadii;\n}\n"

/***/ }),
/* 110 */
/***/ (function(module, exports) {

module.exports = "#version 100\n\nprecision mediump float;\n#define GLSLIFY 1\n\nvarying vec2 uv;\nvarying vec4 color;\nvarying vec2 borderRadii;\n\nfloat roundedRectangle(const in vec2 uv, const in vec2 radii) {\n    vec2 absUv = abs(uv);\n    vec2 q = absUv + radii - 1.0;\n    return min(q.x, q.y) > 0.0 ? length(q / radii) : max(absUv.x, absUv.y);\n}\n\nvoid main(void) {\n    gl_FragColor = step(roundedRectangle(uv, borderRadii), 1.0) * color;\n}\n"

/***/ }),
/* 111 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ColorIdCurvedLabelRenderer; });
/* harmony import */ var _shader_curved_label_vert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(112);
/* harmony import */ var _shader_curved_label_vert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_shader_curved_label_vert__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shader_color_id_frag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(97);
/* harmony import */ var _shader_color_id_frag__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_shader_color_id_frag__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _render_primitives_label_curved_label_render_unit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(113);
/* harmony import */ var _color_id_label_renderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(98);




/**
 * Curved labels renderer for collision resolution.
 */
class ColorIdCurvedLabelRenderer extends _color_id_label_renderer__WEBPACK_IMPORTED_MODULE_3__["default"] {
    constructor(context, camera, primitiveProvider) {
        const program = context.createProgram(_shader_curved_label_vert__WEBPACK_IMPORTED_MODULE_0___default.a, _shader_color_id_frag__WEBPACK_IMPORTED_MODULE_1___default.a, _render_primitives_label_curved_label_render_unit__WEBPACK_IMPORTED_MODULE_2__["PROGRAM_OPTIONS"]);
        super(context, program, primitiveProvider, camera);
    }
}


/***/ }),
/* 112 */
/***/ (function(module, exports) {

module.exports = "#version 100\n#define GLSLIFY 1\n\nattribute vec2 vertexId;\n\n// point in the world the label is anchored to\nattribute vec2 vertexPosHigh;\nattribute vec2 vertexPosLow;\n\n// vector of concrete glyph point displacement (top-left, bottom-left, ...) relative to glyph's center (two values),\n// and distance of the glyph center to label's center (third value), in px\nattribute vec3 vertexDisplacements;\n\n// coordinates of the glyph vertex in the atlas\nattribute vec2 vertexUV;\n\nattribute float vertexPriority;\n\nattribute lowp vec4 vertexColor;\nattribute lowp vec4 vertexOutlineColor;\nattribute vec2 polylineLength_vertexScale;\n\n// deltas relative to the world point encoded in vertexPosHigh/vertexPosLow encoded via lengths and and angles of\n// corresponding vectors\nattribute vec4 leftPolylineRatios;\nattribute vec4 leftPolylineAngles;\nattribute vec4 rightPolylineRatios;\nattribute vec4 rightPolylineAngles;\n\nuniform vec2 lookAtHigh;\nuniform vec2 lookAtLow;\nuniform mat4 viewProjMatrix;\nuniform vec2 pixelSize;\nuniform sampler2D visibility;\nuniform vec2 idHalfPxSize;\nuniform vec2 shift;\nuniform lowp float currentZoom;\n\nvarying vec2 uv;\nvarying lowp vec4 color;\nvarying lowp vec4 outlineColor;\nvarying float scale;\n\nconst vec4 DISCARD_POSITION = vec4(2, 2, 2, 1);\n\nconst float YV_H_1_0 = 1.999969482421875;\nconst float YV_L_1_1 = 0.000030517112463712692;\n\nconst float PI_1_2 = 3.1415927410125732;\n\nconst int MAX_POLYLINE_POINTS_1_3 = 4;\nconst float INFINITY_1_4 = 1000000.0; // large enough for a segment length to consider it infinity\n\n/**\n * Returns world coordinate (plus delta) projected on screen, in pixels.\n */\nvec2 project_1_5(\n    mat4 viewProjMatrix,\n    vec2 lookAtHigh,\n    vec2 lookAtLow,\n    vec2 pixelSize,\n    vec2 pointHigh,\n    vec2 pointLow,\n    vec2 delta\n) {\n    vec4 position = viewProjMatrix * vec4(\n            YV_H_1_0 * (pointHigh - lookAtHigh) + YV_L_1_1 * (pointLow - lookAtLow) + delta,\n            0,\n            1\n        );\n    vec2 projected = position.xy / position.w;\n    return projected / pixelSize;\n}\n\n/**\n * Each point of the polyline is encoded as a vector from the polyline center by its normalized angle and the ratio of\n * its length to the polyline's length.\n */\nvec2 decodePolylineDeltas_1_6(float ratio, float angle, float polylineLength) {\n    // denormalize angle back to radians\n    float a = angle * 2.0 * PI_1_2 - PI_1_2;\n    // length of a vector\n    float len = ratio * polylineLength;\n    // restored point's (x, y) coordinates\n    return vec2(cos(a), sin(a)) * len;\n}\n\n/**\n * Projects specific curved label vertex onto the screen. The label is layouted by centering polyline in\n * the vertexPosHigh/vertexPosLow and other points are used to guide concrete gryph vertex.\n * Number of polyline points is hardcoded to pass them in attributes.\n */\nvec4 projectCurvedLabelVertex_1_7(\n    mat4 viewProjMatrix,\n    vec2 lookAtHigh,\n    vec2 lookAtLow,\n    vec2 pxSize,\n    vec2 posHigh,\n    vec2 posLow,\n    vec2 displacement,\n    float lineDisplacement,\n    float polylineLength,\n    vec4 leftPolylineRatios,\n    vec4 leftPolylineAngles,\n    vec4 rightPolylineRatios,\n    vec4 rightPolylineAngles\n) {\n    vec2 polylineDeltas[MAX_POLYLINE_POINTS_1_3];\n    vec2 position = project_1_5(viewProjMatrix, lookAtHigh, lookAtLow, pxSize, posHigh, posLow, vec2(0, 0));\n    float remainingLength = abs(lineDisplacement);\n    for (int i = 0; i < MAX_POLYLINE_POINTS_1_3; i++) {\n        vec2 projectedPoint;\n\n        // figure out the direction (left/right) at the first step\n        if (i == 0) {\n            projectedPoint = project_1_5(\n                viewProjMatrix,\n                lookAtHigh,\n                lookAtLow,\n                pxSize,\n                posHigh,\n                posLow,\n                decodePolylineDeltas_1_6(rightPolylineRatios[0], rightPolylineAngles[0], polylineLength)\n            );\n            bool isRightPart = lineDisplacement > 0.0;\n            bool isInverted = projectedPoint.x < position.x;\n\n            // the map could be rotated and curved label should change its direction if they got upside down\n            // using center segment to identify this case is an approximation (ideally we should check all segments)\n            if (isRightPart ^^ isInverted) {\n                polylineDeltas[0] = decodePolylineDeltas_1_6(rightPolylineRatios[0], rightPolylineAngles[0], polylineLength);\n                polylineDeltas[1] = decodePolylineDeltas_1_6(rightPolylineRatios[1], rightPolylineAngles[1], polylineLength);\n                polylineDeltas[2] = decodePolylineDeltas_1_6(rightPolylineRatios[2], rightPolylineAngles[2], polylineLength);\n                polylineDeltas[3] = decodePolylineDeltas_1_6(rightPolylineRatios[3], rightPolylineAngles[3], polylineLength);\n            } else {\n                polylineDeltas[0] = decodePolylineDeltas_1_6(leftPolylineRatios[0], leftPolylineAngles[0], polylineLength);\n                polylineDeltas[1] = decodePolylineDeltas_1_6(leftPolylineRatios[1], leftPolylineAngles[1], polylineLength);\n                polylineDeltas[2] = decodePolylineDeltas_1_6(leftPolylineRatios[2], leftPolylineAngles[2], polylineLength);\n                polylineDeltas[3] = decodePolylineDeltas_1_6(leftPolylineRatios[3], leftPolylineAngles[3], polylineLength);\n            }\n\n            // the first right point of the segment already calculated,\n            // recalculate the point if this part of the label goes other direction\n            if (!(isRightPart && !isInverted) && !(!isRightPart && isInverted)) {\n                projectedPoint = project_1_5(viewProjMatrix, lookAtHigh, lookAtLow, pxSize, posHigh, posLow, polylineDeltas[i]);\n            }\n        } else {\n            projectedPoint = project_1_5(viewProjMatrix, lookAtHigh, lookAtLow, pxSize, posHigh, posLow, polylineDeltas[i]);\n        }\n\n        vec2 segment = projectedPoint - position;\n        bool isLast = i == (MAX_POLYLINE_POINTS_1_3 - 1);\n        float segmentLength = (isLast || (polylineDeltas[i + 1] == vec2(0, 0))) ? INFINITY_1_4 : length(segment);\n\n        if (segmentLength > remainingLength) {\n            float signFactor = lineDisplacement > 0.0 ? 1.0 : -1.0;\n            vec2 direction = normalize(segment);\n            vec2 normal = vec2(-direction.y, direction.x);\n\n            position += direction * remainingLength;\n            position += signFactor * direction * displacement.x;\n            position += signFactor * normal * displacement.y;\n\n            break;\n        } else {\n            remainingLength -= segmentLength;\n            position += segment;\n        }\n    }\n\n    return vec4(position * pxSize, 0.0, 1.0);\n}\n\n\n\n\n\n/**\n * Curved labels are layouted here: the label is centered in the vertexPosHigh/vertexPosLow and polyline points\n * are used to guide concrete gryph vertex. Number of polyline points is hardcoded to pass them in attributes.\n */\nvoid main(void) {\n    vec2 idTexCoordinate = vertexId.xy + idHalfPxSize;\n    float overlapZoom = texture2D(visibility, idTexCoordinate).b;\n\n    if (currentZoom < overlapZoom) {\n        gl_Position = DISCARD_POSITION;\n    } else {\n        vec2 vertexDisplacement = vertexDisplacements.xy;\n        float vertexLineDisplacement = vertexDisplacements.z;\n        float polylineLength = polylineLength_vertexScale[0];\n        gl_Position = projectCurvedLabelVertex_1_7(\n            viewProjMatrix,\n            lookAtHigh,\n            lookAtLow,\n            pixelSize,\n            vertexPosHigh,\n            vertexPosLow,\n            vertexDisplacement,\n            vertexLineDisplacement,\n            polylineLength,\n            leftPolylineRatios,\n            leftPolylineAngles,\n            rightPolylineRatios,\n            rightPolylineAngles\n        );\n\n        gl_Position.xy += shift;\n        gl_Position.z = vertexPriority;\n\n        color = vec4(vertexId, 0, 1);\n    }\n}\n"

/***/ }),
/* 113 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PROGRAM_OPTIONS", function() { return PROGRAM_OPTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return CurvedLabelRenderUnit; });
/* harmony import */ var _shader_curved_label_vert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(114);
/* harmony import */ var _shader_curved_label_vert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_shader_curved_label_vert__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shader_df_text_frag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(106);
/* harmony import */ var _shader_df_text_frag__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_shader_df_text_frag__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _label_render_unit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(107);



const PROGRAM_OPTIONS = {
    attribMap: {
        vertexId: 2 /* ID */,
        vertexPosHigh: 0 /* POSITION_HIGH */,
        vertexPosLow: 1 /* POSITION_LOW */,
        vertexDisplacements: 6 /* DISPLACEMENT */,
        vertexUV: 4 /* UV */,
        vertexColor: 7 /* COLOR */,
        vertexOutlineColor: 8 /* OUTLINE_COLOR */,
        vertexPriority: 9 /* PRIORITY */,
        leftPolylineRatios: 12 /* AUX1 */,
        leftPolylineAngles: 13 /* AUX2 */,
        rightPolylineRatios: 14 /* AUX3 */,
        rightPolylineAngles: 15 /* AUX4 */,
        polylineLength_vertexScale: 11 /* AUX */
    }
};
/**
 * Curved labels renderer. It uses appropriate program to layout glyphs on GPU.
 */
class CurvedLabelRenderUnit extends _label_render_unit__WEBPACK_IMPORTED_MODULE_2__["default"] {
    constructor(context, camera, visibilityProvider, primitiveProvider) {
        const program = context.createProgram(_shader_curved_label_vert__WEBPACK_IMPORTED_MODULE_0___default.a, _shader_df_text_frag__WEBPACK_IMPORTED_MODULE_1___default.a, PROGRAM_OPTIONS);
        super(context, program, camera, visibilityProvider, primitiveProvider);
    }
}


/***/ }),
/* 114 */
/***/ (function(module, exports) {

module.exports = "#version 100\n#define GLSLIFY 1\n\nattribute vec2 vertexId;\n\n// point in the world the label is anchored to\nattribute vec2 vertexPosHigh;\nattribute vec2 vertexPosLow;\n\n// vector of concrete glyph point displacement (top-left, bottom-left, ...) relative to glyph's center (two values),\n// and distance of the glyph center to label's center (third value), in px\nattribute vec3 vertexDisplacements;\n\n// coordinates of the glyph vertex in the atlas\nattribute vec2 vertexUV;\n\nattribute float vertexPriority;\n\nattribute lowp vec4 vertexColor;\nattribute lowp vec4 vertexOutlineColor;\nattribute vec2 polylineLength_vertexScale;\n\n// deltas relative to the world point encoded in vertexPosHigh/vertexPosLow encoded via lengths and and angles of\n// corresponding vectors\nattribute vec4 leftPolylineRatios;\nattribute vec4 leftPolylineAngles;\nattribute vec4 rightPolylineRatios;\nattribute vec4 rightPolylineAngles;\n\nuniform vec2 lookAtHigh;\nuniform vec2 lookAtLow;\nuniform mat4 viewProjMatrix;\nuniform vec2 pixelSize;\nuniform sampler2D visibility;\nuniform vec2 idHalfPxSize;\nuniform vec2 shift;\nuniform lowp float currentZoom;\n\nvarying vec2 uv;\nvarying lowp vec4 color;\nvarying lowp vec4 outlineColor;\nvarying float scale;\n\nconst vec4 DISCARD_POSITION = vec4(2, 2, 2, 1);\n\nconst float YV_H_1_0 = 1.999969482421875;\nconst float YV_L_1_1 = 0.000030517112463712692;\n\nconst float PI_1_2 = 3.1415927410125732;\n\nconst int MAX_POLYLINE_POINTS_1_3 = 4;\nconst float INFINITY_1_4 = 1000000.0; // large enough for a segment length to consider it infinity\n\n/**\n * Returns world coordinate (plus delta) projected on screen, in pixels.\n */\nvec2 project_1_5(\n    mat4 viewProjMatrix,\n    vec2 lookAtHigh,\n    vec2 lookAtLow,\n    vec2 pixelSize,\n    vec2 pointHigh,\n    vec2 pointLow,\n    vec2 delta\n) {\n    vec4 position = viewProjMatrix * vec4(\n            YV_H_1_0 * (pointHigh - lookAtHigh) + YV_L_1_1 * (pointLow - lookAtLow) + delta,\n            0,\n            1\n        );\n    vec2 projected = position.xy / position.w;\n    return projected / pixelSize;\n}\n\n/**\n * Each point of the polyline is encoded as a vector from the polyline center by its normalized angle and the ratio of\n * its length to the polyline's length.\n */\nvec2 decodePolylineDeltas_1_6(float ratio, float angle, float polylineLength) {\n    // denormalize angle back to radians\n    float a = angle * 2.0 * PI_1_2 - PI_1_2;\n    // length of a vector\n    float len = ratio * polylineLength;\n    // restored point's (x, y) coordinates\n    return vec2(cos(a), sin(a)) * len;\n}\n\n/**\n * Projects specific curved label vertex onto the screen. The label is layouted by centering polyline in\n * the vertexPosHigh/vertexPosLow and other points are used to guide concrete gryph vertex.\n * Number of polyline points is hardcoded to pass them in attributes.\n */\nvec4 projectCurvedLabelVertex_1_7(\n    mat4 viewProjMatrix,\n    vec2 lookAtHigh,\n    vec2 lookAtLow,\n    vec2 pxSize,\n    vec2 posHigh,\n    vec2 posLow,\n    vec2 displacement,\n    float lineDisplacement,\n    float polylineLength,\n    vec4 leftPolylineRatios,\n    vec4 leftPolylineAngles,\n    vec4 rightPolylineRatios,\n    vec4 rightPolylineAngles\n) {\n    vec2 polylineDeltas[MAX_POLYLINE_POINTS_1_3];\n    vec2 position = project_1_5(viewProjMatrix, lookAtHigh, lookAtLow, pxSize, posHigh, posLow, vec2(0, 0));\n    float remainingLength = abs(lineDisplacement);\n    for (int i = 0; i < MAX_POLYLINE_POINTS_1_3; i++) {\n        vec2 projectedPoint;\n\n        // figure out the direction (left/right) at the first step\n        if (i == 0) {\n            projectedPoint = project_1_5(\n                viewProjMatrix,\n                lookAtHigh,\n                lookAtLow,\n                pxSize,\n                posHigh,\n                posLow,\n                decodePolylineDeltas_1_6(rightPolylineRatios[0], rightPolylineAngles[0], polylineLength)\n            );\n            bool isRightPart = lineDisplacement > 0.0;\n            bool isInverted = projectedPoint.x < position.x;\n\n            // the map could be rotated and curved label should change its direction if they got upside down\n            // using center segment to identify this case is an approximation (ideally we should check all segments)\n            if (isRightPart ^^ isInverted) {\n                polylineDeltas[0] = decodePolylineDeltas_1_6(rightPolylineRatios[0], rightPolylineAngles[0], polylineLength);\n                polylineDeltas[1] = decodePolylineDeltas_1_6(rightPolylineRatios[1], rightPolylineAngles[1], polylineLength);\n                polylineDeltas[2] = decodePolylineDeltas_1_6(rightPolylineRatios[2], rightPolylineAngles[2], polylineLength);\n                polylineDeltas[3] = decodePolylineDeltas_1_6(rightPolylineRatios[3], rightPolylineAngles[3], polylineLength);\n            } else {\n                polylineDeltas[0] = decodePolylineDeltas_1_6(leftPolylineRatios[0], leftPolylineAngles[0], polylineLength);\n                polylineDeltas[1] = decodePolylineDeltas_1_6(leftPolylineRatios[1], leftPolylineAngles[1], polylineLength);\n                polylineDeltas[2] = decodePolylineDeltas_1_6(leftPolylineRatios[2], leftPolylineAngles[2], polylineLength);\n                polylineDeltas[3] = decodePolylineDeltas_1_6(leftPolylineRatios[3], leftPolylineAngles[3], polylineLength);\n            }\n\n            // the first right point of the segment already calculated,\n            // recalculate the point if this part of the label goes other direction\n            if (!(isRightPart && !isInverted) && !(!isRightPart && isInverted)) {\n                projectedPoint = project_1_5(viewProjMatrix, lookAtHigh, lookAtLow, pxSize, posHigh, posLow, polylineDeltas[i]);\n            }\n        } else {\n            projectedPoint = project_1_5(viewProjMatrix, lookAtHigh, lookAtLow, pxSize, posHigh, posLow, polylineDeltas[i]);\n        }\n\n        vec2 segment = projectedPoint - position;\n        bool isLast = i == (MAX_POLYLINE_POINTS_1_3 - 1);\n        float segmentLength = (isLast || (polylineDeltas[i + 1] == vec2(0, 0))) ? INFINITY_1_4 : length(segment);\n\n        if (segmentLength > remainingLength) {\n            float signFactor = lineDisplacement > 0.0 ? 1.0 : -1.0;\n            vec2 direction = normalize(segment);\n            vec2 normal = vec2(-direction.y, direction.x);\n\n            position += direction * remainingLength;\n            position += signFactor * direction * displacement.x;\n            position += signFactor * normal * displacement.y;\n\n            break;\n        } else {\n            remainingLength -= segmentLength;\n            position += segment;\n        }\n    }\n\n    return vec4(position * pxSize, 0.0, 1.0);\n}\n\n\n\n\nvoid main(void) {\n    //float visibilityAlpha = texture2D(visibility, vertexId.xy + idHalfPxSize).a;\n    float visibilityAlpha = 1.0;\n    if (visibilityAlpha != 0.0) {\n        vec2 vertexDisplacement = vertexDisplacements.xy;\n        float vertexLineDisplacement = vertexDisplacements.z;\n        float polylineLength = polylineLength_vertexScale[0];\n        float vertexScale = polylineLength_vertexScale[1];\n        gl_Position = projectCurvedLabelVertex_1_7(\n            viewProjMatrix,\n            lookAtHigh,\n            lookAtLow,\n            pixelSize,\n            vertexPosHigh,\n            vertexPosLow,\n            vertexDisplacement,\n            vertexLineDisplacement,\n            polylineLength,\n            leftPolylineRatios,\n            leftPolylineAngles,\n            rightPolylineRatios,\n            rightPolylineAngles\n        );\n\n        uv = vertexUV;\n        color = vertexColor;\n        outlineColor = vertexOutlineColor;\n        scale = vertexScale;\n\n        color.a *= visibilityAlpha;\n        outlineColor.a *= visibilityAlpha;\n    } else {\n        gl_Position = DISCARD_POSITION;\n    }\n}\n"

/***/ }),
/* 115 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return IconRenderUnit; });
/* harmony import */ var _shader_icon_vert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(116);
/* harmony import */ var _shader_icon_vert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_shader_icon_vert__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shader_icon_frag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(117);
/* harmony import */ var _shader_icon_frag__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_shader_icon_frag__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _image_image_render_unit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(118);



/**
 * Renderer of icon primitives.
 */
class IconRenderUnit extends _image_image_render_unit__WEBPACK_IMPORTED_MODULE_2__["default"] {
    constructor(context, camera, primitiveProvider) {
        const program = context.createProgram(_shader_icon_vert__WEBPACK_IMPORTED_MODULE_0___default.a, _shader_icon_frag__WEBPACK_IMPORTED_MODULE_1___default.a, {
            attribMap: {
                vertexPosHigh: 0 /* POSITION_HIGH */,
                vertexPosLow: 1 /* POSITION_LOW */,
                vertexDisplacement: 6 /* DISPLACEMENT */,
                vertexUV: 4 /* UV */
            }
        });
        super(context, primitiveProvider, program);
        this._camera = camera;
    }
    _prepareProgram(program, viewProjMatrix, cameraPositions) {
        super._prepareProgram(program, viewProjMatrix, cameraPositions);
        program.setVector2Uniform('pixelSize', this._camera.pixelSize);
    }
}


/***/ }),
/* 116 */
/***/ (function(module, exports) {

module.exports = "#version 100\n#define GLSLIFY 1\n\nattribute vec2 vertexPosHigh;\nattribute vec2 vertexPosLow;\nattribute vec2 vertexDisplacement;\nattribute vec2 vertexUV;\n\nuniform vec2 lookAtHigh;\nuniform vec2 lookAtLow;\nuniform mat4 viewProjMatrix;\nuniform vec2 pixelSize;\n\nvarying vec2 uv;\n\nconst float YV_H = 1.999969482421875;\nconst float YV_L = 0.000030517112463712692;\n\nvoid main() {\n    vec4 position = viewProjMatrix * vec4(\n        YV_H * (vertexPosHigh - lookAtHigh) +\n            YV_L * (vertexPosLow - lookAtLow),\n        0,\n        1\n    );\n    position = vec4(position.xy / position.w, 0.0, 1.0);\n\n    gl_Position = position + vec4(vertexDisplacement * pixelSize, 0.0, 0.0);\n\n    uv = vertexUV;\n}\n"

/***/ }),
/* 117 */
/***/ (function(module, exports) {

module.exports = "#version 100\nprecision mediump float;\n#define GLSLIFY 1\n\nuniform sampler2D atlas;\nuniform vec2 atlasSize;\n\nvarying vec2 uv;\n\nvoid main() {\n    gl_FragColor = texture2D(atlas, uv / atlasSize);\n}\n"

/***/ }),
/* 118 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ImageRenderUnit; });
/* harmony import */ var _shader_image_vert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(119);
/* harmony import */ var _shader_image_vert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_shader_image_vert__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shader_image_frag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(120);
/* harmony import */ var _shader_image_frag__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_shader_image_frag__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(23);
/* harmony import */ var _world_primitive_render_unit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(100);
/* harmony import */ var _render_state__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(10);






const RENDER_STATE = new _render_state__WEBPACK_IMPORTED_MODULE_4__["default"](_render_state__WEBPACK_IMPORTED_MODULE_4__["BLEND_OVER_RENDER_STATE"]);
function createDefaultProgram(context) {
    return context.createProgram(_shader_image_vert__WEBPACK_IMPORTED_MODULE_0___default.a, _shader_image_frag__WEBPACK_IMPORTED_MODULE_1___default.a, {
        attribMap: {
            vertexPosHigh: 0 /* POSITION_HIGH */,
            vertexPosLow: 1 /* POSITION_LOW */,
            vertexUV: 4 /* UV */
        }
    });
}
/**
 * Renderer of image primitives.
 */
class ImageRenderUnit extends _world_primitive_render_unit__WEBPACK_IMPORTED_MODULE_3__["default"] {
    constructor(context, primitiveProvider, program = createDefaultProgram(context)) {
        super(context, RENDER_STATE, program, primitiveProvider);
        this._atlasSizeUniform = _math_vector2__WEBPACK_IMPORTED_MODULE_2__["create"](0, 0);
        context.bindProgram(program);
        program.setIntScalarUniform('atlas', 0);
    }
    _renderBatch(memoryBatch) {
        const atlas = memoryBatch.firstPrimitive.atlas;
        this._atlasSizeUniform.x = atlas.width;
        this._atlasSizeUniform.y = atlas.height;
        if (atlas.isDirty) {
            atlas.syncTexture();
        }
        this._program.setVector2Uniform('atlasSize', this._atlasSizeUniform);
        this._context.bindTextureUnit(0);
        this._context.bindTexture(atlas.texture);
        super._renderBatch(memoryBatch);
    }
    _canBatchAdjacentPrimitives(a, b) {
        return super._canBatchAdjacentPrimitives(a, b) && (a.atlas === b.atlas);
    }
}


/***/ }),
/* 119 */
/***/ (function(module, exports) {

module.exports = "#version 100\n#define GLSLIFY 1\n\nattribute vec2 vertexPosHigh;\nattribute vec2 vertexPosLow;\nattribute vec2 vertexUV;\n\nuniform vec2 lookAtHigh;\nuniform vec2 lookAtLow;\nuniform mat4 viewProjMatrix;\n\nvarying vec2 uv;\n\nconst float YV_H = 1.999969482421875;\nconst float YV_L = 0.000030517112463712692;\n\nvoid main() {\n    vec4 position = viewProjMatrix * vec4(\n        YV_H * (vertexPosHigh - lookAtHigh) +\n            YV_L * (vertexPosLow - lookAtLow),\n        0,\n        1\n    );\n\n    gl_Position = position;\n\n    uv = vertexUV;\n}\n"

/***/ }),
/* 120 */
/***/ (function(module, exports) {

module.exports = "#version 100\nprecision mediump float;\n#define GLSLIFY 1\n\nuniform sampler2D atlas;\nuniform vec2 atlasSize;\n\nvarying vec2 uv;\n\nvoid main() {\n    gl_FragColor = texture2D(atlas, uv / atlasSize);\n\n    if (gl_FragColor.a == 0.0) {\n        discard;\n    }\n}\n"

/***/ }),
/* 121 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ModelRenderUnit; });
/* harmony import */ var _shader_model_vert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(122);
/* harmony import */ var _shader_model_vert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_shader_model_vert__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shader_model_frag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(123);
/* harmony import */ var _shader_model_frag__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_shader_model_frag__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(23);
/* harmony import */ var _overlay_overlay_renderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(124);
/* harmony import */ var _render_state__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(10);
/* harmony import */ var _world_primitive_render_unit__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(100);






const RENDER_STATE = new _render_state__WEBPACK_IMPORTED_MODULE_4__["default"]({
    depthTest: true
});
/**
 * Renderer of models. It renders models into a texture with depth test and then this texture into the render target.
 * It allows to show only the top facets of semi-transparent objects without exposing their inner structure.
 */
class ModelRenderUnit extends _world_primitive_render_unit__WEBPACK_IMPORTED_MODULE_5__["default"] {
    constructor(context, primitiveProvider) {
        const program = context.createProgram(_shader_model_vert__WEBPACK_IMPORTED_MODULE_0___default.a, _shader_model_frag__WEBPACK_IMPORTED_MODULE_1___default.a, {
            attribMap: {
                vertexPosHigh: 0 /* POSITION_HIGH */,
                vertexPosLow: 1 /* POSITION_LOW */,
                vertexHeight: 3 /* HEIGHT */,
                vertexColor: 7 /* COLOR */
            }
        });
        super(context, RENDER_STATE, program, primitiveProvider);
        this._outputSize = Object(_math_vector2__WEBPACK_IMPORTED_MODULE_2__["createExtent2"])(-1, -1);
        this._overlayRenderer = new _overlay_overlay_renderer__WEBPACK_IMPORTED_MODULE_3__["default"](context);
    }
    render(target, viewProjMatrix, cameraPositions) {
        this._syncOutputBuffer(target);
        super.render(this._outputBuffer, viewProjMatrix, cameraPositions);
        // do not run unnecessary copying if this._outputBuffer was not updated (no models in scene?)
        if (!this._outputBuffer.isClear) {
            // copy into the final target
            this._overlayRenderer.render(target, this._outputTexture);
        }
    }
    destroy() {
        this._overlayRenderer.destroy();
        if (this._outputTexture) {
            this._outputTexture.destroy();
        }
        if (this._outputDepthBuffer) {
            this._outputDepthBuffer.destroy();
        }
        if (this._outputBuffer) {
            this._outputBuffer.destroy();
        }
        super.destroy();
    }
    _syncOutputBuffer(target) {
        // make sure the intermediate texture fits the output target
        if (this._outputSize.width !== target.getWidth() ||
            this._outputSize.height !== target.getHeight()) {
            if (this._outputTexture || this._outputDepthBuffer || this._outputBuffer) {
                this._outputTexture.destroy();
                this._outputDepthBuffer.destroy();
                this._outputBuffer.destroy();
            }
            this._outputSize = { width: target.getWidth(), height: target.getHeight() };
            this._outputTexture = this._context.createEmpty2DTexture(this._outputSize.width, this._outputSize.height, 6408 /* RGBA */, 5121 /* UNSIGNED_BYTE */);
            this._outputDepthBuffer = this._context.createRenderbuffer(this._outputSize.width, this._outputSize.height, 34041 /* DEPTH_STENCIL */);
            this._outputBuffer = this._context.createFramebuffer({
                color: this._outputTexture,
                depthStencil: this._outputDepthBuffer
            });
        }
    }
    /**
     * Overridden _bindRenderTarget() to bind intermediate render target to render models into and
     * later put its content into the final target.
     */
    _prepareRenderTarget(target, viewProjMatrix, cameraPositions) {
        super._prepareRenderTarget(target, viewProjMatrix, cameraPositions);
        this._context.clearCurrentTarget(16384 /* COLOR_BUFFER_BIT */ | 256 /* DEPTH_BUFFER_BIT */);
    }
}


/***/ }),
/* 122 */
/***/ (function(module, exports) {

module.exports = "#version 100\n#define GLSLIFY 1\n\nattribute vec3 vertexPosHigh;\nattribute vec3 vertexPosLow;\nattribute float vertexHeight;\nattribute vec4 vertexColor;\n\nuniform vec2 lookAtHigh;\nuniform vec2 lookAtLow;\nuniform mat4 viewProjMatrix;\n\nvarying vec4 globalPos;\nvarying vec4 diffuseColor;\n\nconst float YV_H = 1.999969482421875;\nconst float YV_L = 0.000030517112463712692;\n\nvoid main(void) {\n    globalPos = vec4(\n        YV_H * (vertexPosHigh.xy - lookAtHigh) + YV_L * (vertexPosLow.xy - lookAtLow),\n        vertexHeight,\n        1\n    );\n\n    gl_Position = viewProjMatrix * globalPos;\n    diffuseColor = vertexColor;\n}\n"

/***/ }),
/* 123 */
/***/ (function(module, exports) {

module.exports = "#version 100\n\n#extension GL_OES_standard_derivatives : require\n\nprecision mediump float;\n#define GLSLIFY 1\n\nvarying vec4 diffuseColor;\nvarying vec4 globalPos;\n\nconst vec3 LIGHT_DIRECTION = normalize(vec3(0.5, 0.5, 1.0));\nconst float LIGHT_INTENSITY = 0.3;\nconst float AMBIENT_LIGHT_INTENSITY = 1.0 - LIGHT_INTENSITY;\nconst float HORIZONTAL_PLANE_DIFFUSE_INTENSITY =\n    AMBIENT_LIGHT_INTENSITY + 0.5 * LIGHT_INTENSITY * (LIGHT_DIRECTION.z + 1.0);\n\nvoid main(void) {\n    vec3 pos = globalPos.xyz;\n\n    vec3 dxpos = normalize(dFdx(pos));\n    vec3 dypos = normalize(dFdy(pos));\n    vec3 normal = normalize(cross(dxpos, dypos));\n\n    gl_FragColor = vec4(\n        diffuseColor.rgb * (AMBIENT_LIGHT_INTENSITY + 0.5 * LIGHT_INTENSITY * (dot(normal, LIGHT_DIRECTION) + 1.0)) /\n            HORIZONTAL_PLANE_DIFFUSE_INTENSITY,\n        diffuseColor.a\n    );\n}\n"

/***/ }),
/* 124 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return OverlayRenderer; });
/* harmony import */ var _shader_overlay_vert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(125);
/* harmony import */ var _shader_overlay_vert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_shader_overlay_vert__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shader_overlay_frag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(126);
/* harmony import */ var _shader_overlay_frag__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_shader_overlay_frag__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _render_gl_renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(101);
/* harmony import */ var _render_state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);





const RENDER_STATE = new _render_state__WEBPACK_IMPORTED_MODULE_3__["default"](_render_state__WEBPACK_IMPORTED_MODULE_3__["BLEND_OVER_RENDER_STATE"]);
/**
 * Renders a texture into a render target with OVER compositing. The texture will completely overlay the target, i.e.
 * it is stretched/shrinked to fit the target width/height, so ideally they should have the same dimensions.
 */
class OverlayRenderer extends _render_gl_renderer__WEBPACK_IMPORTED_MODULE_2__["GlRenderer"] {
    constructor(context) {
        const program = context.createProgram(_shader_overlay_vert__WEBPACK_IMPORTED_MODULE_0___default.a, _shader_overlay_frag__WEBPACK_IMPORTED_MODULE_1___default.a, {
            attribMap: {
                vertexPosition: 0 /* POSITION */,
                vertexUV: 4 /* UV */
            }
        });
        super(context, RENDER_STATE, program);
    }
    _render(texture) {
        this._context.bindTextureUnit(0);
        this._context.bindTexture(texture);
        this._context.bindQuadVao();
        this._context.drawQuad();
    }
}


/***/ }),
/* 125 */
/***/ (function(module, exports) {

module.exports = "#version 100\nprecision mediump float;\n#define GLSLIFY 1\n\nattribute vec2 vertexPosition;\nattribute vec2 vertexUV;\n\nvarying vec2 uv;\n\nvoid main() {\n    gl_Position = vec4(vertexPosition, 0, 1);\n    uv = vertexUV;\n}\n"

/***/ }),
/* 126 */
/***/ (function(module, exports) {

module.exports = "#version 100\nprecision mediump float;\n#define GLSLIFY 1\n\nuniform sampler2D texture;\n\nvarying vec2 uv;\n\nvoid main() {\n    gl_FragColor = texture2D(texture, uv);\n}\n"

/***/ }),
/* 127 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TexturedPolylineRenderUnit; });
/* harmony import */ var _shader_textured_polyline_vert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(128);
/* harmony import */ var _shader_textured_polyline_vert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_shader_textured_polyline_vert__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shader_textured_polyline_frag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(129);
/* harmony import */ var _shader_textured_polyline_frag__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_shader_textured_polyline_frag__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(23);
/* harmony import */ var _render_state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _base_polyline_render_unit__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(130);





const FILTER_RADIUS = 1.0 / devicePixelRatio;
const RENDER_STATE = new _render_state__WEBPACK_IMPORTED_MODULE_3__["default"](_render_state__WEBPACK_IMPORTED_MODULE_3__["BLEND_OVER_PREMULTIPLIED_ALPHA_RENDER_STATE"], {
    depthTest: true,
    depthMask: false,
    depthFunc: 518 /* GREATER_OR_EQUAL */
});
/**
 * Renderer of polyline primitives.
 */
class TexturedPolylineRenderUnit extends _base_polyline_render_unit__WEBPACK_IMPORTED_MODULE_4__["default"] {
    constructor(context, camera, primitiveProvider) {
        const program = context.createProgram(_shader_textured_polyline_vert__WEBPACK_IMPORTED_MODULE_0___default.a, _shader_textured_polyline_frag__WEBPACK_IMPORTED_MODULE_1___default.a, {
            defines: {
                FILTER_RADIUS: `float(${FILTER_RADIUS})`
            },
            attribMap: {
                vertexPosHigh: 0 /* POSITION_HIGH */,
                vertexPosLow: 1 /* POSITION_LOW */,
                vertexDisplacement: 6 /* DISPLACEMENT */,
                vertexUV: 4 /* UV */,
                vertexZIndex: 9 /* PRIORITY */,
                vertexHalfWidth: 11 /* AUX */,
                vertexPattern: 12 /* AUX1 */,
                vertexPatternHalfHeight: 13 /* AUX2 */
            }
        });
        super(context, RENDER_STATE, program, primitiveProvider, camera);
        this._atlasSizeUniform = _math_vector2__WEBPACK_IMPORTED_MODULE_2__["create"](0, 0);
        context.bindProgram(program);
        program.setIntScalarUniform('atlas', 0);
    }
    _renderBatch(memoryBatch) {
        const atlas = memoryBatch.firstPrimitive.atlas;
        this._atlasSizeUniform.x = atlas.width;
        this._atlasSizeUniform.y = atlas.height;
        if (atlas.isDirty) {
            atlas.syncTexture();
        }
        this._program.setVector2Uniform('atlasSize', this._atlasSizeUniform);
        this._context.bindTextureUnit(0);
        this._context.bindTexture(atlas.texture);
        super._renderBatch(memoryBatch);
    }
    _canBatchAdjacentPrimitives(a, b) {
        return super._canBatchAdjacentPrimitives(a, b) && (a.atlas === b.atlas);
    }
}


/***/ }),
/* 128 */
/***/ (function(module, exports) {

module.exports = "#version 100\n#define GLSLIFY 1\n\n#ifndef FILTER_RADIUS\n#   error FILTER_RADIUS must be set\n#endif\n\nattribute vec2 vertexPosHigh;\nattribute vec2 vertexPosLow;\nattribute vec2 vertexDisplacement;\nattribute vec2 vertexUV;\nattribute float vertexHalfWidth;\nattribute vec2 vertexPattern;\nattribute float vertexPatternHalfHeight;\nattribute float vertexZIndex;\n\nuniform vec2 lookAtHigh;\nuniform vec2 lookAtLow;\nuniform mat4 viewProjMatrix;\nuniform float worldToPxFactor;\n\nvarying vec2 uv;\nvarying float s;\nvarying float patternLength;\nvarying float len;\nvarying float halfWidth;\nvarying float extHalfWidth;\nvarying float patternHalfHeight;\n\nconst float YV_H = 1.999969482421875;\nconst float YV_L = 0.000030517112463712692;\n\nvoid main(void) {\n    halfWidth = vertexHalfWidth;\n    extHalfWidth = halfWidth + FILTER_RADIUS;\n\n    vec4 position = viewProjMatrix * vec4(\n        YV_H * (vertexPosHigh - lookAtHigh) +\n            YV_L * (vertexPosLow - lookAtLow) +\n                worldToPxFactor * extHalfWidth * vertexDisplacement,\n        0,\n        1\n    );\n\n    position.xy /= position.w;\n    position.z = vertexZIndex;\n    position.w = 1.0;\n\n    gl_Position = position;\n\n    patternLength = vertexPattern[0];\n    len = vertexPattern[1];\n    // Distance to the analytical line along segment's normal\n    s = sign(vertexPatternHalfHeight) * extHalfWidth;\n    // The whole texture is being sampled to the original geometry. For pixels in the extended polyline part the topmost\n    // (bottommost) texels are taken. To make this happen the UV texture coordinates are extended in proportion to the\n    // polyline width extension.\n    patternHalfHeight = abs(vertexPatternHalfHeight);\n    uv = vec2(vertexUV.x, vertexUV.y - vertexPatternHalfHeight * FILTER_RADIUS / halfWidth);\n}\n"

/***/ }),
/* 129 */
/***/ (function(module, exports) {

module.exports = "#version 100\n\n#ifndef FILTER_RADIUS\n#   error FILTER_RADIUS must be set\n#endif\n\nprecision mediump float;\n#define GLSLIFY 1\n\nuniform sampler2D atlas;\nuniform vec2 atlasSize;\n\nvarying vec2 uv;\nvarying float s;\nvarying float patternLength;\nvarying float len;\nvarying float halfWidth;\nvarying float extHalfWidth;\nvarying float patternHalfHeight;\n\nvoid main(void) {\n    lowp float alpha = smoothstep(0.0, FILTER_RADIUS + min(FILTER_RADIUS, extHalfWidth), extHalfWidth - abs(s));\n\n    // Clamp texture U coordinate by 0.5px from both sides to avoid bleeding.\n    vec2 uvAdjusted = vec2(uv.x + clamp(mod(len, patternLength), 0.5, patternLength - 0.5), uv.y);\n    // UV texture coordinates have been extended in proportion to the polyline width extension.\n    // Clamp texture V coordinate to the original geometry minus 0.5px to avoid bleeding.\n    float patternToGeometryFactor = halfWidth / patternHalfHeight;\n    float clampTo = halfWidth - 0.5 * patternToGeometryFactor;\n    if (step(clampTo, abs(s)) == 1.) {\n        float delta = s - clamp(s, -clampTo, clampTo);\n        uvAdjusted.y += delta / patternToGeometryFactor;\n    }\n\n    lowp vec4 color = texture2D(atlas, uvAdjusted / atlasSize);\n    gl_FragColor = color * alpha;\n}\n"

/***/ }),
/* 130 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return BasePolylineRenderUnit; });
/* harmony import */ var _world_primitive_render_unit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(100);

/**
 * Base renderer of polyline primitives.
 */
class BasePolylineRenderUnit extends _world_primitive_render_unit__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(context, renderState, program, primitiveProvider, camera) {
        super(context, renderState, program, primitiveProvider);
        this._camera = camera;
    }
    _prepareProgram(program, viewProjMatrix, cameraPositions) {
        super._prepareProgram(program, viewProjMatrix, cameraPositions);
        program.setScalarUniform('worldToPxFactor', this._camera.worldToPxFactor);
    }
}


/***/ }),
/* 131 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_RENDER_STATE_PARAMS", function() { return DEFAULT_RENDER_STATE_PARAMS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PolylineRenderUnit; });
/* harmony import */ var _primitive_polyline_polyline_buffer_writer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(132);
/* harmony import */ var _shader_polyline_vert__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(133);
/* harmony import */ var _shader_polyline_vert__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_shader_polyline_vert__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _shader_polyline_frag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(134);
/* harmony import */ var _shader_polyline_frag__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_shader_polyline_frag__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _base_polyline_render_unit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(130);
/* harmony import */ var _render_state__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(10);





// Values was chosen by team consensus in VECTOR-197
const FILTER_RADIUS = 1.0 / devicePixelRatio; // px
const DEFAULT_RENDER_STATE_PARAMS = {
    blend: true,
    blendFuncSrcRgb: 1 /* ONE */,
    blendFuncDstRgb: 771 /* ONE_MINUS_SRC_ALPHA */,
    blendFuncSrcAlpha: 1 /* ONE */,
    blendFuncDstAlpha: 771 /* ONE_MINUS_SRC_ALPHA */
};
/**
 * Renderer of polyline primitives. Its default render state is aimed to render opaque polylines.
 */
class PolylineRenderUnit extends _base_polyline_render_unit__WEBPACK_IMPORTED_MODULE_3__["default"] {
    constructor(context, camera, primitiveProvider, renderState = new _render_state__WEBPACK_IMPORTED_MODULE_4__["default"](DEFAULT_RENDER_STATE_PARAMS)) {
        const program = context.createProgram(_shader_polyline_vert__WEBPACK_IMPORTED_MODULE_1___default.a, _shader_polyline_frag__WEBPACK_IMPORTED_MODULE_2___default.a, {
            defines: {
                FILTER_RADIUS: `float(${FILTER_RADIUS})`,
                MAX_HALF_WIDTH: `float(${_primitive_polyline_polyline_buffer_writer__WEBPACK_IMPORTED_MODULE_0__["MAX_HALF_WIDTH"]})`,
                MAX_FILL_GAP: `float(${_primitive_polyline_polyline_buffer_writer__WEBPACK_IMPORTED_MODULE_0__["MAX_FILL_GAP"]})`
            },
            attribMap: {
                vertexPos: 0 /* POSITION */,
                vertexNormalPacked: 5 /* NORMAL */,
                vertexUvPacked: 4 /* UV */,
                vertexWidthFillGap: 11 /* AUX */,
                vertexColor: 7 /* COLOR */,
                vertexMiter: 12 /* AUX1 */,
                vertexVLimit: 13 /* AUX2 */,
                vertexLength: 14 /* AUX3 */
            }
        });
        super(context, renderState, program, primitiveProvider, camera);
    }
}


/***/ }),
/* 132 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAX_HALF_WIDTH", function() { return MAX_HALF_WIDTH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAX_FILL_GAP", function() { return MAX_FILL_GAP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PolylineBufferWriter; });
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(23);
/* harmony import */ var _util_color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11);
/* harmony import */ var _util_buffer_writer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(36);
/* harmony import */ var _polyline_attribute_mapping__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(62);
/* harmony import */ var _util_gputypes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(37);
/* harmony import */ var _util_z_index__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(53);
/* harmony import */ var _math_scalar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(16);







/**
 * Computes miter of a join between two segments.
 *
 * @param n1 Normal vector of the first segment.
 * @param n2 Normal vector of the second segment.
 * @returns Miter value, i.e. by how match displacement is longer than a normal
 *      one.
 */
function computeMiter(n1, n2) {
    return Math.sqrt(2 / (1 + _math_vector2__WEBPACK_IMPORTED_MODULE_0__["dot"](n1, n2)));
}
const SEGMENT_VERTEX_COUNT = 4;
const SQUARE_CAP_VERTEX_COUNT = 5;
const ROUND_CAP_VERTEX_COUNT = 4;
const FLOAT_MAX = 3.4028234663852886e+38;
const MITER_LIMIT = 4;
const UV_POS_ONE_PACKED = 255; // packed 1
const UV_NEG_ONE_PACKED = 1; // packed -1
const UV_ZERO_PACKED = 128;
/**
 * Packs a component of uv into a unsigned 8-bit value. After packing -1 will
 * become 1 and 1 will become 255. That's need to emulate zero-preserving
 * normalization (we can't rely on WebGL to do it for us :().
 *
 * @param c The component.
 * @returns Packed component.
 */
function packUvComponent(c) {
    // We don't truncate here because buffer writer will do that for us.
    return 128 + (127 * c);
}
/**
 * Half width of the polyline is stored in a normalized attribute. This constant
 * defines half width value of 1 corresponds to.
 */
const MAX_HALF_WIDTH = 255 / 4; // px
/**
 * Same as for polyline half width, but for dash pattern definition.
 */
const MAX_FILL_GAP = 255; // px
class PolylineBufferWriter extends _util_buffer_writer__WEBPACK_IMPORTED_MODULE_2__["default"] {
    constructor() {
        super(_polyline_attribute_mapping__WEBPACK_IMPORTED_MODULE_3__["POLYLINE_ATTRIBUTE_MAPPING"].vertexByteSize);
        this._displacement = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0);
        this._prevDisplacement = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0);
        this._initPolylineState([_math_vector2__WEBPACK_IMPORTED_MODULE_0__["ZERO"], _math_vector2__WEBPACK_IMPORTED_MODULE_0__["ZERO"]], 0, 0, 0, 0, 0 /* MITER */, 0);
    }
    /**
     * Generates a mesh for a polyline with a given style, baking all necessary
     * parameters into attributes.
     *
     * @param polyline The polyline.
     * @param style The polyline style.
     * @returns Location of the written mesh in the managed buffers.
     */
    writePolyline(polyline, style, zIndex) {
        const { vertices } = polyline;
        const lastIdx = vertices.length - 1;
        if (lastIdx < 1) {
            throw new Error('One vertex in not a polyline. It\'s not even a line.');
        }
        this._initPolylineState(vertices, Object(_util_color__WEBPACK_IMPORTED_MODULE_1__["encodeRgba8"])(style.strokeColor), style.strokeWidth, style.dash ? style.dash.fill : 0, style.dash ? style.dash.gap : 0, style.join, Object(_util_z_index__WEBPACK_IMPORTED_MODULE_5__["intToZIndex"])(zIndex));
        this._writeCap(style.startCap, vertices[0], 1);
        for (let i = 1; i < lastIdx; ++i) {
            this._writeSegment(vertices[i - 1], vertices[i], vertices[i + 1]);
            this._writeJoin(vertices[i]);
        }
        this._writeLastSegment(vertices[lastIdx - 1], vertices[lastIdx]);
        this._writeCap(style.endCap, vertices[lastIdx], 1);
        return this.endMesh();
    }
    _initPolylineState(vertices, colorRgba8, width, fill, gap, join, zIndex) {
        this._baseIndex = this._polylineLength = this._lastDirection = 0;
        this._lastSignedMiter = 1;
        const displacement = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["sub"](vertices[1], vertices[0], this._displacement);
        this._segmentLength = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["length"](displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["divn"](displacement, this._segmentLength, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["rotate90"](displacement, displacement);
        this._colorRgba8 = colorRgba8;
        this._halfWidthFillGapPacked =
            Object(_util_gputypes__WEBPACK_IMPORTED_MODULE_4__["floatToUint8"])(Object(_math_scalar__WEBPACK_IMPORTED_MODULE_6__["clamp"])(0.5 * width, 0, MAX_HALF_WIDTH) / MAX_HALF_WIDTH) |
                Object(_util_gputypes__WEBPACK_IMPORTED_MODULE_4__["floatToUint8"])(Object(_math_scalar__WEBPACK_IMPORTED_MODULE_6__["clamp"])(fill, 0, MAX_FILL_GAP) / MAX_FILL_GAP) << 8 |
                Object(_util_gputypes__WEBPACK_IMPORTED_MODULE_4__["floatToUint8"])(Object(_math_scalar__WEBPACK_IMPORTED_MODULE_6__["clamp"])(gap, 0, MAX_FILL_GAP) / MAX_FILL_GAP) << 16;
        this._join = join;
        this._zIndex = zIndex;
    }
    /**
     * Writes a single vertex into managed vertex buffer.
     *
     * @param position Vertex world position.
     * @param normal Normal of segment the vertex belongs to.
     * @param u Normalized distance to the polyline along the normal.
     * @param v Normalized distance to the polyline along the tangent.
     * @param polylineLength Distance to the first vertex along the polyline.
     * @param miter Join miter.
     * @param lengthCorrectionLimit Limit on the vertex displacement along the
     *      polyline.
     */
    _writeVertex(position, normal, uPacked, vPacked, polylineLength, miter, lengthCorrectionLimit) {
        this._writeWorldCoordinate(position);
        this._writeHalfWords(Object(_util_gputypes__WEBPACK_IMPORTED_MODULE_4__["floatToUint16"])(0.5 * (normal.x * Math.SQRT1_2 + 1)), Object(_util_gputypes__WEBPACK_IMPORTED_MODULE_4__["floatToUint16"])(0.5 * (normal.y * Math.SQRT1_2 + 1)));
        this._writeHalfWords(uPacked, vPacked);
        this._writeWord(this._halfWidthFillGapPacked);
        this._writeFloat32(miter);
        this._writeFloat32(lengthCorrectionLimit);
        this._writeFloat32(polylineLength);
        this._writeWord(this._colorRgba8);
        this._writeFloat32(this._zIndex);
    }
    _writeCap(cap, endVertex, displacementSign) {
        switch (cap) {
            case 1 /* ROUND */:
                this._writeRoundCap(endVertex, displacementSign);
                break;
            case 2 /* SQUARE */:
                this._writeSquareCap(endVertex, displacementSign);
                break;
        }
    }
    _writeRoundCap(endVertex, displacementSign) {
        const displacement = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0);
        const polylineLength = this._polylineLength;
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](this._displacement, -displacementSign, displacement);
        this._writeVertex(endVertex, displacement, UV_NEG_ONE_PACKED, UV_ZERO_PACKED, polylineLength, 1, FLOAT_MAX);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["rotate90"](this._displacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["sub"](displacement, this._displacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](displacement, displacementSign, displacement);
        this._writeVertex(endVertex, displacement, UV_NEG_ONE_PACKED, UV_POS_ONE_PACKED, polylineLength, 1, FLOAT_MAX);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](this._displacement, displacementSign, displacement);
        this._writeVertex(endVertex, displacement, UV_POS_ONE_PACKED, UV_ZERO_PACKED, polylineLength, 1, FLOAT_MAX);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["rotate90"](this._displacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["add"](displacement, this._displacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](displacement, displacementSign, displacement);
        this._writeVertex(endVertex, displacement, UV_POS_ONE_PACKED, UV_POS_ONE_PACKED, polylineLength, 1, FLOAT_MAX);
        this.writeIndicesForContinuousStrip(ROUND_CAP_VERTEX_COUNT, this._baseIndex);
        this._baseIndex += ROUND_CAP_VERTEX_COUNT;
    }
    _writeSquareCap(endVertex, displacementSign) {
        const displacement = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0);
        const polylineLength = this._polylineLength;
        this._writeVertex(endVertex, _math_vector2__WEBPACK_IMPORTED_MODULE_0__["ZERO"], UV_ZERO_PACKED, UV_ZERO_PACKED, polylineLength, 1, 0);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](this._displacement, -displacementSign, displacement);
        this._writeVertex(endVertex, displacement, UV_POS_ONE_PACKED, UV_ZERO_PACKED, polylineLength, 1, FLOAT_MAX);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["rotate90"](this._displacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["sub"](displacement, this._displacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](displacement, displacementSign, displacement);
        this._writeVertex(endVertex, displacement, UV_POS_ONE_PACKED, UV_ZERO_PACKED, polylineLength, 1, FLOAT_MAX);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["rotate90"](this._displacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["sub"](displacement, this._displacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](displacement, displacementSign, displacement);
        this._writeVertex(endVertex, displacement, UV_POS_ONE_PACKED, UV_ZERO_PACKED, polylineLength, 1, FLOAT_MAX);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](this._displacement, displacementSign, displacement);
        this._writeVertex(endVertex, this._displacement, UV_POS_ONE_PACKED, UV_ZERO_PACKED, polylineLength, 1, FLOAT_MAX);
        this.writeIndicesForContinuousFan(SQUARE_CAP_VERTEX_COUNT, this._baseIndex);
        this._baseIndex += SQUARE_CAP_VERTEX_COUNT;
    }
    _writeSegment(start, end, nextEnd) {
        const displacement = this._displacement;
        const polylineLength = this._polylineLength;
        const nextSegmentLength = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["distance"](nextEnd, end);
        const nextSegmentNormal = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["sub"](nextEnd, end);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["divn"](nextSegmentNormal, nextSegmentLength, nextSegmentNormal);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["rotate90"](nextSegmentNormal, nextSegmentNormal);
        const direction1 = this._lastDirection;
        const direction2 = Math.sign(_math_vector2__WEBPACK_IMPORTED_MODULE_0__["crossZ"](displacement, nextSegmentNormal));
        const miter1 = this._lastSignedMiter;
        const miter2 = computeMiter(displacement, nextSegmentNormal);
        this._writeVertex(start, displacement, UV_POS_ONE_PACKED, UV_ZERO_PACKED, polylineLength, direction1 === -1 && (this._join !== 0 /* MITER */ || Math.abs(miter1) > MITER_LIMIT) ?
            1 :
            miter1, direction1 === -1 ? -FLOAT_MAX : 0.5 * this._segmentLength);
        this._writeVertex(end, displacement, UV_POS_ONE_PACKED, UV_ZERO_PACKED, polylineLength + this._segmentLength, direction2 === -1 && (this._join !== 0 /* MITER */ || miter2 > MITER_LIMIT) ?
            1 :
            direction2 * miter2, direction2 === -1 ? FLOAT_MAX : -0.5 * this._segmentLength);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["invert"](displacement, displacement);
        this._writeVertex(start, displacement, UV_NEG_ONE_PACKED, UV_ZERO_PACKED, polylineLength, direction1 === 1 && (this._join !== 0 /* MITER */ || Math.abs(miter1) > MITER_LIMIT) ?
            1 :
            miter1, direction1 === 1 ? -FLOAT_MAX : 0.5 * this._segmentLength);
        this._writeVertex(end, displacement, UV_NEG_ONE_PACKED, UV_ZERO_PACKED, polylineLength + this._segmentLength, direction2 === 1 && (this._join !== 0 /* MITER */ || miter2 > MITER_LIMIT) ?
            1 :
            direction2 * miter2, direction2 === 1 ? FLOAT_MAX : -0.5 * this._segmentLength);
        this.writeIndicesForContinuousStrip(SEGMENT_VERTEX_COUNT, this._baseIndex);
        this._baseIndex += SEGMENT_VERTEX_COUNT;
        this._lastSignedMiter = -direction2 * miter2;
        this._lastDirection = direction2;
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["copy"](displacement, this._prevDisplacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["copy"](nextSegmentNormal, displacement);
        this._polylineLength += this._segmentLength;
        this._segmentLength = nextSegmentLength;
    }
    _writeJoin(joinVertex) {
        switch (this._join) {
            case 2 /* BEVEL */:
                this._writeBevelJoin(joinVertex);
                break;
            case 1 /* ROUND */:
                this._writeRoundJoin(joinVertex);
                break;
            case 0 /* MITER */:
                if (Math.abs(this._lastSignedMiter) > MITER_LIMIT) {
                    this._writeBevelJoin(joinVertex);
                }
                break;
        }
    }
    _writeBevelJoin(joinVertex) {
        const lastDirection = this._lastDirection;
        const displacement = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["invert"](this._displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["add"](displacement, this._prevDisplacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](displacement, 0.5 * lastDirection, displacement);
        this._writeVertex(joinVertex, displacement, lastDirection === -1 /* LEFT */ ?
            UV_POS_ONE_PACKED :
            UV_NEG_ONE_PACKED, UV_ZERO_PACKED, this._polylineLength, 1, 1);
        const baseIndex = this._baseIndex;
        this.writeIndices([
            baseIndex - 1,
            baseIndex - 3,
            baseIndex,
            baseIndex,
            lastDirection === -1 /* LEFT */ ? baseIndex + 1 : baseIndex + 3,
            lastDirection === -1 /* LEFT */ ? baseIndex + 3 : baseIndex + 1
        ]);
        this._baseIndex += 1;
    }
    _writeRoundJoin(joinVertex) {
        const polylineLength = this._polylineLength;
        this._writeVertex(joinVertex, _math_vector2__WEBPACK_IMPORTED_MODULE_0__["ZERO"], UV_ZERO_PACKED, UV_ZERO_PACKED, polylineLength, 0, 0);
        const lastDirection = this._lastDirection;
        const middleDisplacement = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["invert"](this._prevDisplacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["add"](this._displacement, middleDisplacement, middleDisplacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["normalize"](middleDisplacement, middleDisplacement);
        const displacement = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["invert"](this._prevDisplacement);
        const miter1 = computeMiter(middleDisplacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["add"](displacement, middleDisplacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["normalize"](displacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](displacement, -lastDirection * miter1, displacement);
        this._writeVertex(joinVertex, displacement, lastDirection === -1 /* LEFT */ ?
            UV_POS_ONE_PACKED :
            UV_NEG_ONE_PACKED, packUvComponent(Math.sqrt(miter1 * miter1 - 1)), polylineLength, 1, FLOAT_MAX);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](middleDisplacement, -lastDirection, displacement);
        this._writeVertex(joinVertex, displacement, lastDirection === -1 /* LEFT */ ?
            UV_POS_ONE_PACKED :
            UV_NEG_ONE_PACKED, UV_ZERO_PACKED, polylineLength, 1, FLOAT_MAX);
        const miter2 = computeMiter(middleDisplacement, this._displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["add"](this._displacement, middleDisplacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["normalize"](displacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](displacement, -lastDirection * miter2, displacement);
        this._writeVertex(joinVertex, displacement, lastDirection === -1 /* LEFT */ ?
            UV_POS_ONE_PACKED :
            UV_NEG_ONE_PACKED, packUvComponent(Math.sqrt(miter2 * miter2 - 1)), polylineLength, 1, FLOAT_MAX);
        const baseIndex = this._baseIndex;
        this.writeIndices([
            baseIndex - 3,
            baseIndex - 1,
            baseIndex,
            baseIndex,
            lastDirection === -1 /* LEFT */ ? baseIndex - 3 : baseIndex - 1,
            baseIndex + 1,
            baseIndex,
            baseIndex + 1,
            baseIndex + 2,
            baseIndex,
            baseIndex + 2,
            baseIndex + 3,
            baseIndex,
            baseIndex + 3,
            lastDirection === -1 /* LEFT */ ? baseIndex + 4 : baseIndex + 6,
            baseIndex,
            baseIndex + 4,
            baseIndex + 6
        ]);
        this._baseIndex += 4;
    }
    _writeLastSegment(start, end) {
        const displacement = this._displacement;
        const lastDirection = this._lastDirection;
        const polylineLength = this._polylineLength;
        const miter = this._lastSignedMiter;
        this._writeVertex(start, displacement, UV_POS_ONE_PACKED, UV_ZERO_PACKED, polylineLength, lastDirection === -1 /* LEFT */ && (this._join !== 0 /* MITER */ || Math.abs(miter) > MITER_LIMIT) ?
            1 :
            miter, lastDirection === -1 /* LEFT */ ? -FLOAT_MAX : this._segmentLength);
        this._writeVertex(end, displacement, UV_POS_ONE_PACKED, UV_ZERO_PACKED, polylineLength + this._segmentLength, 1, FLOAT_MAX);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["invert"](displacement, displacement);
        this._writeVertex(start, displacement, UV_NEG_ONE_PACKED, UV_ZERO_PACKED, polylineLength, lastDirection === 1 /* RIGHT */ && (this._join !== 0 /* MITER */ || Math.abs(miter) > MITER_LIMIT) ?
            1 :
            miter, lastDirection === 1 /* RIGHT */ ? -FLOAT_MAX : this._segmentLength);
        this._writeVertex(end, displacement, UV_NEG_ONE_PACKED, UV_ZERO_PACKED, polylineLength + this._segmentLength, 1, FLOAT_MAX);
        this.writeIndicesForContinuousStrip(SEGMENT_VERTEX_COUNT, this._baseIndex);
        this._baseIndex += SEGMENT_VERTEX_COUNT;
    }
}


/***/ }),
/* 133 */
/***/ (function(module, exports) {

module.exports = "#version 100\n#define GLSLIFY 1\n\n#ifndef FILTER_RADIUS\n#   error FILTER_RADIUS must be set\n#endif\n\n#ifndef MAX_HALF_WIDTH\n#   error MAX_HALF_WIDTH must be set\n#endif\n\n#ifndef MAX_FILL_GAP\n#   error MAX_FILL_GAP must be set\n#endif\n\nattribute vec4 vertexPos;\nattribute vec2 vertexNormalPacked;\nattribute vec2 vertexUvPacked;\nattribute vec3 vertexWidthFillGap;\nattribute vec4 vertexColor;\nattribute float vertexMiter;\nattribute float vertexVLimit;\nattribute float vertexLength;\n\nuniform vec2 lookAtHigh;\nuniform vec2 lookAtLow;\nuniform mat4 viewProjMatrix;\nuniform float worldToPxFactor;\n\nvarying vec2 uv;\nvarying float len;\nvarying float halfWidth;\nvarying vec3 dash;\nvarying vec4 color;\n\nconst float YV_H = 1.999969482421875;\nconst float YV_L = 0.000030517112463712692;\nconst vec4 YV_HHLL = vec4(YV_H, YV_H, YV_L, YV_L);\n\nconst float SQRT2 = 1.4142135381698608;\n\nvec2 unpackUv(const in vec2 uv) {\n    return (uv - 128.) / 127.;\n}\n\nvoid main(void) {\n    vec2 normal = (2.0 * vertexNormalPacked - 1.0) * SQRT2;\n\n    halfWidth = float(MAX_HALF_WIDTH) * vertexWidthFillGap.x;\n    halfWidth += FILTER_RADIUS;\n\n    float tangentLength = min(\n        sqrt(vertexMiter * vertexMiter - 1.) * halfWidth * worldToPxFactor,\n        abs(vertexVLimit)\n    );\n\n    vec4 lookAt = vec4(lookAtHigh, lookAtLow);\n    vec4 relativeToEyePosition = YV_HHLL * (vertexPos - lookAt);\n\n    gl_Position = viewProjMatrix * vec4(\n        relativeToEyePosition.xy + relativeToEyePosition.zw +\n                worldToPxFactor * halfWidth * normal -\n                    sign(vertexMiter) * tangentLength * vec2(normal.y, -normal.x),\n        0,\n        1\n    );\n\n    uv = unpackUv(vertexUvPacked) * halfWidth;\n    len = (vertexLength + sign(vertexVLimit) * tangentLength) / worldToPxFactor;\n\n    dash.xy = vec2(MAX_FILL_GAP) * vertexWidthFillGap.yz;\n    dash.z = dash.x + dash.y;\n\n    color = vertexColor;\n    color.rgb *= color.a;\n}\n"

/***/ }),
/* 134 */
/***/ (function(module, exports) {

module.exports = "#version 100\n#define GLSLIFY 1\n\n#ifndef FILTER_RADIUS\n#   error FILTER_RADIUS must be set\n#endif\n\nvarying highp vec2 uv;\nvarying highp float len;\nvarying highp float halfWidth;\nvarying lowp vec3 dash;\nvarying lowp vec4 color;\n\nvoid main(void) {\n    lowp float alpha =\n        smoothstep(0.0, FILTER_RADIUS + min(FILTER_RADIUS, halfWidth), halfWidth - length(uv));\n\n    if (dash.z > 0.0) {\n        lowp vec3 halfDash = dash * 0.5;\n        lowp float dashPhase = mod(len + halfDash.y, dash.z);\n        lowp float r = min(FILTER_RADIUS, halfDash.y);\n\n        alpha *= smoothstep(-r, r, halfDash.x - abs(dashPhase - halfDash.z));\n    }\n\n    gl_FragColor = color * alpha;\n}\n"

/***/ }),
/* 135 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TexturedPolygonRenderUnit; });
/* harmony import */ var _shader_textured_polygon_vert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(136);
/* harmony import */ var _shader_textured_polygon_vert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_shader_textured_polygon_vert__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shader_textured_polygon_frag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(137);
/* harmony import */ var _shader_textured_polygon_frag__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_shader_textured_polygon_frag__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(23);
/* harmony import */ var _render_state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _world_primitive_render_unit__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(100);






const RENDER_STATE = new _render_state__WEBPACK_IMPORTED_MODULE_3__["default"](_render_state__WEBPACK_IMPORTED_MODULE_3__["BLEND_OVER_RENDER_STATE"], {
    depthTest: true,
    depthMask: false,
    depthFunc: 518 /* GREATER_OR_EQUAL */
});
/**
 * Renderer of polyline primitives.
 */
class TexturedPolygonRenderUnit extends _world_primitive_render_unit__WEBPACK_IMPORTED_MODULE_4__["default"] {
    constructor(context, primitiveProvider) {
        const program = context.createProgram(_shader_textured_polygon_vert__WEBPACK_IMPORTED_MODULE_0___default.a, _shader_textured_polygon_frag__WEBPACK_IMPORTED_MODULE_1___default.a, {
            attribMap: {
                vertexPosHigh: 0 /* POSITION_HIGH */,
                vertexPosLow: 1 /* POSITION_LOW */,
                vertexUV: 4 /* UV */,
                vertexImageScale: 11 /* AUX */,
                vertexZIndex: 10 /* Z_INDEX */
            }
        });
        super(context, RENDER_STATE, program, primitiveProvider);
        this._atlasSizeUniform = _math_vector2__WEBPACK_IMPORTED_MODULE_2__["create"](0, 0);
        context.bindProgram(program);
        program.setIntScalarUniform('atlas', 0);
    }
    _renderBatch(memoryBatch) {
        const atlas = memoryBatch.firstPrimitive.atlas;
        this._atlasSizeUniform.x = atlas.width;
        this._atlasSizeUniform.y = atlas.height;
        if (atlas.isDirty) {
            atlas.syncTexture();
        }
        this._program.setVector2Uniform('atlasSize', this._atlasSizeUniform);
        this._context.bindTextureUnit(0);
        this._context.bindTexture(atlas.texture);
        super._renderBatch(memoryBatch);
    }
    _canBatchAdjacentPrimitives(a, b) {
        return super._canBatchAdjacentPrimitives(a, b) && (a.atlas === b.atlas);
    }
}


/***/ }),
/* 136 */
/***/ (function(module, exports) {

module.exports = "#version 100\n#define GLSLIFY 1\n\nattribute vec2 vertexPosHigh;\nattribute vec2 vertexPosLow;\nattribute vec4 vertexUV;\nattribute float vertexImageScale;\nattribute float vertexZIndex;\n\nuniform vec2 lookAtHigh;\nuniform vec2 lookAtLow;\nuniform mat4 viewProjMatrix;\n\nvarying vec2 uvPosition;\nvarying vec2 textureSize;\nvarying vec2 uvDisplacement;\n\nconst float YV_H = 1.999969482421875;\nconst float YV_L = 0.000030517112463712692;\n\nvoid main(void) {\n    uvPosition = vertexUV.xy;\n    textureSize = vertexUV.zw;\n\n    // The same pattern image should match across multiple (usually adjacent) polygons and it should have\n    // stable position realtive to the polygon. Also pattern is repeated at both directions.\n    // To meet these requirements the world is covered (virtually) by a texture of appropriate size (repeated image)\n    // and vertex coordinates are mapped to these texture coordinates (uvDisplacement).\n    // But due to limited precision we've got to work with \"narrow\" floats (as it is done in world position calculation):\n    //   1. calculate how big texture pattern in world coordinates (scaledTextureSize)\n    //   2. find the closest to eye coordinates texture base point (the bottom left point of the pattern)\n    //   3. use vertex position and textureBasePoint vectors to find coordinates in virtual texture\n    //   4. find uv coordinates in real texture using mod operation\n    //\n    // Both textureBasePoint and position are relativelly small vectors so that precision requirements are met,\n    // and correct interpolation of repeated image is possible by using single base point in all vertices.\n\n    vec2 scaledTextureSize = textureSize * vertexImageScale; // texture size in world coordinates\n    vec2 textureBasePoint = mod(YV_H * lookAtHigh, scaledTextureSize) + mod(YV_L * lookAtLow, scaledTextureSize);\n    vec2 position = YV_H * (vertexPosHigh - lookAtHigh) + YV_L * (vertexPosLow - lookAtLow);\n\n    gl_Position = viewProjMatrix * vec4(position, 0, 1);\n    gl_Position.xy /= gl_Position.w;\n    gl_Position.z = vertexZIndex;\n    gl_Position.w = 1.0;\n\n    // convert world coordinates back to teture pixels\n    uvDisplacement = (position + textureBasePoint) / vertexImageScale;\n}\n"

/***/ }),
/* 137 */
/***/ (function(module, exports) {

module.exports = "#version 100\n\nprecision mediump float;\n#define GLSLIFY 1\n\nuniform sampler2D atlas;\nuniform vec2 atlasSize;\n\nvarying vec2 uvPosition;\nvarying vec2 textureSize;\nvarying vec2 uvDisplacement;\n\nvoid main(void) {\n    vec2 uvAdjusted = vec2(\n        uvPosition.x + mod(uvDisplacement.x, textureSize.x),\n        uvPosition.y + mod(uvDisplacement.y, textureSize.y)\n    );\n\n    gl_FragColor = texture2D(atlas, uvAdjusted / atlasSize);\n}\n"

/***/ }),
/* 138 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TransparentPolygonRenderUnit; });
/* harmony import */ var _polygon_render_unit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(139);
/* harmony import */ var _render_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(10);




/**
 * Renderer of transparent polygon primitives.
 */
class TransparentPolygonRenderUnit extends _polygon_render_unit__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(context, primitiveProvider) {
        super(context, primitiveProvider, new _render_state__WEBPACK_IMPORTED_MODULE_1__["default"](_polygon_render_unit__WEBPACK_IMPORTED_MODULE_0__["DEFAULT_RENDER_STATE_PARAMS"], { depthMask: false }, _render_state__WEBPACK_IMPORTED_MODULE_1__["BLEND_OVER_RENDER_STATE"]));
    }
}


/***/ }),
/* 139 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_RENDER_STATE_PARAMS", function() { return DEFAULT_RENDER_STATE_PARAMS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PolygonRenderUnit; });
/* harmony import */ var _shader_polygon_vert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(140);
/* harmony import */ var _shader_polygon_vert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_shader_polygon_vert__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shader_polygon_frag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(141);
/* harmony import */ var _shader_polygon_frag__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_shader_polygon_frag__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _render_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(10);
/* harmony import */ var _world_primitive_render_unit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(100);




const DEFAULT_RENDER_STATE_PARAMS = {
    depthTest: true,
    depthFunc: 518 /* GREATER_OR_EQUAL */
};
/**
 * Renderer of polygon primitives.
 */
class PolygonRenderUnit extends _world_primitive_render_unit__WEBPACK_IMPORTED_MODULE_3__["default"] {
    constructor(context, primitiveProvider, renderState = new _render_state__WEBPACK_IMPORTED_MODULE_2__["default"](DEFAULT_RENDER_STATE_PARAMS)) {
        const program = context.createProgram(_shader_polygon_vert__WEBPACK_IMPORTED_MODULE_0___default.a, _shader_polygon_frag__WEBPACK_IMPORTED_MODULE_1___default.a, {
            attribMap: {
                vertexPosHigh: 0 /* POSITION_HIGH */,
                vertexPosLow: 1 /* POSITION_LOW */,
                vertexColor: 7 /* COLOR */,
                vertexZIndex: 10 /* Z_INDEX */
            }
        });
        super(context, renderState, program, primitiveProvider);
    }
}


/***/ }),
/* 140 */
/***/ (function(module, exports) {

module.exports = "#version 100\n#define GLSLIFY 1\n\nattribute vec2 vertexPosHigh;\nattribute vec2 vertexPosLow;\nattribute vec4 vertexColor;\nattribute float vertexZIndex;\n\nuniform vec2 lookAtHigh;\nuniform vec2 lookAtLow;\nuniform mat4 viewProjMatrix;\n\nvarying vec4 color;\n\nconst float YV_H = 1.999969482421875;\nconst float YV_L = 0.000030517112463712692;\n\nvoid main(void) {\n    vec4 position = viewProjMatrix * vec4(\n        YV_H * (vertexPosHigh - lookAtHigh) +\n            YV_L * (vertexPosLow - lookAtLow),\n        0,\n        1\n    );\n\n    position.xy /= position.w;\n    position.z = vertexZIndex;\n    position.w = 1.0;\n\n    gl_Position = position;\n\n    color = vertexColor;\n}\n"

/***/ }),
/* 141 */
/***/ (function(module, exports) {

module.exports = "#version 100\n#define GLSLIFY 1\n\nvarying lowp vec4 color;\n\nvoid main(void) {\n    gl_FragColor = color;\n}\n"

/***/ }),
/* 142 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MapEngine; });
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(143);
/* harmony import */ var _render_fxaa_render_unit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(176);
/* harmony import */ var _render_background_render_unit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(179);
/* harmony import */ var _render_layer_render_unit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(181);




/**
 * Ground layer with background that goes right after sub render units. It allows to add other LayerRenderUnits above
 * groundLayer without worrying that they destroy depth information collected on ground and broke background (that has
 * a performance optimisation: it uses depth information from the layers below to prevent extensive pixel overwriting).
 */
class BackgroundedGroundLayer extends _render_layer_render_unit__WEBPACK_IMPORTED_MODULE_3__["default"] {
    constructor(context, depthClearStrategy = 0 /* NO_CLEAR */) {
        super(context, depthClearStrategy);
        this._background = new _render_background_render_unit__WEBPACK_IMPORTED_MODULE_2__["default"](context);
    }
    render(target, ...args) {
        super.render(target, ...args);
        this._background.render(target);
    }
}
class MapEngine extends _engine__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(context, camera, renderLoop) {
        super(context, camera, renderLoop);
        this._destroyables = [];
        const antialiasingLayer = new _render_fxaa_render_unit__WEBPACK_IMPORTED_MODULE_1__["default"](context, this.renderLoop);
        this.backgoundLayer = new _render_layer_render_unit__WEBPACK_IMPORTED_MODULE_3__["default"](context);
        this.groundLayer = new BackgroundedGroundLayer(context);
        this.buildingsLayer = new _render_layer_render_unit__WEBPACK_IMPORTED_MODULE_3__["default"](context);
        this.iconsLayer = new _render_layer_render_unit__WEBPACK_IMPORTED_MODULE_3__["default"](context);
        this.labelsLayer = new _render_layer_render_unit__WEBPACK_IMPORTED_MODULE_3__["default"](context);
        antialiasingLayer.addRenderUnit(this.buildingsLayer);
        this.renderer.addRenderUnit(this.backgoundLayer);
        this.renderer.addRenderUnit(this.groundLayer);
        this.renderer.addRenderUnit(antialiasingLayer);
        this.renderer.addRenderUnit(this.iconsLayer);
        this.renderer.addRenderUnit(this.labelsLayer);
        this._destroyables.push(antialiasingLayer);
        // force initial rendering (no data yet, just background) as the canvas (black) can already be visible to users,
        // renderer is called directly (without scheduling via render loop) as it is pretty much safe to assume
        // that no rendering is scheduled for this frame, and deferred update can potentially cause a single frame blink
        this.renderer.render(this._renderTarget);
    }
    destroy() {
        // destroy in reverse order to prevent potential issues if destroyables own each other
        for (let i = this._destroyables.length - 1; i >= 0; i--) {
            this._destroyables[i].destroy();
        }
        super.destroy();
    }
}


/***/ }),
/* 143 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Engine; });
/* harmony import */ var _util_event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14);
/* harmony import */ var _render_font_renderable_df_glyph_atlas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(144);
/* harmony import */ var _font_df_font_registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(146);
/* harmony import */ var _render_billboard_renderable_image_atlas__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(148);
/* harmony import */ var _visibility_visibility_manager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(154);
/* harmony import */ var _util_median_filter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(170);
/* harmony import */ var _util_stat__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(34);
/* harmony import */ var _render_main_render_unit__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(171);
/* harmony import */ var _render_memory_manager__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(173);









class Engine {
    constructor(context, camera, renderLoop) {
        this.context = context;
        this._camera = camera;
        this._renderTarget = context.getDefaultRenderTarget();
        this.renderer = new _render_main_render_unit__WEBPACK_IMPORTED_MODULE_7__["default"](context, camera);
        this.renderLoop = renderLoop;
        this.memoryManager = new _render_memory_manager__WEBPACK_IMPORTED_MODULE_8__["default"](context);
        this._atlases = new Set();
        this.visibilityManager = new _visibility_visibility_manager__WEBPACK_IMPORTED_MODULE_4__["default"](context, camera, renderLoop, this._renderTarget.getWidth(), this._renderTarget.getHeight());
        this.visbilityTextureProvider = () => {
            this.visibilityManager.updateVisibilityIfNeeded();
            return this.visibilityManager.visibilityTexture;
        };
        this._frameTimingsListener = this._onFrameTimesFull.bind(this);
        renderLoop.onFrameTimesFull.addListener(this._frameTimingsListener);
        this._renderListener = this._onRender.bind(this);
        renderLoop.onRender.addListener(this._renderListener);
        this._updateListener = () => this.renderLoop.update();
        this.glyphAtlas = new _render_font_renderable_df_glyph_atlas__WEBPACK_IMPORTED_MODULE_1__["default"](context);
        this.fontRegistry = new _font_df_font_registry__WEBPACK_IMPORTED_MODULE_2__["default"]();
        this.onInternalError = new _util_event_emitter__WEBPACK_IMPORTED_MODULE_0__["VoidEventEmitter"]();
        this._camera.onUpdate.addListener(this._updateListener);
        this.renderer.onUpdate.addListener(this._updateListener);
        this._contextLostListener = () => this.onInternalError.fire();
        this.context.onLoss.addListener(this._contextLostListener);
    }
    setRenderTargetSize(width, height) {
        if (this._renderTarget.getWidth() !== width ||
            this._renderTarget.getHeight() !== height) {
            this._renderTarget.setSize(width, height);
            this.visibilityManager.setTargetSize(width, height);
        }
    }
    createImageAtlas(params) {
        const atlas = new _render_billboard_renderable_image_atlas__WEBPACK_IMPORTED_MODULE_3__["default"](this.context, params);
        atlas.onContentUpdate.addListener(this._updateListener);
        this._atlases.add(atlas);
        return atlas;
    }
    removeImageAtlas(atlas) {
        atlas.destroy();
        atlas.onContentUpdate.removeListener(this._updateListener);
        this._atlases.delete(atlas);
    }
    getCamera() {
        return this._camera;
    }
    destroy() {
        this._camera.onUpdate.removeListener(this._updateListener);
        this.renderer.onUpdate.removeListener(this._updateListener);
        for (const atlas of this._atlases) {
            atlas.onContentUpdate.removeListener(this._updateListener);
            atlas.destroy();
        }
        this.glyphAtlas.destroy();
        this.context.onLoss.removeListener(this._contextLostListener);
    }
    _onRender() {
        this.renderer.render(this._renderTarget);
    }
    _onFrameTimesFull(times) {
        Object(_util_stat__WEBPACK_IMPORTED_MODULE_6__["countFps"])(1e3 * times.length / Object(_util_median_filter__WEBPACK_IMPORTED_MODULE_5__["medianFilter"])(times).reduce((sum, time) => sum + time));
        // For now we acquire frame timing and log them only once a session.
        this.renderLoop.onFrameTimesFull.removeListener(this._frameTimingsListener);
    }
}


/***/ }),
/* 144 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RenderableDfGlyphAtlas; });
/* harmony import */ var _font_df_glyph_atlas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(145);

/**
 * Atlas that manages allocation in GL texture.
 */
class RenderableDfGlyphAtlas extends _font_df_glyph_atlas__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(context) {
        super(0, 0, new Uint8Array(0), new Map());
        this._context = context;
        this.texture = this._createTexture(0, 0);
    }
    destroy() {
        this.texture.destroy();
    }
    /**
     * Updates the whole content of the glyph bitmap atlas, texture also get updated.
     *
     * @param width new bitmap width
     * @param height new bitmap height
     * @param data, length should be strictly equal to width * height
     */
    updateContent(width, height, data, glyphLocations) {
        this.width = width;
        this.height = height;
        this.data = data;
        this._glyphLocations = glyphLocations;
        const texture = this.texture;
        if (!texture || texture.getWidth() !== width || texture.getHeight() !== height) {
            if (this.texture) {
                this.texture.destroy();
            }
            this.texture = this._createTexture(width, height);
        }
        this._context.setTextureData(this.texture, data);
    }
    _createTexture(width, height) {
        return this._context.createEmpty2DTexture(width, height, 6406 /* ALPHA */, 5121 /* UNSIGNED_BYTE */, {
            wrapS: 33071 /* CLAMP_TO_EDGE */,
            wrapT: 33071 /* CLAMP_TO_EDGE */,
            magnificationFilter: 9729 /* LINEAR */,
            minificationFilter: 9729 /* LINEAR */,
            premultipliedAlpha: false
        });
    }
}


/***/ }),
/* 145 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return DfGlyphAtlas; });
const UNKNOWN_GLYPH_LOCATION = {
    minX: 0,
    maxX: 0,
    minY: 0,
    maxY: 0
};
/**
 * Abstract glyph atlas interface.
 */
class DfGlyphAtlas {
    constructor(width, height, data, glyphLocations) {
        this.width = width;
        this.height = height;
        this.data = data;
        this._glyphLocations = glyphLocations;
    }
    /**
     * @return Glyph location or fake location pointing to the origin (0, 0).
     */
    getGlyphLocation(fontId, glyphId) {
        const glyphLocation = this._glyphLocations.get(fontId + glyphId);
        if (glyphLocation) {
            return glyphLocation;
        }
        else {
            console.warn('Wow-wow-wow, something went wrong, you should not request nonexistent glyph locations');
            return UNKNOWN_GLYPH_LOCATION;
        }
    }
    /**
     * @return All glyph locations as [glyph id, glyph location] array. Glyph id is font id concatenated with glyph id.
     */
    getAllGlyphLocations() {
        return [...this._glyphLocations.entries()];
    }
}


/***/ }),
/* 146 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return DfFontRegistry; });
/* harmony import */ var _font_registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(147);
/* harmony import */ var _df_font__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(44);


/**
 * Registry that stores distance field fonts.
 */
class DfFontRegistry extends _font_registry__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(new _df_font__WEBPACK_IMPORTED_MODULE_1__["default"]('UNKNOWN_DF_FONT', 14, 0));
    }
}


/***/ }),
/* 147 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return FontRegistry; });
/**
 * A central storage of all available fonts.
 */
class FontRegistry {
    /**
     * @param unknownFontInstance An instance of specific font type to be served as a stub when nonexistent font
     *     is requested. Requesting nonexistent fonts normally should not happen.
     *     The stub just allows to avoid tedious null checks in registry clients.
     */
    constructor(unknownFontInstance) {
        this._fonts = new Map();
        this._unknownFontInstance = unknownFontInstance;
    }
    /**
     * @return If a font with specified id is in the registry.
     */
    contains(fontId) {
        return this._fonts.has(fontId);
    }
    /**
     * @return Font with specified id or unknown font instance if it is not found.
     */
    get(fontId) {
        const font = this._fonts.get(fontId);
        if (font) {
            return font;
        }
        else {
            console.warn('Wow-wow-wow, something went wrong, you should not request nonexistent fonts');
            return this._unknownFontInstance;
        }
    }
    /**
     * @return All stored fonts.
     */
    getAll() {
        return [...this._fonts.values()];
    }
    /**
     * Adds new for to the registry.
     */
    add(font) {
        this._fonts.set(font.id, font);
    }
}


/***/ }),
/* 148 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RenderableImageAtlas; });
/* harmony import */ var _billboard_image_atlas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(149);

/**
 * Atlas that manages allocation in GL texture.
 */
class RenderableImageAtlas extends _billboard_image_atlas__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(context, params) {
        super();
        const { filter, premultipliedAlpha } = params;
        this._context = context;
        this._filter = filter;
        this._premultipliedAlpha = premultipliedAlpha;
        this.texture = this._createTexture(this.width, this.height, filter, premultipliedAlpha);
        this.isDirty = false;
    }
    /**
     * Updates GL texture with changed data. Should be called after each image added to take effect in shaders.
     */
    syncTexture() {
        this._context.setTextureDataFromDomElement(this.texture, this.canvas);
        this.isDirty = false;
    }
    updateImage(location, sourceImage, locationRegion, sourceImageRegion) {
        super.updateImage(location, sourceImage, locationRegion, sourceImageRegion);
        this.isDirty = true;
    }
    destroy() {
        this.texture.destroy();
    }
    _expand(newWidth, newHeight) {
        super._expand(newWidth, newHeight);
        this.texture.destroy();
        this.texture = this._createTexture(this.width, this.height, this._filter, this._premultipliedAlpha);
        this.isDirty = true;
    }
    _createTexture(width, height, filter, premultipliedAlpha) {
        return this._context.createEmpty2DTexture(width, height, 6408 /* RGBA */, 5121 /* UNSIGNED_BYTE */, {
            minificationFilter: filter,
            magnificationFilter: filter,
            wrapS: 33071 /* CLAMP_TO_EDGE */,
            wrapT: 33071 /* CLAMP_TO_EDGE */,
            premultipliedAlpha
        });
    }
}


/***/ }),
/* 149 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ImageAtlas; });
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(23);
/* harmony import */ var _util_allocator_2d__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(150);
/* harmony import */ var _util_event_emitter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(14);



const INIT_ATLAS_WIDTH = 256;
const INIT_ATLAS_HEIGHT = 256;
const MAX_ATLAS_WIDTH = 2048;
const MAX_ATLAS_HEIGHT = 2048;
const EXPAND_FACTOR = 2;
/**
 * Manages allocation of images. It resizes itself (up to a fixed limit) when there is no region
 * of enough size for the next image.
 */
class ImageAtlas {
    constructor(initAtlasWidth = INIT_ATLAS_WIDTH, initAtlasHeight = INIT_ATLAS_HEIGHT) {
        this.onContentUpdate = new _util_event_emitter__WEBPACK_IMPORTED_MODULE_2__["VoidEventEmitter"]();
        this.canvas = document.createElement('canvas');
        this.canvas.width = initAtlasWidth;
        this.canvas.height = initAtlasHeight;
        this._canvasContext = this.canvas.getContext('2d');
        this._allocator = new _util_allocator_2d__WEBPACK_IMPORTED_MODULE_1__["ShelfAllocator2D"](this.width, this.height);
    }
    get width() {
        return this.canvas.width;
    }
    get height() {
        return this.canvas.height;
    }
    /**
     * Allocates image bitmap.
     */
    allocateImage(descriptor, image) {
        const location = this._allocate(descriptor);
        if (location) {
            const region = Object(_math_vector2__WEBPACK_IMPORTED_MODULE_0__["createBBox2"])(0, descriptor.width, 0, descriptor.height);
            this.updateImage(location, image, region, region);
        }
        return location;
    }
    /**
     * Reserves space of appropriate size that can be updated later with updateImage() method.
     */
    reserveLocation(descriptor) {
        return this._allocate(descriptor);
    }
    /**
     * Updates image content in appropriate location. Assumes that there is really such location reserved,
     * no check for this is done.
     *
     * @param location Location in atlas of the image.
     * @param sourceImage Image to update atlas from.
     * @param locationRegion Region (bbox with coordinates relative to the location's bbox) of the location to update.
     * @param sourceImageRegion Region of the image (BBox2 in image's coordinate space) to be copied into atlas.
     */
    updateImage(location, sourceImage, locationRegion = Object(_math_vector2__WEBPACK_IMPORTED_MODULE_0__["createBBox2"])(0, location.maxX - location.minX, 0, location.maxY - location.minY), sourceImageRegion = Object(_math_vector2__WEBPACK_IMPORTED_MODULE_0__["createBBox2"])(0, sourceImage.width, 0, sourceImage.height)) {
        const srcX = sourceImageRegion.minX;
        const srcY = sourceImageRegion.minY;
        const srcW = sourceImageRegion.maxX - sourceImageRegion.minX;
        const srcH = sourceImageRegion.maxY - sourceImageRegion.minY;
        const dstX = location.minX + locationRegion.minX;
        const dstY = location.minY + locationRegion.minY;
        const dstW = locationRegion.maxX - locationRegion.minX;
        const dstH = locationRegion.maxY - locationRegion.minY;
        this._canvasContext.clearRect(dstX, dstY, dstW, dstH);
        this._canvasContext.drawImage(sourceImage, srcX, srcY, srcW, srcH, dstX, dstY, dstW, dstH);
        this.onContentUpdate.fire();
    }
    /**
     * Deallocates image from the atlas.
     */
    removeImage(image) {
        this._allocator.deallocate(image);
    }
    _allocate(descriptor) {
        let location = this._allocator.allocate(descriptor);
        // incremental expand can be inefficient if two or more iterations are needed to allocate an image,
        // but it is expected to be a rare (if any) case, rework if it turns out to be wrong
        while (!location) {
            const expandedWidth = this.width * EXPAND_FACTOR;
            const expandedHeight = this.height * EXPAND_FACTOR;
            if (expandedWidth <= MAX_ATLAS_WIDTH && expandedHeight <= MAX_ATLAS_HEIGHT) {
                this._expand(expandedWidth, expandedHeight);
                location = this._allocator.allocate(descriptor);
            }
            else {
                break;
            }
        }
        return location;
    }
    _expand(newWidth, newHeight) {
        this._allocator.resize(newWidth, newHeight);
        // setting new width/height to canvas will clear it,
        // so current data is saved to be restored immediately after resizing
        const data = this._canvasContext.getImageData(0, 0, this.width, this.height);
        this.canvas.width = newWidth;
        this.canvas.height = newHeight;
        this._canvasContext.putImageData(data, 0, 0);
    }
}


/***/ }),
/* 150 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShelfAllocator2D", function() { return ShelfAllocator2D; });
/* harmony import */ var _allocator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(151);

/**
 * A rectangular region with fixed height. Utility class for shelf allocation defined below.
 */
class Shelf {
    constructor(width, height) {
        this.width = width;
        this.height = height;
        this._allocator = new _allocator__WEBPACK_IMPORTED_MODULE_0__["FreeListAllocator"](this.width);
    }
    allocate(width) {
        return this._allocator.allocate(width);
    }
    deallocate(offset) {
        this._allocator.deallocate(offset);
    }
    isAllocated(offset) {
        return this._allocator.isAllocated(offset);
    }
    canAllocate(width) {
        return this._allocator.maxAllocableSize >= width;
    }
    resize(width) {
        this._allocator.extend(width);
        this.width = width;
    }
}
/**
 * Allocates rectangles in "shelves" (height fixed regions). They are created of necessity when the next object doesnt
 * fit any existing shelf. To optimize space usage it tries to find the best shelf for allocation (min height diff).
 * A shelf when allocated is never deallocated back and exists during all the allocator lifetime.
 */
class ShelfAllocator2D {
    constructor(width, height) {
        this.width = width;
        this.height = height;
        this._shelves = new Map();
        this._shelfAllocator = new _allocator__WEBPACK_IMPORTED_MODULE_0__["ArenaAllocator"](height); // no shelf deallocation, that is why ArenaAllocator is fine
    }
    allocate(object) {
        let bestShelf;
        let bestShelfOffset = -1;
        let bestShelfRatio = -1;
        for (const [offset, shelf] of this._shelves.entries()) {
            const shelfRatio = object.height / shelf.height;
            if (shelfRatio === 1 && shelf.canAllocate(object.width)) {
                bestShelf = shelf;
                bestShelfOffset = offset;
                break;
            }
            else if (shelfRatio < 1 && shelfRatio > bestShelfRatio && shelf.canAllocate(object.width)) {
                bestShelf = shelf;
                bestShelfOffset = offset;
                bestShelfRatio = shelfRatio;
            }
        }
        if (!bestShelf && this._shelfAllocator.maxAllocableSize >= object.height && this.width >= object.width) {
            const offset = this._shelfAllocator.allocate(object.height);
            bestShelf = new Shelf(this.width, object.height);
            bestShelfOffset = offset;
            this._shelves.set(offset, bestShelf);
        }
        if (bestShelf) {
            const left = bestShelf.allocate(object.width);
            const top = bestShelfOffset;
            const location = {
                minX: left,
                maxX: left + object.width,
                minY: top,
                maxY: top + object.height
            };
            return location;
        }
        else {
            return null;
        }
    }
    deallocate(objectLocation) {
        const shelf = this._shelves.get(objectLocation.minY);
        if (shelf) {
            shelf.deallocate(objectLocation.minX);
        }
    }
    isAllocated(objectLocation) {
        const shelf = this._shelves.get(objectLocation.minY);
        return !!shelf && shelf.isAllocated(objectLocation.minX);
    }
    resize(width, height) {
        this._shelfAllocator.extend(height);
        for (const shelf of this._shelves.values()) {
            shelf.resize(width);
        }
        this.width = width;
        this.height = height;
    }
}


/***/ }),
/* 151 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArenaAllocator", function() { return ArenaAllocator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FreeListAllocator", function() { return FreeListAllocator; });
/* harmony import */ var _binary_tree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(152);
/* harmony import */ var _linked_set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(153);


/**
 * Alignes an offset so it's a multiple of an alignment.
 *
 * @param offset The offset.
 * @param alignment The alignment.
 * @returns Aligned offset.
 */
function align(offset, alignment) {
    return alignment * Math.ceil(offset / alignment);
}
class ArenaAllocator {
    /**
     * Constructs a new empty arena allocator.
     *
     * @param size Size of managed region.
     * @param alignment alignment of offsets.
     */
    constructor(size, alignment = 1) {
        this._size = size;
        this._alignment = alignment;
        this._freeOffset = 0;
        this._allocatedOffsets = new Set();
    }
    get size() {
        return this._size;
    }
    get maxAllocableSize() {
        return this._size - this._freeOffset;
    }
    get isEmpty() {
        return this._allocatedOffsets.size === 0;
    }
    allocate(size) {
        if (this._size >= this._freeOffset + size) {
            const offset = this._freeOffset;
            this._freeOffset = align(offset + size, this._alignment);
            this._allocatedOffsets.add(offset);
            return offset;
        }
        else {
            return -1;
        }
    }
    deallocate(offset) {
        this._allocatedOffsets.delete(offset);
    }
    isAllocated(offset) {
        return offset < this._freeOffset;
    }
    extend(newSize) {
        if (newSize < this._freeOffset) {
            throw new Error('Could not reduce the size because it conflicts with already allocated region.');
        }
        this._size = newSize;
    }
}
/**
 * Allocator optimised for both primary operations: allocation and deallocation. It uses BST for efficient lookup of
 * suitable free region during allocation and two way linked list for fast adjacent free regions merge.
 * Max allocable size is also determined by means of the BST.
 */
class FreeListAllocator {
    constructor(size) {
        this._size = size;
        this._allRegions = new _linked_set__WEBPACK_IMPORTED_MODULE_1__["default"]();
        this._occupiedRegions = new Map();
        this._freeRegions = new _binary_tree__WEBPACK_IMPORTED_MODULE_0__["BinarySearchTree"]((rangeA, rangeB) => rangeA.size - rangeB.size);
        const initRegion = { offset: 0, size };
        this._allRegions.insert(initRegion);
        initRegion._freeNode = this._freeRegions.insert(initRegion);
    }
    get size() {
        return this._size;
    }
    get maxAllocableSize() {
        const max = this._freeRegions.max;
        return max ? max.size : 0;
    }
    get isEmpty() {
        return this._occupiedRegions.size === 0;
    }
    allocate(size) {
        const node = this._findMinSuitable(size);
        if (!node) {
            return -1;
        }
        const range = node.value;
        // current region is not available anymore
        // it is removed from the free regions pool
        this._freeRegions.remove(node);
        // new occupied one is created
        const occupiedRange = { offset: range.offset, size };
        this._occupiedRegions.set(range.offset, occupiedRange);
        this._allRegions.insertAfter(range, occupiedRange);
        this._allRegions.remove(range);
        // dont loose remaining if any
        // it should be returned back to the free regions pool
        if (range.size > size) {
            const remainingRange = { offset: range.offset + size, size: range.size - size };
            remainingRange._freeNode = this._freeRegions.insert(remainingRange);
            this._allRegions.insertAfter(occupiedRange, remainingRange);
        }
        return occupiedRange.offset;
    }
    deallocate(offset) {
        let region = this._occupiedRegions.get(offset);
        if (region) {
            // check if the region can be merged with its previous neighbor
            const prev = this._allRegions.getPrev(region);
            if (prev && prev._freeNode) {
                const embracingRange = { offset: prev.offset, size: prev.size + region.size };
                this._allRegions.insertAfter(prev, embracingRange);
                this._allRegions.remove(region);
                this._allRegions.remove(prev);
                this._freeRegions.remove(prev._freeNode);
                region = embracingRange;
            }
            // check if the region can be merged with its next neighbor
            const next = this._allRegions.getNext(region);
            if (next && next._freeNode) {
                const embracingRange = { offset: region.offset, size: region.size + next.size };
                this._allRegions.insertBefore(next, embracingRange);
                this._allRegions.remove(region);
                this._allRegions.remove(next);
                this._freeRegions.remove(next._freeNode);
                region = embracingRange;
            }
            this._occupiedRegions.delete(offset);
            region._freeNode = this._freeRegions.insert(region);
        }
    }
    isAllocated(offset) {
        return this._occupiedRegions.has(offset);
    }
    extend(newSize) {
        if (newSize < this._size) {
            throw new Error('Size reducing is not allowed in free list allocator');
        }
        const diff = newSize - this._size;
        const last = this._allRegions.end;
        if (last && last._freeNode) {
            this._freeRegions.remove(last._freeNode);
            const region = { offset: last.offset, size: last.size + diff, isFree: true };
            this._allRegions.insertAfter(last, region);
            this._allRegions.remove(last);
            this._freeRegions.insert(region);
        }
        else {
            const region = { offset: this._size, size: diff, isFree: true };
            this._allRegions.insert(region);
            this._freeRegions.insert(region);
        }
        this._size = newSize;
    }
    /**
     * Traverses BST to find the smallest region required size can fit.
     */
    _findMinSuitable(size) {
        let node = this._freeRegions.root;
        let best;
        while (node) {
            if (node.value.size === size) {
                best = node;
                break;
            }
            else if (node.value.size < size) {
                node = node.right;
            }
            else {
                best = node;
                node = node.left;
            }
        }
        return best;
    }
}


/***/ }),
/* 152 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BinarySearchTree", function() { return BinarySearchTree; });
/**
 * Simple implementation of Binary Search Tree.
 */
class BinarySearchTree {
    /**
     * @param comparator To specify the order of items, that can be any complex objects.
     */
    constructor(comparator) {
        this._comparator = comparator;
        this._size = 0;
    }
    /**
     * @returns The root element or `undefined` if the tree is empty.
     */
    get root() {
        return this._root;
    }
    /**
     * @returns The number of items in the tree.
     */
    get size() {
        return this._size;
    }
    /**
     * @returns The smallest element in the tree or `undefined` the the tree is empty.
     */
    get min() {
        if (this._root) {
            return this._min(this._root).value;
        }
        return undefined;
    }
    /**
     * @returns The biggest element in the tree or `undefined` the the tree is empty.
     */
    get max() {
        if (this._root) {
            return this._max(this._root).value;
        }
        return undefined;
    }
    insert(item) {
        this._size++;
        if (!this._root) {
            this._root = { value: item };
            return this._root;
        }
        let node = this._root;
        while (node) {
            if (this._comparator(item, node.value) < 0) {
                if (!node.left) {
                    return node.left = { parent: node, value: item };
                }
                node = node.left;
            }
            else {
                if (!node.right) {
                    return node.right = { parent: node, value: item };
                }
                node = node.right;
            }
        }
        // impossible to get there, throwing is to make TS analizator happy
        throw new Error();
    }
    remove(node) {
        this._size--;
        if (node.left && node.right) {
            const successor = this._min(node.right);
            this._replaceSubtree(node, successor);
            // update links to children of the removed node
            if (node.left) {
                successor.left = node.left;
                node.left.parent = successor;
            }
            if (node.right) {
                successor.right = node.right;
                node.right.parent = successor;
            }
        }
        else if (node.left) {
            this._replaceSubtree(node, node.left);
        }
        else if (node.right) {
            this._replaceSubtree(node, node.right);
        }
        else {
            this._replaceSubtree(node, undefined);
        }
    }
    /**
     * Iterates elements in ascending order.
     */
    *values(node) {
        if (node) {
            yield* this.values(node.left);
            yield node.value;
            yield* this.values(node.right);
        }
    }
    /**
     * Iterates elements in ascending order.
     */
    [Symbol.iterator]() {
        return this.values(this._root);
    }
    _min(from) {
        let node = from;
        while (node.left) {
            node = node.left;
        }
        return node;
    }
    _max(from) {
        let node = from;
        while (node.right) {
            node = node.right;
        }
        return node;
    }
    /**
     * Reorganizes the tree structure so that the replacement node takes replaceable's position, the latter is removed.
     */
    _replaceSubtree(replaceable, replacement) {
        if (replaceable.parent) {
            if (replaceable.parent.left === replaceable) {
                replaceable.parent.left = replacement;
            }
            else if (replaceable.parent.right === replaceable) {
                replaceable.parent.right = replacement;
            }
        }
        else {
            this._root = replacement;
        }
        if (replacement) {
            // remove replacement from its current location
            if (replacement.parent) {
                if (replacement.parent.left === replacement) {
                    replacement.parent.left = undefined;
                }
                else if (replacement.parent.right === replacement) {
                    replacement.parent.right = undefined;
                }
            }
            replacement.parent = replaceable.parent;
        }
    }
}


/***/ }),
/* 153 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return LinkedSet; });
/**
 * Set with predictable iteration order. Stores items as a two way linked list thus allowing to insert items in between.
 */
class LinkedSet {
    constructor() {
        this._nodes = new Map();
    }
    get begin() {
        return this._begin && this._begin.value;
    }
    get end() {
        return this._end && this._end.value;
    }
    /**
     * Inserts a new item at the end of the set.
     */
    insert(item) {
        if (!this._nodes.has(item)) {
            const node = { value: item };
            if (this._end) {
                this.insertAfter(this._end.value, item);
            }
            else {
                this._begin = this._end = node;
                this._nodes.set(item, node);
            }
        }
    }
    /**
     * Inserts a new item before the specified one. If the before item is not in the set or
     * the item is already inserted nothing happens.
     */
    insertBefore(before, item) {
        const beforeNode = this._nodes.get(before);
        if (beforeNode && !this._nodes.has(item)) {
            const node = { value: item };
            if (beforeNode.prev) {
                beforeNode.prev.next = node;
                node.prev = beforeNode.prev;
            }
            node.next = beforeNode;
            beforeNode.prev = node;
            this._nodes.set(item, node);
            if (beforeNode === this._begin) {
                this._begin = node;
            }
        }
    }
    /**
     * Inserts a new item after the specified one. If the after item is not in the set or
     * the item is already inserted nothing happens.
     */
    insertAfter(after, item) {
        const afterNode = this._nodes.get(after);
        if (afterNode && !this._nodes.has(item)) {
            const node = { value: item };
            if (afterNode.next) {
                afterNode.next.prev = node;
                node.next = afterNode.next;
            }
            node.prev = afterNode;
            afterNode.next = node;
            this._nodes.set(item, node);
            if (afterNode === this._end) {
                this._end = node;
            }
        }
    }
    /**
     * Removes item from the set.
     */
    remove(item) {
        const node = this._nodes.get(item);
        if (node) {
            if (node === this._begin) {
                this._begin = node.next;
            }
            if (node === this._end) {
                this._end = node.prev;
            }
            if (node.next) {
                node.next.prev = node.prev;
            }
            if (node.prev) {
                node.prev.next = node.next;
            }
            this._nodes.delete(item);
        }
    }
    /**
     * @returns `undefined` if the item is not in the set or it is the first elements.
     */
    getPrev(item) {
        const node = this._nodes.get(item);
        if (node && node.prev) {
            return node.prev.value;
        }
        return undefined;
    }
    /**
     * @returns `undefined` if the item is not in the set or it is the last elements.
     */
    getNext(item) {
        const node = this._nodes.get(item);
        if (node && node.next) {
            return node.next.value;
        }
        return undefined;
    }
    /**
     * Iterates over the set from the fist element to the last (in the order of insertion
     * if the insert method was used only).
     */
    *values() {
        let node = this._begin;
        while (node) {
            yield node.value;
            node = node.next;
        }
    }
    /**
     * Iterates over the set from the fist element to the last (in the order of insertion
     * if the insert method was used only).
     */
    [Symbol.iterator]() {
        return this.values();
    }
}


/***/ }),
/* 154 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return VisibilityManager; });
/* harmony import */ var _render_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10);
/* harmony import */ var _util_color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11);
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(23);
/* harmony import */ var _math_vector3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(20);
/* harmony import */ var _math_matrix4__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(19);
/* harmony import */ var _grid_sampler_buffer_writer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(155);
/* harmony import */ var _util_event_emitter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(14);
/* harmony import */ var _grid_renderer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(156);
/* harmony import */ var _visibility_resolution_steps_reset_removed_primitives__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(157);
/* harmony import */ var _visibility_resolution_steps_fadeout_all__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(158);
/* harmony import */ var _visibility_resolution_steps_fadein_visible__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(162);
/* harmony import */ var _visibility_resolution_steps_fadeout_overlapped__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(165);
/* harmony import */ var _render_util_camera_position__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(168);
/* harmony import */ var _util_hd__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(48);














const FADING_STOPPED = -1;
const DEFAULT_FADE_EFFECT_DURATION = 150;
const ID_COMPONENT_SIZE = 256;
const VISIBILITY_INIT_STATE = new _render_state__WEBPACK_IMPORTED_MODULE_0__["default"]({
    clearColor: _util_color__WEBPACK_IMPORTED_MODULE_1__["create"](0, 0, 0, 0),
    dither: false
});
const EMPTY_GRID_CELL = _util_color__WEBPACK_IMPORTED_MODULE_1__["create"](0, 0, 0, 1);
const DIRECT_PRIORITY_GRID_STATE = new _render_state__WEBPACK_IMPORTED_MODULE_0__["default"]({
    clearColor: EMPTY_GRID_CELL,
    depthTest: true,
    clearDepth: 0,
    // primitives with equal priority are resolved as following: later ones overlap previous
    depthFunc: 518 /* GREATER_OR_EQUAL */,
    dither: false
});
const REVERSE_PRIORITY_GRID_STATE = new _render_state__WEBPACK_IMPORTED_MODULE_0__["default"]({
    clearColor: EMPTY_GRID_CELL,
    depthTest: true,
    clearDepth: 1,
    depthFunc: 513 /* LESS */,
    dither: false
});
// size of minimal recognizable square side in css pixels.
const GRID_PRECISION_PX = 6;
/**
 * Apart from being removed from scene there are other reasons for primitives to be invisible: e.g. they are
 * overlapped by primitives with higher priority. This state is highly dynamic, primitives may be of different types,
 * from different sources and they can have quite non-trivial shapes. So there should be a single point of collision
 * resolution for all primitives in scene, that is what visibility manager is.
 *
 * Visibility of primitives is calculated every frame. To support fade-in/out animation visibility value is a factor
 * the alpha channel of a finally rendered primitive is to be multiplied by (value from 0.0 to 1.0). For instance,
 * if an object is just appeared on the scene, this factor will be changed from 0.0 to 1.0 in fadeEffectDurationMs ms.
 * There are 4 steps the whole process can be roughly summarized into:
 *  1. actualization - reset values for removed from scene primitives
 *  2. fade-out all - even though all primitives are faded out at this step, this step is intended for invisible
 *     primitives to animate them disappearing.
 *  3. fade-in visible - check which primitive are visible and increase its alpha visibility value.
 *  4. fade-out overlapped - find overlaps by comparing corresponding pixels of the scene rendered in direct and
 *     reverse priority orders.
 *
 *  Due to the fact that we use grid with finite precision there are some cases where this approach produces
 *  unpleasant artifacts (blinking). To cope with it stability shift and storing zoom of the first overlap are
 *  introduced, but it works well for non-tilted map only.
 */
class VisibilityManager {
    constructor(context, camera, renderLoop, targetWidth, targetHeight, fadeEffectDuration = DEFAULT_FADE_EFFECT_DURATION) {
        this.onRerenderRequired = new _util_event_emitter__WEBPACK_IMPORTED_MODULE_6__["VoidEventEmitter"]();
        this.fadeEffectDuration = fadeEffectDuration;
        this._context = context;
        this._camera = camera;
        this._renderLoop = renderLoop;
        this._lastRenderTimeInLoop = FADING_STOPPED;
        this._prevTargetSize = { width: 0, height: 0 };
        this._sceneUpdateListener = this._onSceneUpdate.bind(this);
        this._camera.onUpdate.addListener(this._sceneUpdateListener);
        this._beforeRenderListener = this._onBeforeRender.bind(this);
        this._renderLoop.onBeforeRender.addListener(this._beforeRenderListener);
        this._directPriorityGridRenderer = new _grid_renderer__WEBPACK_IMPORTED_MODULE_7__["default"](context, DIRECT_PRIORITY_GRID_STATE);
        this._reversePriorityGridRenderer = new _grid_renderer__WEBPACK_IMPORTED_MODULE_7__["default"](context, REVERSE_PRIORITY_GRID_STATE);
        this._currentVisibilityTexture = context.createEmpty2DTexture(ID_COMPONENT_SIZE, ID_COMPONENT_SIZE, 6408 /* RGBA */, 5121 /* UNSIGNED_BYTE */);
        this._prevVisibilityTexture = context.createEmpty2DTexture(ID_COMPONENT_SIZE, ID_COMPONENT_SIZE, 6408 /* RGBA */, 5121 /* UNSIGNED_BYTE */);
        this._currentVisibilityBuffer = context.createFramebuffer({ color: this._currentVisibilityTexture });
        this._prevVisibilityBuffer = context.createFramebuffer({ color: this._prevVisibilityTexture });
        this._stabilityShift = _math_vector3__WEBPACK_IMPORTED_MODULE_3__["create"](0, 0, 0);
        this._gridHalfPxSizeUniform = _math_vector2__WEBPACK_IMPORTED_MODULE_2__["create"](0, 0);
        this._idHalfPxSizeUniform = _math_vector2__WEBPACK_IMPORTED_MODULE_2__["create"](0.5 / ID_COMPONENT_SIZE, 0.5 / ID_COMPONENT_SIZE);
        this._step1ResetRemoved = new _visibility_resolution_steps_reset_removed_primitives__WEBPACK_IMPORTED_MODULE_8__["default"]();
        this._step2FadeoutAll = new _visibility_resolution_steps_fadeout_all__WEBPACK_IMPORTED_MODULE_9__["default"](context);
        this._step3FadeinVisible = new _visibility_resolution_steps_fadein_visible__WEBPACK_IMPORTED_MODULE_10__["default"](context);
        this._step4FadeoutOverlapped = new _visibility_resolution_steps_fadeout_overlapped__WEBPACK_IMPORTED_MODULE_11__["default"](context);
        this._clearVisibility(this._currentVisibilityBuffer);
        this._primitiveProviders = [];
        this._colorIdRenderers = [];
        this._resetRemovedRenderers = [];
        this.setTargetSize(targetWidth, targetHeight);
    }
    get visibilityTexture() {
        return this._currentVisibilityTexture;
    }
    /**
     * To provide proper precision in collision resolution simplified grid size depends on the render target,
     * that can be changed at run time (e.g. the user resizes browser window). A lot of associated GL resources is be
     * updated in that case.
     */
    setTargetSize(width, height) {
        const gridPrecisionTargetPx = GRID_PRECISION_PX * Object(_util_hd__WEBPACK_IMPORTED_MODULE_13__["default"])();
        const gridWidth = Math.ceil(width / gridPrecisionTargetPx);
        const gridHeight = Math.ceil(height / gridPrecisionTargetPx);
        this._directPriorityGridRenderer.setResolution(gridWidth, gridHeight);
        this._reversePriorityGridRenderer.setResolution(gridWidth, gridHeight);
        if (this._gridSamplerVertexBuffer) {
            this._destroyGridResources();
        }
        const overlapSamplerBufferWriter = new _grid_sampler_buffer_writer__WEBPACK_IMPORTED_MODULE_5__["default"](gridWidth, gridHeight);
        const context = this._context;
        this._gridSamplerVertexBuffer = context.createVertexBuffer(overlapSamplerBufferWriter.data.byteLength);
        this._gridSamplerVao = context.createVao(_grid_sampler_buffer_writer__WEBPACK_IMPORTED_MODULE_5__["ATTRIBUTE_MAPPING"], this._gridSamplerVertexBuffer, null);
        this._numberOfGridSamplers = overlapSamplerBufferWriter.numberOfSamplers;
        this._context.uploadDataToBuffer(this._gridSamplerVertexBuffer, overlapSamplerBufferWriter.data);
        this._prevTargetSize.width = width;
        this._prevTargetSize.height = height;
        this._gridHalfPxSizeUniform.x = 0.5 / gridWidth;
        this._gridHalfPxSizeUniform.y = 0.5 / gridHeight;
    }
    /**
     * Recalculates visibility of all colliding primitives in scene.
     *
     * @param target The target the scene is to be rendered into.
     * @param uniforms Set of precalculated uniforms global for current frame.
     * @returns Updated texture with visibility values for all primitives.
     */
    updateVisibilityIfNeeded() {
        if (!this._isDirty) {
            return;
        }
        this._isDirty = false;
        // Rasterization may be not stable in the sense of the shape of pixels occupied by particular object when this
        // object gets shifted (e.g. the user drags the center of the map) and since collisions are detected by
        // overlapped pixels this fact can lead to blinking (found overlapping in one frame/not found in the next/etc).
        // For those objects (and their positions) that are not distorted by perspective it can be fixed by
        // introducing a shift that takes into account the amount of drag and forces vertices to be displaced in the
        // same position in grid's cell.
        const shift = this._stabilityShift;
        _math_vector2__WEBPACK_IMPORTED_MODULE_2__["copy"](this._camera.center, shift);
        shift.z = 0;
        _math_matrix4__WEBPACK_IMPORTED_MODULE_4__["apply"](this._camera.getViewProjMatrix(), shift, shift);
        // NDC (-1 : 1) are 2 times larger than texture coordinates (0 : 1)
        shift.x %= 4 * this._gridHalfPxSizeUniform.x;
        shift.y %= 4 * this._gridHalfPxSizeUniform.y;
        const prevTexture = this._prevVisibilityTexture;
        const prevFramebuffer = this._prevVisibilityBuffer;
        const currentTexture = this._currentVisibilityTexture;
        const currentFramebuffer = this._currentVisibilityBuffer;
        this._clearVisibility(prevFramebuffer);
        // on this step
        this._step1ResetRemoved.render(prevFramebuffer, this._resetRemovedRenderers, currentTexture, this._idHalfPxSizeUniform);
        // pass zoom as a value between 0.0 and 1.0, as absolute value is not important
        const zoom = this._camera.zoom / this._camera.options.maxZoom;
        const viewProjMatrix = this._camera.getViewProjMatrix();
        const cameraPositions = Object(_render_util_camera_position__WEBPACK_IMPORTED_MODULE_12__["calculateCameraPositions"])(this._camera);
        const directPriorityGrid = this._directPriorityGridRenderer.updateGrid(viewProjMatrix, cameraPositions, this._colorIdRenderers, shift, prevTexture, zoom);
        const reversePriorityGrid = this._reversePriorityGridRenderer.updateGrid(viewProjMatrix, cameraPositions, this._colorIdRenderers, shift, prevTexture, zoom);
        const now = performance.now();
        const lastRendering = this._lastRenderTimeInLoop;
        const isAnimationFinished = (now - this._lastSceneUpdateTime) > this.fadeEffectDuration;
        const wasAnimationActive = lastRendering !== FADING_STOPPED;
        const fadeEffect = isAnimationFinished ?
            1.0 : wasAnimationActive ? (now - lastRendering) / this.fadeEffectDuration : 0;
        const idHalfPx = this._idHalfPxSizeUniform;
        const samplerVao = this._gridSamplerVao;
        const numberOfSamplers = this._numberOfGridSamplers;
        this._clearVisibility(currentFramebuffer);
        this._step2FadeoutAll.render(currentFramebuffer, prevTexture, fadeEffect);
        this._step3FadeinVisible.render(currentFramebuffer, samplerVao, numberOfSamplers, directPriorityGrid, prevTexture, idHalfPx, fadeEffect);
        this._step4FadeoutOverlapped.render(currentFramebuffer, samplerVao, numberOfSamplers, directPriorityGrid, reversePriorityGrid, prevTexture, idHalfPx, fadeEffect, zoom);
        // check if we need one more rendering to finish animation
        if (isAnimationFinished) {
            // no more renderings needed for fade effect, its timestamp is marked with special value
            // to take it into account during next fade effect amount calculation
            this._lastRenderTimeInLoop = FADING_STOPPED;
        }
        else {
            this._renderLoop.update();
            this._lastRenderTimeInLoop = now;
        }
    }
    registerCollidingPrimitives(primitiveProvider, colorIdRenderer, resetRemoveRenderer) {
        this._primitiveProviders.push(primitiveProvider);
        this._colorIdRenderers.push(colorIdRenderer);
        this._resetRemovedRenderers.push(resetRemoveRenderer);
        primitiveProvider.onUpdate.addListener(this._sceneUpdateListener);
    }
    deregisterCollidingPrimitives(primitiveProvider, colorIdRenderer, resetRemoveRenderer) {
        let index = this._primitiveProviders.indexOf(primitiveProvider);
        if (index > -1) {
            this._primitiveProviders.splice(index, 1);
        }
        index = this._colorIdRenderers.indexOf(colorIdRenderer);
        if (index > -1) {
            this._colorIdRenderers.splice(index, 1);
        }
        index = this._resetRemovedRenderers.indexOf(resetRemoveRenderer);
        if (index > -1) {
            this._resetRemovedRenderers.splice(index, 1);
        }
        primitiveProvider.onUpdate.removeListener(this._sceneUpdateListener);
    }
    destroy() {
        this._destroyGridResources();
        this._directPriorityGridRenderer.destroy();
        this._reversePriorityGridRenderer.destroy();
        this._camera.onUpdate.removeListener(this._sceneUpdateListener);
        for (const primitiveProvider of this._primitiveProviders) {
            primitiveProvider.onUpdate.removeListener(this._sceneUpdateListener);
        }
    }
    _onSceneUpdate() {
        this._lastSceneUpdateTime = performance.now();
        this._renderLoop.update();
    }
    _onBeforeRender() {
        this._isDirty = true;
    }
    /**
     * Resets visibility texture to its initial state.
     */
    _clearVisibility(target) {
        this._context.bindRenderState(VISIBILITY_INIT_STATE);
        this._context.bindRenderTarget(target);
        this._context.clearCurrentTarget(16384 /* COLOR_BUFFER_BIT */);
    }
    _destroyGridResources() {
        this._gridSamplerVertexBuffer.destroy();
        this._gridSamplerVao.destroy();
    }
}


/***/ }),
/* 155 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ATTRIBUTE_MAPPING", function() { return ATTRIBUTE_MAPPING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GridSamplerBufferWriter; });
/* harmony import */ var _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _util_buffer_writer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(36);
/* harmony import */ var _util_gputypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(37);



const ATTRIBUTE_MAPPING = new _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__["AttributeMapping"]([
    [
        0 /* POSITION */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ]
]);
/**
 * Writes sampler positions into vertex buffer as a regular grid with the step equal to the size of a grid cell.
 * The number of vertices (samplers) is equal to "width x height".
 */
class GridSamplerBufferWriter extends _util_buffer_writer__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor(width, height) {
        const numberOfSamplers = width * height;
        super(ATTRIBUTE_MAPPING.vertexByteSize, numberOfSamplers, undefined, 0);
        const colStep = Object(_util_gputypes__WEBPACK_IMPORTED_MODULE_2__["floatToUint16"])(1.0 / width);
        const rowStep = Object(_util_gputypes__WEBPACK_IMPORTED_MODULE_2__["floatToUint16"])(1.0 / height);
        const colHalfStep = colStep / 2;
        const rowHalfStep = rowStep / 2;
        for (let i = 0, col = colHalfStep; i < width; i++, col += colStep) {
            for (let j = 0, row = rowHalfStep; j < height; j++, row += rowStep) {
                this._writeHalfWords(col, row);
            }
        }
        this.data = this.getBuffers()[0].vertexBuffer;
        this.numberOfSamplers = numberOfSamplers;
    }
}


/***/ }),
/* 156 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GridRenderer; });
/* harmony import */ var _render_gl_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(101);

class GridRenderer extends _render_gl_renderer__WEBPACK_IMPORTED_MODULE_0__["GlRenderer"] {
    constructor(context, renderState) {
        super(context, renderState);
    }
    updateGrid(...args) {
        this.render(this._target, ...args);
        return this._texture;
    }
    _render(viewProjMatrix, cameraPositions, renderers, stabilityShift, prevVisibility, currentZoom) {
        for (const renderer of renderers) {
            renderer.render(this._target, viewProjMatrix, cameraPositions, this._renderState, stabilityShift, prevVisibility, currentZoom);
        }
    }
    /**
     * Updates resolution of the grid.
     */
    setResolution(width, height) {
        this._destroyResources();
        this._depthBuffer = this._context.createRenderbuffer(width, height, 34041 /* DEPTH_STENCIL */);
        this._texture = this._context.createEmpty2DTexture(width, height, 6408 /* RGBA */, 5121 /* UNSIGNED_BYTE */);
        this._target = this._context.createFramebuffer({ color: this._texture, depthStencil: this._depthBuffer });
    }
    destroy() {
        this._destroyResources();
    }
    _prepareRenderTarget(target, ...args) {
        super._prepareRenderTarget(target, ...args);
        this._context.clearCurrentTarget(16384 /* COLOR_BUFFER_BIT */ | 256 /* DEPTH_BUFFER_BIT */);
    }
    _destroyResources() {
        if (this._target) {
            this._target.destroy();
            this._texture.destroy();
            this._depthBuffer.destroy();
        }
    }
}


/***/ }),
/* 157 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ResetRemovedPrimitives; });
/**
 * One of the steps of primitives visibility resolution process. Basically it does nothing, just call appropriate
 * methods of CollidingPrimitiveRenderer's, but it expects that these renderers will copy visibility value of actual
 * primitives only, thus removed primitive's values will be reset (overlap zoom cleared and all that). It is important
 * for reusing these ids for future primitives.
 */
class ResetRemovedPrimitives {
    render(target, renderers, prevVisibility, idHalfPxSizeUniform) {
        for (const renderer of renderers) {
            renderer.render(target, prevVisibility, idHalfPxSizeUniform);
        }
    }
}


/***/ }),
/* 158 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return FadeoutAll; });
/* harmony import */ var _shaders_fadeout_all_vert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(159);
/* harmony import */ var _shaders_fadeout_all_vert__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_shaders_fadeout_all_vert__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shaders_fadeout_all_frag__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(160);
/* harmony import */ var _shaders_fadeout_all_frag__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_shaders_fadeout_all_frag__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _render_gl_renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(101);
/* harmony import */ var _render_state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _id_sampler_buffer_writer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(161);





const STATE = new _render_state__WEBPACK_IMPORTED_MODULE_3__["default"]({
    dither: false
});
/**
 * One of the steps of primitives visibility resolution process. It samples all visibility values and subtract
 * delta (fadeoutAmount) from them, these new values are stored into current visibility texture.
 */
class FadeoutAll extends _render_gl_renderer__WEBPACK_IMPORTED_MODULE_2__["GlRenderer"] {
    constructor(context) {
        const program = context.createProgram(_shaders_fadeout_all_vert__WEBPACK_IMPORTED_MODULE_0___default.a, _shaders_fadeout_all_frag__WEBPACK_IMPORTED_MODULE_1___default.a, {
            attribMap: {
                position: 0 /* POSITION */
            }
        });
        super(context, STATE, program);
        const idSamplerBufferWriter = new _id_sampler_buffer_writer__WEBPACK_IMPORTED_MODULE_4__["default"]();
        this._idSamplerVertexBuffer = this._context.createVertexBuffer(idSamplerBufferWriter.vertexData.byteLength);
        this._idSamplerIndexBuffer = this._context.createIndexBuffer(idSamplerBufferWriter.indexData.byteLength);
        this._idSamplerVao = this._context.createVao(_id_sampler_buffer_writer__WEBPACK_IMPORTED_MODULE_4__["ATTRIBUTE_MAPPING"], this._idSamplerVertexBuffer, this._idSamplerIndexBuffer);
        this._context.uploadDataToBuffer(this._idSamplerVertexBuffer, idSamplerBufferWriter.vertexData);
        this._context.uploadDataToBuffer(this._idSamplerIndexBuffer, idSamplerBufferWriter.indexData);
        context.bindProgram(program);
        program.setIntScalarUniform('prevVisibility', 0);
    }
    _prepareProgram(program, prevVisibility, fadeoutAmount) {
        super._prepareProgram(program, prevVisibility, fadeoutAmount);
        this._context.bindTextureUnit(0);
        this._context.bindTexture(prevVisibility);
        program.setScalarUniform('fadeoutAmount', fadeoutAmount);
    }
    _render() {
        this._context.bindVao(this._idSamplerVao);
        this._context.drawIndexedMesh(0, 6, 4 /* TRIANGLES */);
    }
}


/***/ }),
/* 159 */
/***/ (function(module, exports) {

module.exports = "#version 100\n#define GLSLIFY 1\n\nattribute vec4 position;\n\nvarying vec2 idTexCoordinates;\n\nvoid main() {\n    gl_Position = vec4(position.xy, 0, 1);\n    idTexCoordinates = position.zw;\n}\n"

/***/ }),
/* 160 */
/***/ (function(module, exports) {

module.exports = "#version 100\n\nprecision mediump float;\n#define GLSLIFY 1\n\nuniform sampler2D prevVisibility;\nuniform float fadeoutAmount;\n\nvarying vec2 idTexCoordinates;\n\nvoid main() {\n    vec4 visibilityValue = texture2D(prevVisibility, idTexCoordinates);\n    visibilityValue.a = clamp(visibilityValue.a - fadeoutAmount, 0.0, 1.0);\n\n    gl_FragColor = visibilityValue;\n}\n"

/***/ }),
/* 161 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ATTRIBUTE_MAPPING", function() { return ATTRIBUTE_MAPPING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return IdSamplerBufferWriter; });
/* harmony import */ var _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _util_buffer_writer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(36);


const ATTRIBUTE_MAPPING = new _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__["AttributeMapping"]([
    [
        0 /* POSITION */,
        {
            size: 4,
            type: 5120 /* BYTE */,
            normalized: false
        }
    ]
]);
/**
 * Write vertices of two triangles that fully cover visibility texture, its values can be sampled in fragment shaders.
 */
class IdSamplerBufferWriter extends _util_buffer_writer__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor() {
        super(ATTRIBUTE_MAPPING.vertexByteSize, 4, 4, 6);
        // window x, window y, texture x, texture y
        this._writeBytes(-1, -1, 0, 0);
        this._writeBytes(-1, 1, 0, 1);
        this._writeBytes(1, 1, 1, 1);
        this._writeBytes(1, -1, 1, 0);
        this.writeIndicesForFan([0, 1, 2, 3]);
        this.vertexData = this.getBuffers()[0].vertexBuffer;
        this.indexData = this.getBuffers()[0].indexBuffer;
    }
}


/***/ }),
/* 162 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return FadeinVisible; });
/* harmony import */ var _render_gl_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(101);
/* harmony import */ var _shaders_fadein_visible_vert__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(163);
/* harmony import */ var _shaders_fadein_visible_vert__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_shaders_fadein_visible_vert__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _shaders_fadein_visible_frag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(164);
/* harmony import */ var _shaders_fadein_visible_frag__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_shaders_fadein_visible_frag__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _render_state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);




const STATE = new _render_state__WEBPACK_IMPORTED_MODULE_3__["default"]({
    dither: false
});
/**
 * One of the steps of primitives visibility resolution process. It samples all pixels of the scene (rendered in direct
 * priority order into simplified grid) and adds delta (fadeinAmount) to alpha visibility of primitive with
 * id in this pixel. Those primitives are considered visible.
 */
class FadeinVisible extends _render_gl_renderer__WEBPACK_IMPORTED_MODULE_0__["GlRenderer"] {
    constructor(context) {
        const program = context.createProgram(_shaders_fadein_visible_vert__WEBPACK_IMPORTED_MODULE_1___default.a, _shaders_fadein_visible_frag__WEBPACK_IMPORTED_MODULE_2___default.a, {
            attribMap: {
                position: 0 /* POSITION */
            }
        });
        super(context, STATE, program);
        context.bindProgram(program);
        program.setIntScalarUniform('directPriorityGrid', 0);
        program.setIntScalarUniform('prevVisibility', 1);
    }
    _prepareProgram(program, data, samplers, directPriorityGrid, prevVisibility, idHalfPxSize, fadeinAmount) {
        super._prepareProgram(program, data, samplers, directPriorityGrid, prevVisibility, idHalfPxSize, fadeinAmount);
        this._context.bindTextureUnit(0);
        this._context.bindTexture(directPriorityGrid);
        this._context.bindTextureUnit(1);
        this._context.bindTexture(prevVisibility);
        program.setVector2Uniform('idHalfPxSize', idHalfPxSize);
        program.setScalarUniform('fadeinAmount', fadeinAmount);
    }
    _render(data, numberOfSamplers) {
        this._context.bindVao(data);
        this._context.drawMesh(0, numberOfSamplers, 0 /* POINTS */);
    }
}


/***/ }),
/* 163 */
/***/ (function(module, exports) {

module.exports = "#version 100\n#define GLSLIFY 1\n\nattribute vec2 position;\n\nuniform sampler2D directPriorityGrid;\nuniform sampler2D prevVisibility;\nuniform vec2 idHalfPxSize;\nuniform float fadeinAmount;\n\nvarying lowp vec4 visibilityValue;\n\nconst vec2 NO_ID = vec2(0, 0);\nconst vec4 DISCARD_POSITION = vec4(2, 2, 2, 1);\n\nvoid main() {\n    vec2 primitiveId = texture2D(directPriorityGrid, position).rg;\n\n    if (primitiveId != NO_ID) {\n        vec2 idTexCoordinates = primitiveId + idHalfPxSize;\n        vec4 idWindowCoordinates = vec4(idTexCoordinates * 2.0 - 1.0, 0, 1);\n        gl_Position = idWindowCoordinates;\n        gl_PointSize = 1.0;\n\n        visibilityValue = texture2D(prevVisibility, idTexCoordinates);\n        visibilityValue.a = clamp(visibilityValue.a + fadeinAmount, 0.0, 1.0);\n    } else {\n        gl_Position = DISCARD_POSITION;\n    }\n}\n"

/***/ }),
/* 164 */
/***/ (function(module, exports) {

module.exports = "#version 100\n#define GLSLIFY 1\n\nvarying lowp vec4 visibilityValue;\n\nvoid main() {\n    gl_FragColor = visibilityValue;\n}\n"

/***/ }),
/* 165 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return FadeoutOverlapped; });
/* harmony import */ var _render_gl_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(101);
/* harmony import */ var _shaders_fadeout_overlapped_vert__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(166);
/* harmony import */ var _shaders_fadeout_overlapped_vert__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_shaders_fadeout_overlapped_vert__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _shaders_fadeout_overlapped_frag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(167);
/* harmony import */ var _shaders_fadeout_overlapped_frag__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_shaders_fadeout_overlapped_frag__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _render_state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);




const STATE = new _render_state__WEBPACK_IMPORTED_MODULE_3__["default"]({ dither: false });
class FadeoutOverlapped extends _render_gl_renderer__WEBPACK_IMPORTED_MODULE_0__["GlRenderer"] {
    constructor(context) {
        const program = context.createProgram(_shaders_fadeout_overlapped_vert__WEBPACK_IMPORTED_MODULE_1___default.a, _shaders_fadeout_overlapped_frag__WEBPACK_IMPORTED_MODULE_2___default.a, {
            attribMap: {
                position: 0 /* POSITION */
            }
        });
        super(context, STATE, program);
        context.bindProgram(program);
        program.setIntScalarUniform('directPriorityGrid', 0);
        program.setIntScalarUniform('reversePriorityGrid', 1);
        program.setIntScalarUniform('prevVisibility', 2);
    }
    _prepareProgram(program, data, samplers, directPriority, reversePriority, prevVisibility, idHalfPxSize, fadeoutAmount, currentZoom) {
        super._prepareProgram(program, data, samplers, directPriority, reversePriority, prevVisibility, idHalfPxSize, fadeoutAmount, currentZoom);
        this._context.bindTextureUnit(0);
        this._context.bindTexture(directPriority);
        this._context.bindTextureUnit(1);
        this._context.bindTexture(reversePriority);
        this._context.bindTextureUnit(2);
        this._context.bindTexture(prevVisibility);
        program.setVector2Uniform('idHalfPxSize', idHalfPxSize);
        program.setScalarUniform('fadeoutAmount', fadeoutAmount);
        program.setScalarUniform('currentZoom', currentZoom);
    }
    _render(data, numberOfSamplers) {
        this._context.bindVao(data);
        this._context.drawMesh(0, numberOfSamplers, 0 /* POINTS */);
    }
}


/***/ }),
/* 166 */
/***/ (function(module, exports) {

module.exports = "#version 100\n#define GLSLIFY 1\n\nattribute vec2 position;\n\nuniform sampler2D directPriorityGrid;\nuniform sampler2D reversePriorityGrid;\nuniform sampler2D prevVisibility;\nuniform vec2 idHalfPxSize;\nuniform float fadeoutAmount;\nuniform float currentZoom;\n\nvarying vec4 visibilityValue;\n\nconst vec2 NO_ID = vec2(0, 0);\nconst vec4 DISCARD_POSITION = vec4(2, 2, 2, 1);\n\nvoid main() {\n    vec2 primitiveIdReversePriority = texture2D(reversePriorityGrid, position).rg;\n\n    if (\n        primitiveIdReversePriority != NO_ID &&\n        primitiveIdReversePriority != texture2D(directPriorityGrid, position).rg\n    ) {\n        vec2 idTexCoordinates = primitiveIdReversePriority + idHalfPxSize;\n        vec4 idWindowCoordinates = vec4(idTexCoordinates * 2.0 - 1.0, 0, 1);\n\n        gl_Position = idWindowCoordinates;\n        gl_PointSize = 1.0;\n\n        visibilityValue = texture2D(prevVisibility, idTexCoordinates);\n        visibilityValue.b = currentZoom;\n        visibilityValue.a = clamp(visibilityValue.a - fadeoutAmount, 0.0, 1.0);\n    } else {\n        gl_Position = DISCARD_POSITION;\n    }\n}\n"

/***/ }),
/* 167 */
/***/ (function(module, exports) {

module.exports = "#version 100\n#define GLSLIFY 1\n\nvarying lowp vec4 visibilityValue;\n\nvoid main() {\n    gl_FragColor = visibilityValue;\n}\n"

/***/ }),
/* 168 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "calculateCameraPositions", function() { return calculateCameraPositions; });
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(23);
/* harmony import */ var _util_gputypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(37);
/* harmony import */ var _util_cartesian_grid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(169);
/* harmony import */ var _util_array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(38);




// Maps world coordinates to corresponding points on the cartesian grid.
const WORLD_MIN_COORDINATE = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["create"](-1, -1);
const GRID_WORLD_RATIO = 0.5;
const GRID_COORDINATES_CONVERTER = (point) => {
    const gridCoordinates = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["copy"](point);
    _math_vector2__WEBPACK_IMPORTED_MODULE_0__["sub"](gridCoordinates, WORLD_MIN_COORDINATE, gridCoordinates);
    _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](gridCoordinates, GRID_WORLD_RATIO, gridCoordinates);
    return gridCoordinates;
};
const CAMERA_POSITION_UINT32_CONVERTER = (component) => 0.5 * (component + 1) * 0xffffffff;
const HIGH_COMPONENT_EXTRACTOR = (component) => Object(_util_gputypes__WEBPACK_IMPORTED_MODULE_1__["uint16ToFloat"])(Math.trunc(component / 0x10000));
const LOW_COMPONENT_EXTRACTOR = (component) => Object(_util_gputypes__WEBPACK_IMPORTED_MODULE_1__["uint16ToFloat"])(component & 0xffff);
const REGION_COMPARATOR = (a, b) => a.x - b.x || a.y - b.y;
const tmpCameraPosition = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0);
/**
 * If there are multiple worlds visible (large monitors/low zoom) primitives are rendered in multiple passes from
 * different positions (if the wrap mode of corresponding direction is REPEAT) to get correct final picture.
 * This method calculates camera positions and prepare them to be passed to the render() method.
 */
const cachedRegion = [];
const cachedPositions = [];
function calculateCameraPositions(camera) {
    const visibleRegion = camera.getVisibleRegion();
    if (_util_array__WEBPACK_IMPORTED_MODULE_3__["compare"](REGION_COMPARATOR, cachedRegion, visibleRegion) === 0) {
        return cachedPositions;
    }
    const positions = [];
    for (const worldPosition of Object(_util_cartesian_grid__WEBPACK_IMPORTED_MODULE_2__["computeSquaresCoveredByConvexPolygon"])(visibleRegion.map(GRID_COORDINATES_CONVERTER))) {
        if ((camera.options.wrapModeX === 2 /* REPEAT */ || worldPosition.x === 0) &&
            (camera.options.wrapModeY === 2 /* REPEAT */ || worldPosition.y === 0)) {
            // 2.0 converts covered square position to the world's center coordinates
            // -1.0 reverses the position of the camera to shot the world from
            _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](worldPosition, -1.0 * 2.0, tmpCameraPosition);
            _math_vector2__WEBPACK_IMPORTED_MODULE_0__["add"](camera.center, tmpCameraPosition, tmpCameraPosition);
            _math_vector2__WEBPACK_IMPORTED_MODULE_0__["convert"](tmpCameraPosition, CAMERA_POSITION_UINT32_CONVERTER, tmpCameraPosition);
            positions.push({
                lookAtHigh: _math_vector2__WEBPACK_IMPORTED_MODULE_0__["convert"](tmpCameraPosition, HIGH_COMPONENT_EXTRACTOR),
                lookAtLow: _math_vector2__WEBPACK_IMPORTED_MODULE_0__["convert"](tmpCameraPosition, LOW_COMPONENT_EXTRACTOR)
            });
        }
    }
    _util_array__WEBPACK_IMPORTED_MODULE_3__["copy"](positions, cachedPositions);
    cachedPositions.length = positions.length;
    cachedRegion.length = visibleRegion.length;
    for (let i = 0; i < visibleRegion.length; i++) {
        cachedRegion[i] = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["copy"](visibleRegion[i], cachedRegion[i]);
    }
    return positions;
}


/***/ }),
/* 169 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeSquaresCoveredByConvexPolygon", function() { return computeSquaresCoveredByConvexPolygon; });
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(23);


/**
 * Container of indexed min/max values with a single update method.
 */
class ExtremumStorage {
    constructor(length) {
        this._mins = new Array(length);
        this._maxs = new Array(length);
        this._mins.fill(Number.POSITIVE_INFINITY);
        this._maxs.fill(Number.NEGATIVE_INFINITY);
    }
    updateValue(index, value) {
        this._mins[index] = Math.min(this._mins[index], value);
        this._maxs[index] = Math.max(this._maxs[index], value);
    }
    *values() {
        const item = { min: 0, max: 0, index: -1 };
        for (let i = 0; i < this._mins.length; i++) {
            item.min = this._mins[i];
            item.max = this._maxs[i];
            item.index = i;
            yield item;
        }
    }
}
/**
 * Squares that are ony touched by a line (with no significant crossing an edge) should not be considered "covered".
 * It happens when a point matches the max coordinate (integer) and this case is handled here.
 */
function floorToCellCoordinate(value, maxValue) {
    return Number.isInteger(value) && maxValue === value ? value - 1 : Math.floor(value);
}
/**
 * Calculates squares covered (at least partially) by a convex polygon.
 *
 * @param points Convex polygon point coordinates (on the grid).
 * @returns List of unit square coordinates.
 */
function computeSquaresCoveredByConvexPolygon(points) {
    const result = [];
    const bbox = Object(_math_vector2__WEBPACK_IMPORTED_MODULE_0__["computeBBoxForPoints"])(points);
    const minX = Math.floor(bbox.minX);
    const xLength = Math.ceil(bbox.maxX) - minX;
    const extremums = new ExtremumStorage(xLength);
    for (let i = points.length - 1, j = 0; j < points.length; i = j++) {
        let p1 = points[i];
        let p2 = points[j];
        // go from left to right always to not handle the opposite case
        if (p1.x > p2.x) {
            const tmp = p1;
            p1 = p2;
            p2 = tmp;
        }
        // calculate from/to interval so that only "internal" integer x-es are captured
        const fromX = Math.floor(p1.x + 1);
        const toX = Math.ceil(p2.x - 1);
        const slope = (p1.y - p2.y) / (p1.x - p2.x);
        // handle terminal points separately from the "internal" ones
        extremums.updateValue(floorToCellCoordinate(p1.x, bbox.maxX) - minX, floorToCellCoordinate(p1.y, bbox.maxY));
        extremums.updateValue(floorToCellCoordinate(p2.x, bbox.maxX) - minX, floorToCellCoordinate(p2.y, bbox.maxY));
        for (let x = fromX; x <= toX; x++) {
            const yIntercept = (isFinite(slope) ? slope * (x - p1.x) : 0) + p1.y;
            const nextX = x - minX;
            const prevX = nextX - 1;
            const y = Math.floor(yIntercept);
            // check if we hit exactly the intersection of two integer coordinates
            if (Number.isInteger(yIntercept)) {
                if (yIntercept === bbox.maxY) {
                    extremums.updateValue(prevX, y - 1);
                    extremums.updateValue(nextX, y - 1);
                }
                else if (slope > 0) {
                    // two diagonal squares intersected by a line with positive slope
                    extremums.updateValue(prevX, y - 1);
                    extremums.updateValue(nextX, y);
                }
                else if (slope < 0) {
                    // two diagonal squares intersected by a line with negative slope
                    extremums.updateValue(prevX, y);
                    extremums.updateValue(nextX, y - 1);
                }
            }
            else {
                extremums.updateValue(prevX, y);
                extremums.updateValue(nextX, y);
            }
        }
    }
    for (const { min, max, index } of extremums.values()) {
        const x = minX + index;
        for (let y = min; y <= max; y++) {
            result.push(_math_vector2__WEBPACK_IMPORTED_MODULE_0__["create"](x, y));
        }
    }
    return result;
}


/***/ }),
/* 170 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "medianFilter", function() { return medianFilter; });
/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38);
/* harmony import */ var _comparator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(39);


/**
 * Filters an array of values with median filter.
 *
 * @param values Values to be filtered.
 * @param windowRadius How many values around a sample get into filter window.
 * @returns Array of filtered values.
 */
function medianFilter(values, windowRadius = 3) {
    const window = new Array(2 * windowRadius + 1);
    window.fill(values[0]);
    const length = values.length;
    const result = new Array(length);
    const first = values[0];
    for (let i = 0; i < windowRadius; ++i) {
        window.fill(first, 0, windowRadius - i + 1);
        Object(_array__WEBPACK_IMPORTED_MODULE_0__["copy"])(values, window, 0, i + windowRadius + 1, windowRadius - i + 1);
        window.sort(_comparator__WEBPACK_IMPORTED_MODULE_1__["NUMERICAL_COMPARATOR"]);
        result[i] = window[windowRadius];
    }
    for (let i = windowRadius; i < length - windowRadius; ++i) {
        Object(_array__WEBPACK_IMPORTED_MODULE_0__["copy"])(values, window, i - windowRadius, i + windowRadius + 1);
        window.sort(_comparator__WEBPACK_IMPORTED_MODULE_1__["NUMERICAL_COMPARATOR"]);
        result[i] = window[windowRadius];
    }
    const last = values[values.length - 1];
    for (let i = length - windowRadius; i < length; ++i) {
        Object(_array__WEBPACK_IMPORTED_MODULE_0__["copy"])(values, window, i - windowRadius, length);
        window.fill(last, values.length - i + windowRadius);
        window.sort(_comparator__WEBPACK_IMPORTED_MODULE_1__["NUMERICAL_COMPARATOR"]);
        result[i] = window[windowRadius];
    }
    return result;
}


/***/ }),
/* 171 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MainRenderUnit; });
/* harmony import */ var _list_render_unit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(172);
/* harmony import */ var _util_event_emitter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(14);
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(10);
/* harmony import */ var _util_camera_position__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(168);




const FINAL_RENDER_STATE = new _state__WEBPACK_IMPORTED_MODULE_2__["default"]({
    clearDepth: 0,
    depthTest: true,
    depthFunc: 518 /* GREATER_OR_EQUAL */
});
/**
 * Root scene renderer. It generates final canvas image composing it from independent layers (LayerRenderUnit).
 */
class MainRenderUnit extends _list_render_unit__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(context, camera) {
        super();
        this._context = context;
        this._camera = camera;
        this.onRender = new _util_event_emitter__WEBPACK_IMPORTED_MODULE_1__["VoidEventEmitter"]();
    }
    render(target) {
        const viewProjMatix = this._camera.getViewProjMatrix();
        const cameraPositions = Object(_util_camera_position__WEBPACK_IMPORTED_MODULE_3__["calculateCameraPositions"])(this._camera);
        this._context.bindRenderTarget(target);
        this._context.bindRenderState(FINAL_RENDER_STATE);
        this._context.clearCurrentTarget(17664 /* ALL */);
        for (const renderer of this._subRenderUnits) {
            renderer.render(target, viewProjMatix, cameraPositions);
        }
        this.onRender.fire();
    }
}


/***/ }),
/* 172 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ListRenderUnit; });
/* harmony import */ var _util_event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14);

class NoBaseRenderUnitError extends Error {
    constructor() {
        super('Base render unit is not in the list');
    }
}
/**
 * Simple implementation of CompositeRenderUnit that just runs sub units in the order of addition.
 */
class ListRenderUnit {
    constructor() {
        this.onUpdate = new _util_event_emitter__WEBPACK_IMPORTED_MODULE_0__["VoidEventEmitter"]();
        this._subRenderUnits = [];
        this._subRenderUnitUpdateListener = this._onSubRenderUnitUpdate.bind(this);
    }
    /**
     * Adds RenderUnit to the end of the list.
     */
    addRenderUnit(subRenderUnit) {
        this._subRenderUnits.push(subRenderUnit);
        subRenderUnit.onUpdate.addListener(this._subRenderUnitUpdateListener);
    }
    /**
     * Removes RenderUnit from the list.
     */
    removeRenderUnit(subRenderUnit) {
        const index = this._subRenderUnits.indexOf(subRenderUnit);
        if (index !== -1) {
            this._subRenderUnits.splice(index, 1);
            subRenderUnit.onUpdate.removeListener(this._subRenderUnitUpdateListener);
            this.onUpdate.fire();
        }
    }
    /**
     * Adds RenderUnit above the base one. "Above" means that its render() method will be called after the base's one.
     */
    addRenderUnitAbove(base, subRenderUnit) {
        const baseIndex = this._subRenderUnits.indexOf(base);
        if (baseIndex !== -1) {
            this._subRenderUnits.splice(baseIndex + 1, 0, subRenderUnit);
            subRenderUnit.onUpdate.addListener(this._subRenderUnitUpdateListener);
        }
        else {
            throw new NoBaseRenderUnitError();
        }
    }
    /**
     * Adds RenderUnit below the base one. "Below" means that its render() method will be called before the base's one.
     */
    addRenderUnitBelow(base, subRenderUnit) {
        const baseIndex = this._subRenderUnits.indexOf(base);
        if (baseIndex !== -1) {
            this._subRenderUnits.splice(baseIndex, 0, subRenderUnit);
            subRenderUnit.onUpdate.addListener(this._subRenderUnitUpdateListener);
        }
        else {
            throw new NoBaseRenderUnitError();
        }
    }
    render(target, ...args) {
        for (const renderer of this._subRenderUnits) {
            renderer.render(target, ...args);
        }
    }
    _onSubRenderUnitUpdate() {
        this.onUpdate.fire();
    }
}


/***/ }),
/* 173 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MemoryManager; });
/* harmony import */ var _page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(174);
/* harmony import */ var _count_vertices__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(41);
/* harmony import */ var _util_allocator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(151);



const MAX_VERTEX_COUNT = 0x10000;
// FIXME(dmikis) Let's use oversized index buffer til we sort out indices allocation
// both in writers and the manager.
const PAGE_INDEX_BUFFER_BYTE_SIZE = 0x100000;
/**
 * Memory page with the following peculiarity: once allocation is failed it gets closed for any subsequent
 * allocations. It allow to keep related primitives closer in memory.
 */
class SinglePassMemoryPage extends _page__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(vertexBuffer, indexBuffer, vao, indexType) {
        super(vertexBuffer, indexBuffer, vao, indexType, new _util_allocator__WEBPACK_IMPORTED_MODULE_2__["ArenaAllocator"](vertexBuffer.getSize()), new _util_allocator__WEBPACK_IMPORTED_MODULE_2__["ArenaAllocator"](indexBuffer.getSize()));
        this._failedAllocation = false;
    }
    allocate(vertexByteLength, indexByteLength) {
        if (this._failedAllocation) {
            return null;
        }
        const chunk = super.allocate(vertexByteLength, indexByteLength);
        this._failedAllocation = (chunk === null);
        return chunk;
    }
}
/**
 * Manager that controls GL memory allocations and pagination.[]
 */
class MemoryManager {
    /**
     * Creates a new memory manager that will allocate memory in a given context.
     *
     * @param context The context.
     */
    constructor(context) {
        this._context = context;
        this._pages = new Map();
        this._emptyPagesClearTimeout = 0;
    }
    /**
     * Allocates memory for a given data in the manager and uploads given data.
     *
     * @param vertexData Buffer with vertices that needs to be allocated.
     * @param indexData Buffer with indices that needs to be allocated.
     * @param attributeMapping Mapping of vertex attributes.
     * @returns Descriptor of the allocated memory region.
     */
    allocate(vertexData, indexData, attributeMapping) {
        const context = this._context;
        let pageSet = this._pages.get(attributeMapping);
        // If there's no pages for the given attribute mapping, create a new set.
        if (!pageSet) {
            pageSet = new Set();
            this._pages.set(attributeMapping, pageSet);
        }
        // Try to allocate data in the existing pages.
        for (const page of pageSet) {
            const memoryChunk = page.allocate(vertexData.byteLength, indexData.byteLength);
            if (memoryChunk) {
                // Success! Now we just upload the data.
                this._updatePage(page, memoryChunk, vertexData, indexData);
                return memoryChunk;
            }
        }
        // We've failed to allocate the data in any of existing pages. No worries
        // though, we just create a new one:)
        const vertexBuffer = context.createVertexBuffer(
        // some buffer writers don't use indices and MAX_VERTEX_COUNT restriction is not applied in such cases
        Math.max(MAX_VERTEX_COUNT * attributeMapping.vertexByteSize, vertexData.byteLength));
        const indexBuffer = context.createIndexBuffer(PAGE_INDEX_BUFFER_BYTE_SIZE);
        const vao = context.createVao(attributeMapping, vertexBuffer, indexBuffer);
        const page = new SinglePassMemoryPage(vertexBuffer, indexBuffer, vao, 5123 /* UNSIGNED_SHORT */);
        page.setDelegate(this);
        pageSet.add(page);
        // Here we assume we always can allocate data in an empty page.
        const memoryChunk = page.allocate(vertexData.byteLength, indexData.byteLength);
        this._updatePage(page, memoryChunk, vertexData, indexData);
        return memoryChunk;
    }
    onPageEmpty() {
        if (!this._emptyPagesClearTimeout) {
            this._emptyPagesClearTimeout = setTimeout(() => {
                this._clearEmptyPages();
                this._emptyPagesClearTimeout = 0;
            });
        }
    }
    /**
     * Destroys the manager and all its memory pages. All memory chunks that were
     * allocated in the manager become invalid.
     */
    destroy() {
        if (this._emptyPagesClearTimeout) {
            clearTimeout(this._emptyPagesClearTimeout);
        }
        for (const [, pageSet] of this._pages) {
            for (const page of pageSet) {
                page.destroy();
            }
        }
    }
    _updatePage(page, memoryChunk, vertexData, indexData) {
        const context = this._context;
        // Let's ensure that we won't break any bound VAOs.
        context.bindVao(null);
        context.uploadDataToBuffer(page.vertexBuffer, vertexData, memoryChunk.vertexByteOffset);
        // Shift indices.
        const baseIndex = Object(_count_vertices__WEBPACK_IMPORTED_MODULE_1__["countVertices"])(memoryChunk.vertexByteOffset, page.vao.attributeMapping);
        for (let i = 0; i < indexData.length; ++i) {
            indexData[i] += baseIndex;
        }
        context.uploadDataToBuffer(page.indexBuffer, indexData, memoryChunk.indexByteOffset);
    }
    _clearEmptyPages() {
        for (const pageSet of this._pages.values()) {
            for (const page of pageSet) {
                if (page.isEmpty()) {
                    pageSet.delete(page);
                    page.setDelegate(null);
                    page.destroy();
                }
            }
        }
    }
}


/***/ }),
/* 174 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MemoryPage; });
/* harmony import */ var _chunk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(175);
/* harmony import */ var _util_delegator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(94);


/**
 * A "page" of GPU memory. Comprises vertex and index buffers of a fixed size.
 */
class MemoryPage extends _util_delegator__WEBPACK_IMPORTED_MODULE_1__["DelegatorBase"] {
    /**
     * Creates a new page to manage given vertex and index buffers.
     *
     * @param vertexBuffer The vertex buffer the page will manage.
     * @param indexBuffer The index buffer the page will manager.
     * @param vao The VAO of the page.
     * @param indexType Type of elements of indexBuffer.
     * @param vertexAllocator Allocator of vertex data, logic of allocation directly impacts the lifecycle of the page.
     * @param indexAllocator Allocator of index data, logic of allocation directly impacts the lifecycle of the page.
     */
    constructor(vertexBuffer, indexBuffer, vao, indexType, vertexAllocator, indexAllocator) {
        super();
        this.vertexBuffer = vertexBuffer;
        this.indexBuffer = indexBuffer;
        this.vao = vao;
        this.indexType = indexType;
        this._vertexAllocator = vertexAllocator;
        this._indexAllocator = indexAllocator;
    }
    /**
     * Allocates and writes vertex and index data to the page. Offsets indices
     * in an index array to appropriately take into account offset of the vertex
     * data.
     *
     * @param vertexByteLength required number of bytes in vertex buffer
     * @param indexByteLength required number of bytes in index buffer
     * @returns memory chunk allocated or `null` if allocation's failed
     */
    allocate(vertexByteLength, indexByteLength) {
        if (this._vertexAllocator.maxAllocableSize >= vertexByteLength &&
            this._indexAllocator.maxAllocableSize >= indexByteLength) {
            return new _chunk__WEBPACK_IMPORTED_MODULE_0__["default"](this, {
                vertexByteOffset: this._vertexAllocator.allocate(vertexByteLength),
                vertexByteLength: vertexByteLength,
                indexByteOffset: this._indexAllocator.allocate(indexByteLength),
                indexByteLength: indexByteLength
            });
        }
        else {
            return null;
        }
    }
    /**
     * Frees a previously allocated memory chunk.
     *
     * @param chunk The chunk to be freed.
     */
    free(chunk) {
        this._vertexAllocator.deallocate(chunk.vertexByteOffset);
        this._indexAllocator.deallocate(chunk.indexByteOffset);
        if (this.isEmpty() && this._delegate) {
            this._delegate.onPageEmpty(this);
        }
    }
    /**
     * Returns `true` if the page does not contain any previously allocated data
     * and `false` otherwise.
     */
    isEmpty() {
        return this._vertexAllocator.isEmpty && this._indexAllocator.isEmpty;
    }
    /**
     * Destroys the page and all its resources.
     */
    destroy() {
        this.vertexBuffer.destroy();
        this.indexBuffer.destroy();
        this.vao.destroy();
    }
}


/***/ }),
/* 175 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MemoryChunk; });
/* harmony import */ var _util_ref_counted__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43);

/** Handler to a allocated memory chunk. */
class MemoryChunk extends _util_ref_counted__WEBPACK_IMPORTED_MODULE_0__["default"] {
    /**
     * Creates a new handler to a memory chunk with given offsets allocated in
     * a given memory page.
     *
     * @param page The page the chunk was allocated in.
     * @param vertexOffset The offset of chunk's vertex data.
     * @param indexOffset The offset of chunk's index data.
     */
    constructor(page, location) {
        super();
        this.page = page;
        this._location = location;
    }
    /**
     * Returns offset of vertex data of the chunk in bytes.
     */
    get vertexByteOffset() {
        return this._location.vertexByteOffset;
    }
    /**
     * Returns offset of index data of the chunk in bytes.
     */
    get indexByteOffset() {
        return this._location.indexByteOffset;
    }
    _destroy() {
        this.page.free(this);
    }
}


/***/ }),
/* 176 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return FxaaRenderUnit; });
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(23);
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(10);
/* harmony import */ var _shaders_fxaa_frag__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(177);
/* harmony import */ var _shaders_fxaa_frag__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_shaders_fxaa_frag__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _shaders_quad_vert__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(178);
/* harmony import */ var _shaders_quad_vert__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_shaders_quad_vert__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _util_hd__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(48);
/* harmony import */ var _gl_renderer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(101);
/* harmony import */ var _list_render_unit__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(172);








const STATE = new _state__WEBPACK_IMPORTED_MODULE_1__["default"](_state__WEBPACK_IMPORTED_MODULE_1__["BLEND_OVER_RENDER_STATE"]);
/**
 * Renderer of FXAA postprocessing pass.
 */
class FxaaRenderUnit extends _gl_renderer__WEBPACK_IMPORTED_MODULE_5__["GlRenderer"] {
    constructor(context, renderLoop) {
        super(context, STATE, context.createProgram(_shaders_quad_vert__WEBPACK_IMPORTED_MODULE_3___default.a, _shaders_fxaa_frag__WEBPACK_IMPORTED_MODULE_2___default.a, {
            attribMap: {
                vertexPosition: 0 /* POSITION */
            }
        }));
        this._renderers = new _list_render_unit__WEBPACK_IMPORTED_MODULE_6__["default"]();
        this._renderLoop = renderLoop;
        this.onUpdate = this._renderers.onUpdate;
        this._pixelSize = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0);
    }
    addRenderUnit(unit) {
        this._renderers.addRenderUnit(unit);
    }
    removeRenderUnit(unit) {
        this._renderers.removeRenderUnit(unit);
    }
    render(target, ...args) {
        // skip antialiasing if these is action in the scene
        if (this._renderLoop.isActive) {
            this._renderers.render(target, ...args);
            // schedule at least one more rendering to not leave static (stopped) scene in non-antialiased state
            this._renderLoop.update();
            return;
        }
        if (!this._intermediateRendereBuffer) {
            this._initIntermediateRenderTargets(target.getWidth(), target.getHeight());
        }
        else if (this._intermediateRendereBuffer.getWidth() !== target.getWidth() ||
            this._intermediateRendereBuffer.getHeight() !== target.getHeight()) {
            this._destroyInternalRenderTargets();
            this._initIntermediateRenderTargets(target.getWidth(), target.getHeight());
        }
        this._context.bindRenderTarget(this._intermediateRendereBuffer);
        this._context.clearCurrentTarget(17664 /* ALL */);
        this._renderers.render(this._intermediateRendereBuffer, ...args);
        // do not run antialiasing on empty this._intermediateRendereBuffer
        if (!this._intermediateRendereBuffer.isClear) {
            this._updateFrameUniformState(target);
            super.render(target, ...args);
        }
    }
    destroy() {
        if (this._intermediateRendereBuffer) {
            this._destroyInternalRenderTargets();
        }
    }
    _render() {
        this._context.bindQuadVao();
        this._context.drawQuad();
    }
    _prepareProgram(program, ...args) {
        super._prepareProgram(program, ...args);
        this._context.bindTextureUnit(0);
        this._context.bindTexture(this._intermediateColorBuffer);
        program.setIntScalarUniform('texture', 0);
        program.setVector2Uniform('pixelSize', this._pixelSize);
        program.setScalarUniform('dpr', Object(_util_hd__WEBPACK_IMPORTED_MODULE_4__["default"])());
    }
    _updateFrameUniformState(target) {
        this._pixelSize.x = 1 / target.getWidth();
        this._pixelSize.y = 1 / target.getHeight();
    }
    _initIntermediateRenderTargets(width, height) {
        const context = this._context;
        const intermediateColorBuffer = this._intermediateColorBuffer =
            context.createEmpty2DTexture(width, height, 6408 /* RGBA */, 5121 /* UNSIGNED_BYTE */);
        const intermediateDepthStencilBuffer = this._intermediateDepthStencilBuffer =
            context.createRenderbuffer(width, height, 34041 /* DEPTH_STENCIL */);
        this._intermediateRendereBuffer = context.createFramebuffer({
            color: intermediateColorBuffer,
            depthStencil: intermediateDepthStencilBuffer
        });
    }
    _destroyInternalRenderTargets() {
        this._intermediateRendereBuffer.destroy();
        this._intermediateColorBuffer.destroy();
        this._intermediateDepthStencilBuffer.destroy();
    }
}


/***/ }),
/* 177 */
/***/ (function(module, exports) {

module.exports = "#version 100\n\nprecision mediump float;\n#define GLSLIFY 1\n\nuniform vec2 pixelSize;\nuniform sampler2D texture;\nuniform float dpr;\n\nconst float FXAA_QUALITY_SUBPIX = 0.75;\nconst float FXAA_QUALITY_EDGE_THRESHOLD = 0.063;\nconst float FXAA_QUALITY_EDGE_THRESHOLD_MIN = 0.0625;\nconst float EPSILON = 0.0001;\n\nfloat luma(vec4 rgba) {\n    return dot(rgba.xyz, vec3(0.299, 0.587, 0.114));\n}\n\nvec4 fxaa(\n    vec2 pos,\n    sampler2D tex,\n    vec2 fxaaQualityRcpFrame,\n    // This used to be the FXAA_QUALITY_SUBPIX define.\n    // Choose the amount of sub-pixel aliasing removal.\n    // This can effect sharpness.\n    //   1.00 - upper limit (softer)\n    //   0.75 - default amount of filtering\n    //   0.50 - lower limit (sharper, less sub-pixel aliasing removal)\n    //   0.25 - almost off\n    //   0.00 - completely off\n    float fxaaQualitySubpix,\n    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\n    // The minimum amount of local contrast required to apply algorithm.\n    //   0.333 - too little (faster)\n    //   0.250 - low quality\n    //   0.166 - default\n    //   0.125 - high quality\n    //   0.063 - overkill (slower)\n    float fxaaQualityEdgeThreshold,\n    // This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\n    // Trims the algorithm from processing darks.\n    //   0.0833 - upper limit (default, the start of visible unfiltered edges)\n    //   0.0625 - high quality (faster)\n    //   0.0312 - visible limit (slower)\n    float fxaaQualityEdgeThresholdMin\n) {\n    vec2 posM;\n    posM.x = pos.x;\n    posM.y = pos.y;\n    vec4 rgbyM = texture2D(tex, posM);\n    float lumaM = luma(rgbyM);\n\n    float lumaS = luma(texture2D(tex, posM + vec2( 0, 1) * fxaaQualityRcpFrame.xy));\n    float lumaE = luma(texture2D(tex, posM + vec2( 1, 0) * fxaaQualityRcpFrame.xy));\n    float lumaN = luma(texture2D(tex, posM + vec2( 0,-1) * fxaaQualityRcpFrame.xy));\n    float lumaW = luma(texture2D(tex, posM + vec2(-1, 0) * fxaaQualityRcpFrame.xy));\n\n    float maxSM = max(lumaS, lumaM);\n    float minSM = min(lumaS, lumaM);\n    float maxESM = max(lumaE, maxSM);\n    float minESM = min(lumaE, minSM);\n    float maxWN = max(lumaN, lumaW);\n    float minWN = min(lumaN, lumaW);\n    float rangeMax = max(maxWN, maxESM);\n    float rangeMin = min(minWN, minESM);\n    float rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\n    float range = rangeMax - rangeMin;\n    float rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\n    bool earlyExit = range < rangeMaxClamped;\n\n    if (earlyExit)\n        return rgbyM;\n\n    float lumaNW = luma(texture2D(tex, posM + vec2(-1,-1) * fxaaQualityRcpFrame.xy));\n    float lumaSE = luma(texture2D(tex, posM + vec2( 1, 1) * fxaaQualityRcpFrame.xy));\n    float lumaNE = luma(texture2D(tex, posM + vec2( 1,-1) * fxaaQualityRcpFrame.xy));\n    float lumaSW = luma(texture2D(tex, posM + vec2(-1, 1) * fxaaQualityRcpFrame.xy));\n\n    float lumaNS = lumaN + lumaS;\n    float lumaWE = lumaW + lumaE;\n    float subpixRcpRange = 1.0/range;\n    float subpixNSWE = lumaNS + lumaWE;\n    float edgeHorz1 = (-2.0 * lumaM) + lumaNS;\n    float edgeVert1 = (-2.0 * lumaM) + lumaWE;\n\n    float lumaNESE = lumaNE + lumaSE;\n    float lumaNWNE = lumaNW + lumaNE;\n    float edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\n    float edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\n\n    float lumaNWSW = lumaNW + lumaSW;\n    float lumaSWSE = lumaSW + lumaSE;\n    float edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\n    float edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\n    float edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\n    float edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\n    float edgeHorz = abs(edgeHorz3) + edgeHorz4;\n    float edgeVert = abs(edgeVert3) + edgeVert4;\n\n    float subpixNWSWNESE = lumaNWSW + lumaNESE;\n    float lengthSign = fxaaQualityRcpFrame.x;\n    bool horzSpan = edgeHorz >= edgeVert;\n    float subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\n\n    if (horzSpan) {\n        lengthSign = fxaaQualityRcpFrame.y;\n    } else {\n        lumaN = lumaW;\n        lumaS = lumaE;\n    }\n    float subpixB = (subpixA * (1.0/12.0)) - lumaM;\n\n    float gradientN = lumaN - lumaM;\n    float gradientS = lumaS - lumaM;\n    float lumaNN = lumaN + lumaM;\n    float lumaSS = lumaS + lumaM;\n    bool pairN = abs(gradientN) >= abs(gradientS);\n    float gradient = max(abs(gradientN), abs(gradientS));\n    if (pairN) {\n        lengthSign = -lengthSign;\n    } else {\n        lumaNN = lumaSS;\n    }\n    float subpixC = clamp(abs(subpixB) * subpixRcpRange, 0.0, 1.0);\n\n    vec2 posB = posM;\n    vec2 offNP;\n\n    vec2 offHM;\n    if (horzSpan) {\n        offNP = vec2(fxaaQualityRcpFrame.x, 0.0);\n        offHM = vec2(0.0, lengthSign);\n    } else {\n        offNP = vec2(0.0, fxaaQualityRcpFrame.y);\n        offHM = vec2(lengthSign, 0.0);\n    }\n\n    vec2 posN = posB - offNP * 2.;\n    vec2 posP = posB + offNP * 2.;\n\n    float subpixD = ((-2.0)*subpixC) + 3.0;\n    float lumaEndN = luma(\n        mix(\n            texture2D(tex, posN),\n            texture2D(tex, posN + offHM),\n            0.5\n        )\n    );\n    float subpixE = subpixC * subpixC;\n    float lumaEndP = luma(\n        mix(\n            texture2D(tex, posP),\n            texture2D(tex, posP + offHM),\n            0.5\n        )\n    );\n\n    float gradientScaled = gradient * 0.25;\n    float lumaMM = lumaM - lumaNN * 0.5;\n    float subpixF = subpixD * subpixE;\n    bool lumaMLTZero = lumaMM < 0.0;\n\n    lumaEndN -= lumaNN * 0.5;\n    lumaEndP -= lumaNN * 0.5;\n    bool doneN = abs(lumaEndN) >= gradientScaled;\n    bool doneP = abs(lumaEndP) >= gradientScaled;\n    if (!doneN) {\n        posN -= offNP * 3.0;\n    }\n    bool doneNP = (!doneN) || (!doneP);\n    if (!doneP) {\n        posP += offNP * 3.0;\n    }\n\n    if (doneNP) {\n        if (!doneN) {\n            lumaEndN = luma(\n                mix(\n                    texture2D(tex, posN),\n                    texture2D(tex, posN + offHM),\n                    0.5\n                )\n            );\n            lumaEndN = lumaEndN - lumaNN * 0.5;\n        }\n        if (!doneP) {\n            lumaEndP = luma(\n                mix(\n                    texture2D(tex, posP.xy),\n                    texture2D(tex, posP.xy + offHM),\n                    0.5\n                )\n            );\n            lumaEndP = lumaEndP - lumaNN * 0.5;\n        }\n        doneN = abs(lumaEndN) >= gradientScaled;\n        doneP = abs(lumaEndP) >= gradientScaled;\n        if (!doneN) {\n            posN -= offNP * 12.0;\n        }\n        if (!doneP) {\n            posP += offNP * 12.0;\n        }\n    }\n    float dstN = posM.x - posN.x;\n    float dstP = posP.x - posM.x;\n    if (!horzSpan) {\n        dstN = posM.y - posN.y;\n        dstP = posP.y - posM.y;\n    }\n    bool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\n    float spanLength = (dstP + dstN);\n    bool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\n    float spanLengthRcp = 1.0/spanLength;\n    bool directionN = dstN < dstP;\n    float dst = min(dstN, dstP);\n    bool goodSpan = directionN ? goodSpanN : goodSpanP;\n    float subpixG = subpixF * subpixF;\n    float pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\n    float subpixH = subpixG * fxaaQualitySubpix;\n    float pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\n    float pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\n    vec4 color;\n    float factor = pixelOffsetSubpix;\n    if (horzSpan) {\n        color = mix(\n            texture2D(tex, posM),\n            texture2D(tex, posM + vec2(0.0, lengthSign)),\n            factor\n        );\n    } else {\n        color = mix(\n            texture2D(tex, posM),\n            texture2D(tex, posM + vec2(lengthSign, 0.0)),\n            factor\n        );\n    }\n\n    return color;\n}\n\nvoid main() {\n    vec2 pos = gl_FragCoord.xy * pixelSize;\n    vec4 color = fxaa(\n        pos,\n        texture,\n        pixelSize,\n        FXAA_QUALITY_SUBPIX,\n        FXAA_QUALITY_EDGE_THRESHOLD,\n        FXAA_QUALITY_EDGE_THRESHOLD_MIN\n    );\n\n    // If color.a is less than one, then the color has been blended with a black background before.\n    // An original color of transparent objects is vec4(color.xyz / color.a, color.a).\n    // We have to blend an original color with background pattern.\n    // color.a can be too close to zero. Check it.\n    if (color.a > EPSILON) {\n        color.xyz /= color.a;\n    }\n    gl_FragColor = color;\n}\n"

/***/ }),
/* 178 */
/***/ (function(module, exports) {

module.exports = "#version 100\n#define GLSLIFY 1\n\nattribute vec2 vertexPosition;\nattribute vec2 vertexUv;\n\nuniform float zIndex;\n\n#ifndef YV_LEAST_16b_P\n#   ifdef GL_FRAGMENT_PRECISION_HIGH\n#       define YV_LEAST_16b_P highp\n#   else\n#       define YV_LEAST_16b_P mediump\n#   endif\n#endif\n\nvarying YV_LEAST_16b_P vec2 uv;\n\nvoid main(void) {\n    gl_Position = vec4(vertexPosition, zIndex, 1);\n    uv = vertexUv;\n}\n"

/***/ }),
/* 179 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return BackgroundRenderUnit; });
/* harmony import */ var _gl_renderer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(101);
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(10);
/* harmony import */ var _util_event_emitter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(14);
/* harmony import */ var _shaders_quad_vert__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(178);
/* harmony import */ var _shaders_quad_vert__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_shaders_quad_vert__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _shaders_background_frag__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(180);
/* harmony import */ var _shaders_background_frag__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_shaders_background_frag__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _util_hd__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(48);






const STATE = new _state__WEBPACK_IMPORTED_MODULE_1__["default"]({
    depthTest: true,
    depthFunc: 518 /* GREATER_OR_EQUAL */
});
/**
 * Fills map's canvas with background pattern on regions that have no data yet.
 */
class BackgroundRenderUnit extends _gl_renderer__WEBPACK_IMPORTED_MODULE_0__["GlRenderer"] {
    constructor(context) {
        const program = context.createProgram(_shaders_quad_vert__WEBPACK_IMPORTED_MODULE_3___default.a, _shaders_background_frag__WEBPACK_IMPORTED_MODULE_4___default.a, {
            attribMap: {
                vertexPosition: 0 /* POSITION */,
                vertexUv: 4 /* UV */
            }
        });
        super(context, STATE, program);
        context.bindProgram(program);
        program.setScalarUniform('zIndex', -1);
        this.onUpdate = new _util_event_emitter__WEBPACK_IMPORTED_MODULE_2__["VoidEventEmitter"]();
    }
    _render() {
        this._context.bindQuadVao();
        this._context.drawQuad();
    }
    _prepareProgram(program) {
        super._prepareProgram(program);
        program.setScalarUniform('dpr', Object(_util_hd__WEBPACK_IMPORTED_MODULE_5__["default"])());
    }
}


/***/ }),
/* 180 */
/***/ (function(module, exports) {

module.exports = "#version 100\n#define GLSLIFY 1\n\nvoid main() {\n    // Background color should match main map layer color.\n    gl_FragColor = vec4(0.98, 0.97, 0.94, 1);\n}\n"

/***/ }),
/* 181 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return LayerRenderUnit; });
/* harmony import */ var _list_render_unit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(172);
/* harmony import */ var _state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(10);


const DEPTH_CLEAR_STATE = new _state__WEBPACK_IMPORTED_MODULE_1__["default"]({
    depthTest: true,
    clearDepth: 0
});
class LayerRenderUnit extends _list_render_unit__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(context, depthClearStrategy = 0 /* NO_CLEAR */) {
        super();
        this._depthClearStrategy = depthClearStrategy;
        this._context = context;
    }
    render(target, ...args) {
        if (this._depthClearStrategy === 1 /* BEFORE_RENDER */) {
            this._context.bindRenderState(DEPTH_CLEAR_STATE);
            this._context.bindRenderTarget(target);
            this._context.clearCurrentTarget(256 /* DEPTH_BUFFER_BIT */);
        }
        super.render(target, ...args);
    }
}


/***/ }),
/* 182 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CollidingPrimitivesResetRemovedRenderer", function() { return CollidingPrimitivesResetRemovedRenderer; });
/* harmony import */ var _render_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10);
/* harmony import */ var _render_memory_count_vertices__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(41);
/* harmony import */ var _shaders_reset_removed_vert__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(183);
/* harmony import */ var _shaders_reset_removed_vert__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_shaders_reset_removed_vert__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _shaders_reset_removed_frag__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(184);
/* harmony import */ var _shaders_reset_removed_frag__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_shaders_reset_removed_frag__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _render_gl_renderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(101);
/* harmony import */ var _render_primitives_primitive_batch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(102);






class CollidingPrimitivesResetRemovedRenderer extends _render_gl_renderer__WEBPACK_IMPORTED_MODULE_4__["GlRenderer"] {
    constructor(context, primitiveProvider) {
        const program = context.createProgram(_shaders_reset_removed_vert__WEBPACK_IMPORTED_MODULE_2___default.a, _shaders_reset_removed_frag__WEBPACK_IMPORTED_MODULE_3___default.a, {
            attribMap: {
                vertexId: 2 /* ID */
            }
        });
        super(context, new _render_state__WEBPACK_IMPORTED_MODULE_0__["default"](), program);
        this._primitiveProvider = primitiveProvider;
        context.bindProgram(program);
        program.setIntScalarUniform('prevVisibility', 0);
    }
    _render() {
        const primitives = this._primitiveProvider.primitives;
        for (const memoryBatch of Object(_render_primitives_primitive_batch__WEBPACK_IMPORTED_MODULE_5__["batchPrimitives"])(primitives)) {
            this._context.bindVao(memoryBatch.page.vao);
            this._context.drawIndexedMesh(memoryBatch.indexByteOffset, Object(_render_memory_count_vertices__WEBPACK_IMPORTED_MODULE_1__["countIndices"])(memoryBatch.indexByteLength, memoryBatch.page.indexType), 0 /* POINTS */);
        }
    }
    _prepareProgram(program, prevVisibility, idHalfPxSize) {
        super._prepareProgram(program, prevVisibility, idHalfPxSize);
        this._context.bindTextureUnit(0);
        this._context.bindTexture(prevVisibility);
        program.setVector2Uniform('idHalfPxSize', idHalfPxSize);
    }
}


/***/ }),
/* 183 */
/***/ (function(module, exports) {

module.exports = "#version 100\n#define GLSLIFY 1\n\nattribute vec2 vertexId;\n\nuniform sampler2D prevVisibility;\nuniform vec2 idHalfPxSize;\n\nvarying lowp vec4 visibilityValue;\n\nvoid main() {\n    vec2 idTexCoordinates = vertexId + idHalfPxSize;\n    vec4 idWindowCoordinates = vec4(idTexCoordinates * 2.0 - 1.0, 0, 1);\n    gl_Position = idWindowCoordinates;\n    gl_PointSize = 1.0;\n\n    visibilityValue = texture2D(prevVisibility, idTexCoordinates);\n}\n"

/***/ }),
/* 184 */
/***/ (function(module, exports) {

module.exports = "#version 100\n#define GLSLIFY 1\n\nvarying lowp vec4 visibilityValue;\n\nvoid main() {\n    gl_FragColor = visibilityValue;\n}\n"

/***/ }),
/* 185 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RenderLoop; });
/* harmony import */ var _util_event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14);

const MAX_FRAME_TIME_COUNT = 100;
class RenderLoop {
    /**
     * Create a new render loop, but doesn't schedule any animation frames.
     */
    constructor() {
        this.onFrameTimesFull = new _util_event_emitter__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.onBeforeRender = new _util_event_emitter__WEBPACK_IMPORTED_MODULE_0__["VoidEventEmitter"]();
        this.onRender = new _util_event_emitter__WEBPACK_IMPORTED_MODULE_0__["VoidEventEmitter"]();
        this._isRunning = this._updateIsRequested = false;
        this._lastFrameTime = 0;
        this._frameTimes = new Array(MAX_FRAME_TIME_COUNT);
        this._frameTimes.fill(0);
        this._nextFrameTimeIdx = 0;
    }
    /**
     * @returns Whether the loop is running a chain of consecutive animation
     *      frames or not.
     */
    get isActive() {
        return this._isRunning;
    }
    /**
     * Starts a chain of consecutive animation frames.
     */
    start() {
        this._isRunning = true;
        this._requestFrame();
    }
    /**
     * Stops previously started chain of consecutive animation frames. If an
     * update was requested before stopping, one more animation frame will be
     * fired.
     */
    stop() {
        if (this._isRunning) {
            this._isRunning = false;
            if (!this._updateIsRequested) {
                this._cancelFrame();
            }
        }
    }
    /**
     * Schedules a single
     */
    update() {
        this._updateIsRequested = true;
        this._requestFrame();
    }
    /**
     * Stops all the rendering activities.
     */
    destroy() {
        this._cancelFrame();
    }
    _renderFrame(time) {
        this._rafId = 0;
        this._updateIsRequested = false;
        this.onBeforeRender.fire();
        this.onRender.fire();
        if (this._lastFrameTime > 0) {
            const nextFrameTimeIdx = this._nextFrameTimeIdx;
            this._frameTimes[nextFrameTimeIdx] = time - this._lastFrameTime;
            this._nextFrameTimeIdx = (nextFrameTimeIdx + 1) % MAX_FRAME_TIME_COUNT;
            // Next time index being 0 means that the array is full and it's
            // time to notify listeners about that before we start to rewrite
            // values.
            if (this._nextFrameTimeIdx === 0) {
                this.onFrameTimesFull.fire(this._frameTimes);
            }
        }
        if (this._isRunning) {
            this._lastFrameTime = time;
            this._requestFrame();
        }
        else {
            // If we don't schedule next frame immediately there's no way to
            // tell that it will be consecutive to the current one. Hence there's
            // no point in recording a time delta in it.
            this._lastFrameTime = 0;
        }
    }
    _requestFrame() {
        if (!this._rafId) {
            this._rafId = requestAnimationFrame(((time) => this._renderFrame(time)));
        }
    }
    _cancelFrame() {
        cancelAnimationFrame(this._rafId);
        this._rafId = 0;
    }
}


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,