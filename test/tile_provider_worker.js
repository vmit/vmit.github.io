/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_worker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _font_df_font_registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6);
/* harmony import */ var _font_df_glyph_atlas_allocator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _util_http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(12);
/* harmony import */ var _glyph_delivery_manager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(13);
/* harmony import */ var _tile_based_adapter_tile_id__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(37);
/* harmony import */ var _util_color__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(38);
/* harmony import */ var _parser_extract_points__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(39);
/* harmony import */ var _proto_aliases__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(14);
/* harmony import */ var _parser_extract_polylines__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(46);
/* harmony import */ var _primitive_polygon_polygon_buffer_writer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(48);
/* harmony import */ var _primitive_polygon_textured_polygon_buffer_writer__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(60);
/* harmony import */ var _primitive_polyline_polyline_buffer_writer__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(62);
/* harmony import */ var _parser_extract_polygons__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(64);
/* harmony import */ var _util_extruded_polygon_buffer_writer__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(65);
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(43);
/* harmony import */ var _parser_extract_curved_labels__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(67);
/* harmony import */ var _parser_extract_point_labels__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(69);
/* harmony import */ var _primitive_label_layout_point_label__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(70);
/* harmony import */ var _primitive_billboard_rectangle_buffer_writer__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(71);
/* harmony import */ var _primitive_label_point_label_buffer_writer__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(73);
/* harmony import */ var _primitive_label_curved_label_buffer_writer__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(75);
/* harmony import */ var _util_iterable__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(57);
/* harmony import */ var _util_label__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(79);
/* harmony import */ var _util_trimesh_polygon_buffer_writer__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(80);
/* harmony import */ var _render_memory_relative_location__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(89);
/* harmony import */ var _util_task_queue__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(90);
/* harmony import */ var _util_array__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(51);
/* harmony import */ var _id_manager__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(78);
/* harmony import */ var _util_hosts__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(36);
































const BACKGROUND_RADIUS_PX = 2;
function filterOutUnstyledPrimitives(primitive) {
    return primitive.styles.length > 0;
}
function batchPrimitiveDescriptions(primitives) {
    return Object(_util_iterable__WEBPACK_IMPORTED_MODULE_23__["mapIterable"])(Object(_render_memory_relative_location__WEBPACK_IMPORTED_MODULE_26__["batchAllocatedObjects"])(primitives, (primitive) => primitive.bufferLocation, (primitive) => (Object.assign({}, primitive.bufferLocation)), (a, b) => (a.bufferLocation.bufferIndex === b.bufferLocation.bufferIndex)), (bufferLocation) => ({ bufferLocation, styles: [] }));
}
/**
 * Batch labels along with their backgrounds. I.e. a label batch must contain batched background locations of those
 * labels in the batch to support LabelPrimitiveDescription interface.
 */
function* batchLabels(labels) {
    const getLocation = (primitive) => primitive.bufferLocation;
    const createBatch = (primitive) => {
        return Object.assign({}, primitive.bufferLocation, { backgroundBatch: primitive.backgroundBufferLocation ? Object.assign({}, primitive.backgroundBufferLocation) : undefined });
    };
    const canBatch = (a, b, batch) => {
        const areLabelsInSameBuffer = a.bufferLocation.bufferIndex === b.bufferLocation.bufferIndex;
        if (b.backgroundBufferLocation) {
            // there could be no backgroundBatch if previous labels had no backgrounds,
            // so background batching starts with the fist label that contains one
            if (!batch.backgroundBatch) {
                batch.backgroundBatch = Object.assign({}, b.backgroundBufferLocation);
            }
            // label batching breaks if backgrounds can't be batched
            if (b.backgroundBufferLocation.bufferIndex !== batch.backgroundBatch.bufferIndex ||
                !areLabelsInSameBuffer ||
                !Object(_render_memory_relative_location__WEBPACK_IMPORTED_MODULE_26__["appendToBatch"])(b.backgroundBufferLocation, batch.backgroundBatch)) {
                return false;
            }
        }
        return areLabelsInSameBuffer;
    };
    for (const batch of Object(_render_memory_relative_location__WEBPACK_IMPORTED_MODULE_26__["batchAllocatedObjects"])(labels, getLocation, createBatch, canBatch)) {
        const backgroundBufferLocation = batch.backgroundBatch;
        delete batch.backgroundBatch; // this property is not required in main thread, save some serialization efforts
        yield {
            backgroundBufferLocation,
            bufferLocation: batch,
            styles: []
        };
    }
}
function getObjectRequestId(objectId, requestId) {
    return [objectId, requestId].join('-');
}
const EMPTY_LABELS_RESPONSE = {
    type: _tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_1__["TileProviderMessageType"].LABELS_RESPONSE,
    tile: { x: 0, y: 0, zoom: 0 },
    pointLabelPages: [],
    pointLabelBackgroundPages: [],
    curvedLabelPages: [],
    pointLabels: [],
    curvedLabels: []
};
// Tile parsing priority is always non-negative, so to make sure they're processed
// before anything else, other priorities are less than 0.
const MESH_PARSE_PRIORITY = -2;
class TileProviderWorker extends _util_worker__WEBPACK_IMPORTED_MODULE_0__["WebWorkerImplementation"] {
    constructor(addressee) {
        super(addressee);
        this._taskQueue = new _util_task_queue__WEBPACK_IMPORTED_MODULE_27__["default"]();
        this._minorTaskQueue = new _util_task_queue__WEBPACK_IMPORTED_MODULE_27__["default"]();
        this._tileUrlTemplate = '';
        this._fontRegistry = new _font_df_font_registry__WEBPACK_IMPORTED_MODULE_2__["default"]();
        this._atlas = new _font_df_glyph_atlas_allocator__WEBPACK_IMPORTED_MODULE_3__["default"](2048, 2048);
        this._glyphsDeliveryManager = new _glyph_delivery_manager__WEBPACK_IMPORTED_MODULE_5__["ApiGlyphsDeliveryManager"](this._fontRegistry, this._atlas);
        this._tileRequests = new Map();
        this._meshRequests = new Map();
        this._taskQueue.onEmpty.addListener(() => {
            if (Object(_util_iterable__WEBPACK_IMPORTED_MODULE_23__["allOfIterable"])(this._tileRequests.values(), ({ tile }) => !tile.isVisible)) {
                this._minorTaskQueue.unfreeze();
            }
        });
        this.on(_tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_1__["TileProviderMessageType"].INIT, this._onInit.bind(this));
        this.on(_tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_1__["TileProviderMessageType"].TILE_URL_UPDATE, this._onTileUrlUpdate.bind(this));
        this.on(_tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_1__["TileProviderMessageType"].TILE_REQUEST_BATCH, this._onTileRequestBatch.bind(this));
        this.on(_tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_1__["TileProviderMessageType"].TILE_REQUEST_CANCEL_BATCH, this._onTileRequestCancelBatch.bind(this));
        this.on(_tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_1__["TileProviderMessageType"].MESH_REQUEST, this._onMeshRequest.bind(this));
        this.on(_tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_1__["TileProviderMessageType"].MESH_REQUEST_CANCEL, this._onMeshRequestCancel.bind(this));
        this.setTransferableExtractor(_tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_1__["TileProviderMessageType"].TILE_RESPONSE, _tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_1__["tileTransferableExtractor"]);
        this.setTransferableExtractor(_tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_1__["TileProviderMessageType"].GEOMETRY_RESPONSE, _tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_1__["geometryTransferableExtractor"]);
        this.setTransferableExtractor(_tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_1__["TileProviderMessageType"].MESH_RESPONSE, _tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_1__["meshTransferableExtractor"]);
        this.setTransferableExtractor(_tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_1__["TileProviderMessageType"].LABELS_RESPONSE, _tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_1__["labelTransferableExtractor"]);
    }
    _onInit(message) {
        this._tileUrlTemplate = message.tileUrlTemplate;
        this._meshUrlTemplate = message.meshUrlTemplate;
        this._glyphsDeliveryManager.glyphRangeUrlTemplate = message.glyphRangeUrlTemplate;
    }
    _onTileUrlUpdate(message) {
        this._tileUrlTemplate = message.tileUrlTemplate;
    }
    _onTileRequestBatch(request) {
        // Request higher priority tiles first
        request.requests.sort((a, b) => b.priority - a.priority);
        for (const tile of request.requests) {
            const tileUrl = this._tileUrlTemplate
                .replace('{{hostAlias}}', Object(_util_hosts__WEBPACK_IMPORTED_MODULE_30__["getHostAliasByUid"])(Object(_tile_based_adapter_tile_id__WEBPACK_IMPORTED_MODULE_6__["getTileId"])(tile)))
                .replace('{{x}}', tile.x.toString())
                .replace('{{y}}', tile.y.toString())
                .replace('{{z}}', tile.zoom.toString())
                .replace('{{zmin}}', tile.zoomMin.toString())
                .replace('{{zmax}}', tile.zoomMax.toString());
            if (!tileUrl) {
                return;
            }
            const tileId = Object(_tile_based_adapter_tile_id__WEBPACK_IMPORTED_MODULE_6__["getTileId"])(tile);
            const tileRequest = new _util_http__WEBPACK_IMPORTED_MODULE_4__["BinaryHttpRequest"](tileUrl);
            const requestId = request.requestId;
            const tileRequestId = getObjectRequestId(tileId, requestId);
            tileRequest.send().then((buffer) => {
                const taskQueue = tile.isVisible ? this._taskQueue : this._minorTaskQueue;
                return taskQueue.enqueue({
                    execute: () => {
                        // check if tile was not canceled before processing
                        if (this._tileRequests.has(tileRequestId)) {
                            const decodedTile = _proto_aliases__WEBPACK_IMPORTED_MODULE_9__["Tile"].decode(new Uint8Array(buffer));
                            const extractLabelsPromise = this._extractLabels(tile, decodedTile);
                            const geometryResponse = this._computeGeometryResponse(tile, decodedTile);
                            extractLabelsPromise.then((labelsResponse) => {
                                this.sendMessage(Object.assign({}, (labelsResponse || EMPTY_LABELS_RESPONSE), geometryResponse, { type: _tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_1__["TileProviderMessageType"].TILE_RESPONSE, tile, url: tileUrl, requestId: request.requestId, parseTime: geometryResponse.parseTime +
                                        (labelsResponse ? labelsResponse.parseTime : 0) }));
                            });
                            this._tileRequests.delete(tileRequestId);
                        }
                    },
                    priority: tile.priority
                });
            }, (error) => {
                console.error(`Failed to load and parse tile (${tile.x},${tile.y},${tile.zoom}): ${error}`);
                this.sendMessage({
                    type: _tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_1__["TileProviderMessageType"].TILE_ERROR,
                    tile,
                    requestId: request.requestId
                });
                this._tileRequests.delete(tileRequestId);
            });
            this._tileRequests.set(tileRequestId, {
                request: tileRequest,
                tile
            });
            if (tile.isVisible) {
                this._minorTaskQueue.freeze();
            }
        }
    }
    _onTileRequestCancelBatch(message) {
        for (const request of message.requests) {
            const id = Object(_tile_based_adapter_tile_id__WEBPACK_IMPORTED_MODULE_6__["getTileId"])(request.tile);
            const tileRequestId = getObjectRequestId(id, request.requestId);
            const tileRequest = this._tileRequests.get(tileRequestId);
            if (tileRequest) {
                tileRequest.request.cancel();
                this._tileRequests.delete(tileRequestId);
            }
        }
    }
    _onMeshRequest(request) {
        if (!this._meshUrlTemplate) {
            return;
        }
        const mesh = request.mesh;
        const meshRequestId = mesh.objectId;
        const meshRequest = new _util_http__WEBPACK_IMPORTED_MODULE_4__["BinaryHttpRequest"](this._meshUrlTemplate
            .replace('{{hostAlias}}', Object(_util_hosts__WEBPACK_IMPORTED_MODULE_30__["getHostAliasByUid"])(mesh.meshId))
            .replace(/\{\{id\}\}/g, mesh.meshId));
        this._meshRequests.set(meshRequestId, meshRequest);
        meshRequest.send().then((buffer) => {
            return this._minorTaskQueue.enqueue({
                execute: () => {
                    // check if mesh was not canceled before processing
                    if (this._meshRequests.has(meshRequestId)) {
                        const writer = new _util_trimesh_polygon_buffer_writer__WEBPACK_IMPORTED_MODULE_25__["TrimeshPolygonBufferWriter"]();
                        const mesh = request.mesh;
                        const location = writer.writeModel(buffer, mesh, mesh.color);
                        this.respond(request, {
                            type: _tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_1__["TileProviderMessageType"].MESH_RESPONSE,
                            pages: writer.getBuffers(),
                            requestId: request.requestId,
                            location
                        });
                        this._meshRequests.delete(meshRequestId);
                    }
                },
                priority: MESH_PARSE_PRIORITY
            });
        }).catch((error) => {
            console.error(`Failed to load and parse mesh: ${error}`);
            this.respond(request, {
                type: _tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_1__["TileProviderMessageType"].MESH_ERROR,
                requestId: request.requestId
            });
            this._meshRequests.delete(meshRequestId);
        });
    }
    _onMeshRequestCancel(request) {
        const mesh = request.mesh;
        const meshRequestId = mesh.objectId;
        const meshRequest = this._meshRequests.get(meshRequestId);
        if (meshRequest) {
            meshRequest.cancel();
            this._meshRequests.delete(meshRequestId);
        }
    }
    _computeGeometryResponse(tile, decodedTile) {
        const startTime = performance.now();
        const minZoom = tile.zoom;
        const maxZoom = tile.zoom;
        // Parse polygons from the tile.
        const polygons = [];
        const transparentPolygons = [];
        const texturedPolygons = [];
        const meshes = [];
        const externalMeshes = [];
        const polygonWriter = new _primitive_polygon_polygon_buffer_writer__WEBPACK_IMPORTED_MODULE_11__["default"]();
        const transparentPolygonWriter = new _primitive_polygon_polygon_buffer_writer__WEBPACK_IMPORTED_MODULE_11__["default"]();
        const texturedPolygonWriter = new _primitive_polygon_textured_polygon_buffer_writer__WEBPACK_IMPORTED_MODULE_12__["default"]();
        const extrudedPolygonWriter = new _util_extruded_polygon_buffer_writer__WEBPACK_IMPORTED_MODULE_15__["ExtrudedPolygonBufferWriter"]();
        const extractedPolygons = Object(_util_iterable__WEBPACK_IMPORTED_MODULE_23__["filterIterable"])(Object(_parser_extract_polygons__WEBPACK_IMPORTED_MODULE_14__["default"])(tile, decodedTile, minZoom, maxZoom), filterOutUnstyledPrimitives);
        for (const polygon of extractedPolygons) {
            if (polygon.height === 0) {
                const style = polygon.styles[0];
                if (style.pattern) {
                    texturedPolygons.push({
                        bufferLocation: texturedPolygonWriter.writePolygon(polygon, _math_vector2__WEBPACK_IMPORTED_MODULE_16__["EMPTY"], style.zIndex),
                        styles: polygon.styles
                    });
                }
                else if (_util_color__WEBPACK_IMPORTED_MODULE_7__["isOpaque"](style.color)) {
                    polygons.push({
                        bufferLocation: polygonWriter.writePolygon(polygon, style.zIndex, style.color),
                        styles: polygon.styles
                    });
                }
                else {
                    transparentPolygons.push({
                        bufferLocation: transparentPolygonWriter.writePolygon(polygon, style.zIndex, style.color),
                        styles: polygon.styles
                    });
                }
            }
            else if (polygon.externalMesh) {
                externalMeshes.push(polygon.externalMesh);
            }
            else {
                const style = polygon.styles[0];
                meshes.push({
                    bufferLocation: extrudedPolygonWriter.writePolygon(polygon, polygon.height, style.color),
                    styles: polygon.styles
                });
            }
        }
        // Parse polylines from the tile.
        const polylineWriter = new _primitive_polyline_polyline_buffer_writer__WEBPACK_IMPORTED_MODULE_13__["default"]();
        const polylines = [];
        const texturedPolylines = [];
        const extractedPolylines = Object(_util_iterable__WEBPACK_IMPORTED_MODULE_23__["reduceIterable"])(Object(_util_iterable__WEBPACK_IMPORTED_MODULE_23__["filterIterable"])(Object(_parser_extract_polylines__WEBPACK_IMPORTED_MODULE_10__["default"])(tile, decodedTile, minZoom, maxZoom), filterOutUnstyledPrimitives), (extractedPolylines, polyline) => {
            const style = polyline.styles[0];
            if (style.inline) {
                extractedPolylines.push({
                    polyline,
                    style: style.inline,
                    zIndex: style.zIndex + 0.01
                });
            }
            if (style.outline) {
                extractedPolylines.push({
                    polyline,
                    style: style.outline,
                    zIndex: style.zIndex
                });
            }
            return extractedPolylines;
        }, []);
        // We need to sort polylines stably to preserve drawing order of ones
        // with equal z indices.
        Object(_util_array__WEBPACK_IMPORTED_MODULE_28__["mergeSort"])(extractedPolylines, (p1, p2) => p1.zIndex - p2.zIndex);
        for (const { polyline, style, zIndex } of extractedPolylines) {
            if (style.pattern) {
                texturedPolylines.push(polyline);
            }
            else {
                polylines.push({
                    bufferLocation: polylineWriter.writePolyline(polyline, style, zIndex),
                    styles: polyline.styles
                });
            }
        }
        // Parse points from the tile.
        const points = [
            ...Object(_util_iterable__WEBPACK_IMPORTED_MODULE_23__["filterIterable"])(Object(_parser_extract_points__WEBPACK_IMPORTED_MODULE_8__["default"])(tile, decodedTile, minZoom, maxZoom), filterOutUnstyledPrimitives)
        ];
        return {
            type: _tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_1__["TileProviderMessageType"].GEOMETRY_RESPONSE,
            tile,
            polygonPages: polygonWriter.getBuffers(),
            polygons: [...batchPrimitiveDescriptions(polygons)],
            transparentPolygonPages: transparentPolygonWriter.getBuffers(),
            transparentPolygons: [...batchPrimitiveDescriptions(transparentPolygons)],
            texturedPolygons,
            texturedPolygonPages: texturedPolygonWriter.getBuffers(),
            meshPages: extrudedPolygonWriter.getBuffers(),
            meshes: [...batchPrimitiveDescriptions(meshes)],
            externalMeshes,
            polylinePages: polylineWriter.getBuffers(),
            polylines: [...batchPrimitiveDescriptions(polylines)],
            texturedPolylines,
            points,
            parseTime: performance.now() - startTime
        };
    }
    _extractLabels(tile, decodedTile) {
        const minZoom = tile.zoom;
        const maxZoom = tile.zoom;
        return Promise.all([
            this._prepareLabels(Object(_util_iterable__WEBPACK_IMPORTED_MODULE_23__["filterIterable"])(Object(_parser_extract_point_labels__WEBPACK_IMPORTED_MODULE_18__["default"])(tile, decodedTile, minZoom, maxZoom), filterOutUnstyledPrimitives)),
            this._prepareLabels(Object(_util_iterable__WEBPACK_IMPORTED_MODULE_23__["filterIterable"])(Object(_parser_extract_curved_labels__WEBPACK_IMPORTED_MODULE_17__["default"])(tile, decodedTile, minZoom, maxZoom), filterOutUnstyledPrimitives))
        ]).then(([pointLabels, curvedLabels]) => this._computeLabelsResponse(tile, pointLabels, curvedLabels), (error) => console.log('TODO: respond with error', error));
    }
    _prepareLabels(labels) {
        return Promise.all(Object(_util_iterable__WEBPACK_IMPORTED_MODULE_23__["mapIterable"])(labels, (label) => {
            // make sure all the glyphs are on hand before forming label GPU data
            return this._fetchAllGlyphs(label.texts, label.styles).then(() => (label));
        }));
    }
    /**
     * Fetches all the required by texts glyphs as a single Promise.
     */
    _fetchAllGlyphs(texts, styles) {
        const requests = [];
        for (const text of texts) {
            const glyphs = text.textLines.reduce((glyphs, textLine) => {
                glyphs.push(...textLine.glyphIds);
                return glyphs;
            }, []);
            for (const zoomStyle of styles) {
                for (const textStyle of zoomStyle.styles) {
                    requests.push(this._glyphsDeliveryManager.fetchGlyphs(textStyle.fontId, glyphs));
                }
            }
        }
        return Promise.all(requests);
    }
    _computeLabelsResponse(tile, parsedPointLabels = [], parsedCurvedLabels = []) {
        const startTime = performance.now();
        const pointLabelWriter = new _primitive_label_point_label_buffer_writer__WEBPACK_IMPORTED_MODULE_21__["default"]();
        const pointLabelBackgroundWriter = new _primitive_billboard_rectangle_buffer_writer__WEBPACK_IMPORTED_MODULE_20__["default"]();
        const pointLabels = Array.from(parsedPointLabels, (label) => {
            const style = label.styles[0];
            const layout = Object(_primitive_label_layout_point_label__WEBPACK_IMPORTED_MODULE_19__["default"])(label, style, this._fontRegistry);
            const id = Object(_id_manager__WEBPACK_IMPORTED_MODULE_29__["getId"])();
            let backgroundBufferLocation;
            if (style.background) {
                const bbox = Object(_util_label__WEBPACK_IMPORTED_MODULE_24__["calculatePointLabelBBox"])(layout, style.background.verticalPadding, style.background.horizontalPadding);
                backgroundBufferLocation = pointLabelBackgroundWriter.writeRectangle(id, {
                    position: label.anchorPoint
                }, {
                    width: bbox.maxX - bbox.minX,
                    height: bbox.maxY - bbox.minY,
                    offset: _math_vector2__WEBPACK_IMPORTED_MODULE_16__["create"]((bbox.maxX + bbox.minX) / 2, (bbox.maxY + bbox.minY) / 2),
                    borderRadius: BACKGROUND_RADIUS_PX,
                    color: style.background.color
                });
            }
            return {
                backgroundBufferLocation: backgroundBufferLocation,
                bufferLocation: pointLabelWriter.writePointLabel(id, label, style, layout, this._atlas),
                styles: label.styles
            };
        });
        const curvedLabelWriter = new _primitive_label_curved_label_buffer_writer__WEBPACK_IMPORTED_MODULE_22__["default"]();
        const curvedLabels = Array.from(parsedCurvedLabels, (label) => ({
            bufferLocation: curvedLabelWriter.writeLabel(label, label.styles[0], this._fontRegistry, this._atlas),
            styles: label.styles
        }));
        const isAtlasDirty = this._atlas.isDirty;
        this._atlas.isDirty = false;
        return {
            type: _tile_provider_worker_messages__WEBPACK_IMPORTED_MODULE_1__["TileProviderMessageType"].LABELS_RESPONSE,
            tile,
            pointLabelPages: pointLabelWriter.getBuffers(),
            pointLabelBackgroundPages: pointLabelBackgroundWriter.getBuffers(),
            curvedLabelPages: curvedLabelWriter.getBuffers(),
            pointLabels: [...batchLabels(pointLabels)],
            curvedLabels: [...batchPrimitiveDescriptions(curvedLabels)],
            fontRegistryToUpdate: isAtlasDirty ? this._fontRegistry.getAll().map((font) => {
                return {
                    id: font.id,
                    xheight: font.xheight,
                    margin: font.margin,
                    glyphs: font.getAllGlyphs()
                };
            }) : undefined,
            glyphAtlasToUpdate: isAtlasDirty ? {
                width: this._atlas.width,
                height: this._atlas.height,
                glyphLocations: this._atlas.getAllGlyphLocations(),
                data: this._atlas.data
            } : undefined,
            parseTime: performance.now() - startTime
        };
    }
}
new TileProviderWorker(self)
    .run();


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NO_ID", function() { return NO_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "messageIs", function() { return messageIs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebWorkerCommunicator", function() { return WebWorkerCommunicator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebWorkerClient", function() { return WebWorkerClient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebWorkerImplementation", function() { return WebWorkerImplementation; });
/* harmony import */ var _event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _unique_id__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);
/**
 * Base interface for webworker messages, both incoming and outgoing ones.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Transferable
 */


const MESSAGE_BATCH_MAX_SIZE = 50;
const FLUSH_TIMEOUT = 50;
// each subsequent message debounces postMessage call, that can lead to infinite delay, this const limits it
const MAX_FLUSH_TIMEOUT = 250;
const NO_ID = -1;
/**
 * Checks message type with type guarding. It gives a little bit more elegant alternative
 * to tagged type unions providing the same type safety.
 *
 * @param message to be checked
 * @param type the value of the "type" property
 * @return {boolean}
 */
function messageIs(message, type) {
    return message.type === type;
}
/**
 * Base class for both sides of a webworker: its implementation (separate js that is run in a worker thread) and
 * a controller for the main thread. They have similar mechanism of sending/receiving messages that is implement here.
 */
class WebWorkerCommunicator {
    constructor(addressee) {
        this._addressee = addressee;
        this._events = new _event_emitter__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this._listeners = new Map();
        this._transferableExtractors = new Map();
        this._messages = [];
        this._transferables = [];
        this._timeoutHandle = 0;
        this._flushMessagesBinded = this._flushMessages.bind(this);
    }
    setTransferableExtractor(type, extractor) {
        this._transferableExtractors.set(type, extractor);
    }
    /**
     * Send a message to the opposite side of the web worker communication channel.
     * Messages are batched by delaying postMessage call to group messages that come during this delay and minimize
     * the number of interprocess communications that badly affect performance.
     *
     * @param message Message to be sent.
     * @param urgency IMMEDIATE forces message to be sent immediately (synchronous call) with no batching delay,
     *                DEFAULT debounces sending for another FLUSH_TIMEOUT.
     */
    sendMessage(message, urgency = 0 /* DEFAULT */) {
        const transferableExtractor = this._transferableExtractors.get(message.type);
        const transferables = transferableExtractor ? transferableExtractor(message) : undefined;
        const isFirstMessageInBatch = (this._messages.length === 0);
        if (isFirstMessageInBatch) {
            this._firstMessageTime = performance.now();
        }
        // Send messages asynchronously packing them into one message.
        // We don't want to abuse the web worker communication channel and
        // send messages asynchronously in short period of time or many messages synchronously.
        this._messages.push(message);
        if (transferables) {
            this._transferables = this._transferables.concat(transferables);
        }
        clearTimeout(this._timeoutHandle);
        if (this._messages.length > MESSAGE_BATCH_MAX_SIZE ||
            urgency === 1 /* IMMEDIATE */ ||
            (!isFirstMessageInBatch && (performance.now() - this._firstMessageTime) > MAX_FLUSH_TIMEOUT)) {
            this._flushMessages();
        }
        else {
            this._timeoutHandle = setTimeout(this._flushMessagesBinded, FLUSH_TIMEOUT);
        }
    }
    /**
     * Sends request message to/from worker as promise, the other side can respond and the promise is resolved.
     * Request/response is synchronized by the requestId field.
     */
    request(request, urgency) {
        return new Promise((resolve, reject) => {
            if (request.requestId === NO_ID) {
                request.requestId = Object(_unique_id__WEBPACK_IMPORTED_MODULE_1__["uniqueId"])();
            }
            const listener = (message) => {
                if (messageIs(message, request.responseType) &&
                    message.requestId === request.requestId) {
                    resolve(message);
                    this._events.removeListener(listener);
                }
                if (messageIs(message, request.errorType) &&
                    message.requestId === request.requestId) {
                    reject();
                    this.off(listener);
                }
            };
            this._events.addListener(listener);
            this.sendMessage(request, urgency);
        });
    }
    /**
     * Responds to provided request.
     */
    respond(request, response, urgency) {
        response.requestId = request.requestId;
        this.sendMessage(response, urgency);
    }
    /**
     * Sets a listener to specific type of incoming messages.
     */
    on(type, listener) {
        const typeSafeListener = (message) => {
            if (messageIs(message, type)) {
                listener(message);
            }
        };
        this._listeners.set(listener, typeSafeListener);
        this._events.addListener(typeSafeListener);
    }
    /**
     * Removes incoming messages listener.
     */
    off(listener) {
        const typeSafeListener = this._listeners.get(listener);
        if (typeSafeListener) {
            this._events.removeListener(typeSafeListener);
        }
    }
    /**
     * Starts listening for incoming messages.
     */
    listen() {
        this._addressee.onmessage = ({ data: messages }) => {
            for (const message of messages) {
                this.onMessage(message);
            }
        };
    }
    /**
     * Handler of incoming messages.
     */
    onMessage(message) {
        this._events.fire(message);
    }
    _flushMessages() {
        this._addressee.postMessage(this._messages, this._transferables);
        this._messages.length = 0;
        this._transferables.length = 0;
    }
}
/**
 * Base class for a webworker controller for the main thread code.
 * It also wraps creation of a native Worker.
 */
class WebWorkerClient extends WebWorkerCommunicator {
    /**
     * @param url URL of webworker's deployed js file
     */
    constructor(url) {
        const worker = new Worker(url);
        super(worker);
        this._worker = worker;
        this.listen();
    }
    destroy() {
        this._worker.terminate();
    }
}
/**
 * Base class for a webworker thread implementation. Concrete class should be the entry point for a webworker js build:
 *     new ConcreteWebWorkerImplementation(<DedicatedWorkerGlobalScope>self).run();
 */
class WebWorkerImplementation extends WebWorkerCommunicator {
    run() {
        this.listen();
    }
}


/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventEmitter", function() { return EventEmitter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VoidEventEmitter", function() { return VoidEventEmitter; });
/**
 * Simple pub/sub implementation. The emitter is supposed to emit only one type of event,
 * if someone has to emit events of different types, multiple emitters should be created.
 */
class EventEmitter {
    constructor() {
        this._listeners = new Set();
    }
    /**
     * Adds listener.
     */
    addListener(listener) {
        this._listeners.add(listener);
    }
    /**
     * Removes listener.
     */
    removeListener(listener) {
        this._listeners.delete(listener);
    }
    /**
     * Calls all the added listeners, the order (e.g. of adding) is not guaranteed.
     */
    fire(data) {
        this._listeners.forEach((listener) => {
            listener(data);
        });
    }
}
/**
 * Event emitter with no payload emitted.
 */
class VoidEventEmitter extends EventEmitter {
    fire() {
        super.fire(undefined);
    }
}


/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uniqueId", function() { return uniqueId; });
let id = 1;
/**
 * Generates unique id
*/
function uniqueId() {
    return id++;
}


/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TileProviderMessageType", function() { return TileProviderMessageType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "geometryTransferableExtractor", function() { return geometryTransferableExtractor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "meshTransferableExtractor", function() { return meshTransferableExtractor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "labelTransferableExtractor", function() { return labelTransferableExtractor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tileTransferableExtractor", function() { return tileTransferableExtractor; });
/* harmony import */ var _primitive_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);

var TileProviderMessageType;
(function (TileProviderMessageType) {
    TileProviderMessageType[TileProviderMessageType["INIT"] = 0] = "INIT";
    TileProviderMessageType[TileProviderMessageType["TILE_URL_UPDATE"] = 1] = "TILE_URL_UPDATE";
    TileProviderMessageType[TileProviderMessageType["TILE_REQUEST_BATCH"] = 2] = "TILE_REQUEST_BATCH";
    TileProviderMessageType[TileProviderMessageType["TILE_REQUEST_CANCEL_BATCH"] = 3] = "TILE_REQUEST_CANCEL_BATCH";
    TileProviderMessageType[TileProviderMessageType["TILE_RESPONSE"] = 4] = "TILE_RESPONSE";
    TileProviderMessageType[TileProviderMessageType["TILE_ERROR"] = 5] = "TILE_ERROR";
    TileProviderMessageType[TileProviderMessageType["GEOMETRY_RESPONSE"] = 6] = "GEOMETRY_RESPONSE";
    TileProviderMessageType[TileProviderMessageType["LABELS_RESPONSE"] = 7] = "LABELS_RESPONSE";
    TileProviderMessageType[TileProviderMessageType["MESH_REQUEST"] = 8] = "MESH_REQUEST";
    TileProviderMessageType[TileProviderMessageType["MESH_REQUEST_CANCEL"] = 9] = "MESH_REQUEST_CANCEL";
    TileProviderMessageType[TileProviderMessageType["MESH_RESPONSE"] = 10] = "MESH_RESPONSE";
    TileProviderMessageType[TileProviderMessageType["MESH_ERROR"] = 11] = "MESH_ERROR";
})(TileProviderMessageType || (TileProviderMessageType = {}));
const geometryTransferableExtractor = function (message, transferables = []) {
    Object(_primitive_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__["extractTransferables"])(message.polygonPages, transferables);
    Object(_primitive_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__["extractTransferables"])(message.transparentPolygonPages, transferables);
    Object(_primitive_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__["extractTransferables"])(message.texturedPolygonPages, transferables);
    Object(_primitive_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__["extractTransferables"])(message.meshPages, transferables);
    Object(_primitive_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__["extractTransferables"])(message.polylinePages, transferables);
    return transferables;
};
const meshTransferableExtractor = function (message) {
    const transferables = [];
    Object(_primitive_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__["extractTransferables"])(message.pages, transferables);
    return transferables;
};
const labelTransferableExtractor = function (message, transferables = []) {
    Object(_primitive_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__["extractTransferables"])(message.pointLabelPages, transferables);
    Object(_primitive_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__["extractTransferables"])(message.pointLabelBackgroundPages, transferables);
    Object(_primitive_provider_worker_messages__WEBPACK_IMPORTED_MODULE_0__["extractTransferables"])(message.curvedLabelPages, transferables);
    return transferables;
};
const tileTransferableExtractor = function (message) {
    const transferables = [];
    geometryTransferableExtractor(message, transferables);
    labelTransferableExtractor(message, transferables);
    return transferables;
};


/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extractTransferables", function() { return extractTransferables; });
/**
 * Extract ArrayBuffers (that are tansferable) from pages.
 */
function extractTransferables(pages, output) {
    for (const page of pages) {
        output.push(page.vertexBuffer.buffer, page.indexBuffer.buffer);
    }
}


/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return DfFontRegistry; });
/* harmony import */ var _font_registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _df_font__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);


/**
 * Registry that stores distance field fonts.
 */
class DfFontRegistry extends _font_registry__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(new _df_font__WEBPACK_IMPORTED_MODULE_1__["default"]('UNKNOWN_DF_FONT', 14, 0));
    }
}


/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return FontRegistry; });
/**
 * A central storage of all available fonts.
 */
class FontRegistry {
    /**
     * @param unknownFontInstance An instance of specific font type to be served as a stub when nonexistent font
     *     is requested. Requesting nonexistent fonts normally should not happen.
     *     The stub just allows to avoid tedious null checks in registry clients.
     */
    constructor(unknownFontInstance) {
        this._fonts = new Map();
        this._unknownFontInstance = unknownFontInstance;
    }
    /**
     * @return If a font with specified id is in the registry.
     */
    contains(fontId) {
        return this._fonts.has(fontId);
    }
    /**
     * @return Font with specified id or unknown font instance if it is not found.
     */
    get(fontId) {
        const font = this._fonts.get(fontId);
        if (font) {
            return font;
        }
        else {
            console.warn('Wow-wow-wow, something went wrong, you should not request nonexistent fonts');
            return this._unknownFontInstance;
        }
    }
    /**
     * @return All stored fonts.
     */
    getAll() {
        return [...this._fonts.values()];
    }
    /**
     * Adds new for to the registry.
     */
    add(font) {
        this._fonts.set(font.id, font);
    }
}


/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return DfFont; });
/* harmony import */ var _font__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);

const UNKNOWN_GLYPH = {
    id: -1,
    width: 0,
    height: 0,
    bearingX: 0,
    bearingY: 0,
    advance: 18
};
/**
 * Font whose glyphs are specified in distance field bitmaps. It's "margin" metric specifies glyph bitmap inner padding,
 * that is required to fit a "blurred" glyph image. This margin should be considered during layouting to draw glyphs of
 * proper sizes.
 */
class DfFont extends _font__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(id, xheight, margin) {
        super(id, xheight, UNKNOWN_GLYPH);
        this.margin = margin;
    }
}


/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Font; });
/**
 * Font is just a collection of glyph descriptions.
 */
class Font {
    /**
     * @param id Font id.
     * @param xheight The height of the "x" char in abstract points, in fact is used a the font size.
     * @param unknownGlyphInstance An instance of glyph to be served as a stub when nonexistent glyph
     *     is requested. Requesting nonexistent glyphs normally should not happen.
     *     The stub just allows to avoid tedious null checks in font clients.
     */
    constructor(id, xheight, unknownGlyphInstance) {
        this.id = id;
        this.xheight = xheight;
        this._unknownGlyphInstance = unknownGlyphInstance;
        this._glyphs = new Map();
    }
    /**
     * @return Glyph with specified id or unknown glyph instance.
     */
    getGlyph(glyphId) {
        const glyph = this._glyphs.get(glyphId);
        if (glyph) {
            return glyph;
        }
        else {
            console.warn('Wow-wow-wow, something went wrong, you should not request nonexistent glyphs');
            return this._unknownGlyphInstance;
        }
    }
    /**
     * @returns All stored glyphs.
     */
    getAllGlyphs() {
        return [...this._glyphs.values()];
    }
    /**
     * Adds glyph description.
     */
    addGlyph(glyph) {
        this._glyphs.set(glyph.id, glyph);
    }
    /**
     * Adds glyph descriptions from the iterable.
     */
    addAllGlyphs(glyphs) {
        for (const glyph of glyphs) {
            this.addGlyph(glyph);
        }
    }
}


/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return DfGlyphAtlasAllocator; });
/* harmony import */ var _df_glyph_atlas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);

/**
 * Glyph bitmap atlas. It manages allocation os separate glyph bitmaps in one big texture.
 */
class DfGlyphAtlasAllocator extends _df_glyph_atlas__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor(width, height) {
        super(width, height, new Uint8Array(width * height), new Map());
        this.isDirty = false;
        this._currentLinePositionX = 0;
        this._currentLinePositionY = 0;
        this._currentLineHeight = 0;
    }
    /**
     * Allocates distance field glyph in atlas with specified padding.
     */
    allocateGlyph(fontId, glyph, padding) {
        const width = glyph.width + padding * 2;
        const height = glyph.height + padding * 2;
        const maxCurrentLineWidth = this.width - this._currentLinePositionX;
        const maxCurrentLineHeight = this.height - this._currentLinePositionY;
        if (width <= maxCurrentLineWidth &&
            height <= maxCurrentLineHeight) {
            const location = {
                minX: this._currentLinePositionX,
                maxX: this._currentLinePositionX + width,
                minY: this._currentLinePositionY,
                maxY: this._currentLinePositionY + height
            };
            this._currentLinePositionX += width;
            this._currentLineHeight = Math.max(this._currentLineHeight, height);
            this._putGlyphBitmap(fontId, glyph, location);
            return location;
        }
        else {
            const maxNextLineHeight = this.height - (this._currentLinePositionY + this._currentLineHeight);
            if (width <= this.width &&
                height <= maxNextLineHeight) {
                this._currentLinePositionX = width;
                this._currentLinePositionY += this._currentLineHeight;
                this._currentLineHeight = height;
                const location = {
                    minY: this._currentLinePositionY,
                    maxY: this._currentLinePositionY + height,
                    minX: 0,
                    maxX: width
                };
                this._putGlyphBitmap(fontId, glyph, location);
                return location;
            }
            else {
                throw new Error('no room available');
            }
        }
    }
    /**
     * Puts glyph's bitmap in specified position.
     */
    _putGlyphBitmap(fontId, glyph, location) {
        for (let atlasY = location.minY, glyphY = 0; atlasY < location.maxY; atlasY++, glyphY++) {
            const atlasRowOffset = atlasY * this.width;
            const glyphRowOffset = glyphY * (location.maxX - location.minX);
            for (let atlasX = location.minX, glyphX = 0; atlasX < location.maxX; atlasX++, glyphX++) {
                this.data[atlasRowOffset + atlasX] = glyph.bitmap[glyphRowOffset + glyphX];
            }
        }
        this._glyphLocations.set(fontId + glyph.id, location);
        this.isDirty = true;
    }
}


/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return DfGlyphAtlas; });
const UNKNOWN_GLYPH_LOCATION = {
    minX: 0,
    maxX: 0,
    minY: 0,
    maxY: 0
};
/**
 * Abstract glyph atlas interface.
 */
class DfGlyphAtlas {
    constructor(width, height, data, glyphLocations) {
        this.width = width;
        this.height = height;
        this.data = data;
        this._glyphLocations = glyphLocations;
    }
    /**
     * @return Glyph location or fake location pointing to the origin (0, 0).
     */
    getGlyphLocation(fontId, glyphId) {
        const glyphLocation = this._glyphLocations.get(fontId + glyphId);
        if (glyphLocation) {
            return glyphLocation;
        }
        else {
            console.warn('Wow-wow-wow, something went wrong, you should not request nonexistent glyph locations');
            return UNKNOWN_GLYPH_LOCATION;
        }
    }
    /**
     * @return All glyph locations as [glyph id, glyph location] array. Glyph id is font id concatenated with glyph id.
     */
    getAllGlyphLocations() {
        return [...this._glyphLocations.entries()];
    }
}


/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BinaryHttpRequest", function() { return BinaryHttpRequest; });
/**
 * Base class for HTTP request wrappers. Its main function is to simplify API for HTTP via reasonable abstraction.
 */
class HttpRequest {
    constructor(url, responseType, method = 'GET') {
        this._url = url;
        this._method = method;
        this._xhr = new XMLHttpRequest();
        this._xhr.responseType = responseType;
    }
    get isCanceled() {
        return this._xhr.readyState === XMLHttpRequest.DONE && this._xhr.status === 0;
    }
    /**
     * Initiates all the networking activities. Must be called only once.
     */
    send() {
        const xhr = this._xhr;
        if (xhr.readyState !== XMLHttpRequest.UNSENT) {
            return Promise.reject(new Error('already sent'));
        }
        return new Promise((resolve, reject) => {
            xhr.open(this._method, this._url);
            xhr.onload = () => {
                if (this.isCanceled) {
                    return;
                }
                if (200 <= xhr.status && xhr.status < 300) {
                    resolve(this._prepareResponse(xhr.response));
                }
                else {
                    reject(new Error(`Failed request: ${xhr.status} ${xhr.statusText}, ${this._url}`));
                }
            };
            this._xhr.onerror = () => {
                reject(new Error(`Failed request: ${this._url}`));
            };
            this._xhr.send();
        });
    }
    /**
     * Cancels active request if possible, at least promise callback of the send() methods will not be invoked.
     */
    cancel() {
        if (this._xhr.readyState !== XMLHttpRequest.UNSENT &&
            !this.isCanceled) {
            this._xhr.abort();
        }
    }
}
/**
 * HTTP request that gets its response as an ArrayBuffer.
 */
class BinaryHttpRequest extends HttpRequest {
    constructor(url, method = 'GET') {
        super(url, 'arraybuffer', method);
    }
    _prepareResponse(response) {
        if (!(response instanceof ArrayBuffer)) {
            return new ArrayBuffer(0);
        }
        return response;
    }
}


/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApiGlyphsDeliveryManager", function() { return ApiGlyphsDeliveryManager; });
/* harmony import */ var _proto_aliases__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14);
/* harmony import */ var _font_df_font__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);
/* harmony import */ var _font_df_glyph_delivery_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(35);
/* harmony import */ var _util_hosts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(36);




/**
 * Provides glyphs from the API.
 */
class ApiGlyphsDeliveryManager extends _font_df_glyph_delivery_manager__WEBPACK_IMPORTED_MODULE_2__["default"] {
    constructor(fontRegistry, atlas) {
        super(fontRegistry, atlas);
        this.glyphRangeUrlTemplate = '';
    }
    _getGlyphRange(fontId, startGlyphId, endGlyphId) {
        const url = this._getGlyphRangeUrl(fontId, startGlyphId, endGlyphId);
        if (!url) {
            return Promise.resolve([]);
        }
        return fetch(url)
            .then((r) => r.arrayBuffer())
            .then((buffer) => {
            const response = _proto_aliases__WEBPACK_IMPORTED_MODULE_0__["GlyphList"].decode(new Uint8Array(buffer));
            if (this._fontRegistry.contains(fontId)) {
                const font = this._fontRegistry.get(fontId);
                font.xheight = response.font.xheight;
                font.margin = response.font.margin;
            }
            else {
                this._fontRegistry.add(new _font_df_font__WEBPACK_IMPORTED_MODULE_1__["default"](fontId, response.font.xheight, response.font.margin));
            }
            return response.glyphs;
        });
    }
    _getGlyphRangeUrl(fontId, startGlyphId, endGlyphId) {
        return this.glyphRangeUrlTemplate
            .replace('{{hostAlias}}', Object(_util_hosts__WEBPACK_IMPORTED_MODULE_3__["getHostAliasByUid"])(fontId))
            .replace('{{fontId}}', fontId)
            .replace('{{range}}', `${startGlyphId},${endGlyphId}`);
    }
}


/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Presentation", function() { return Presentation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tile", function() { return Tile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GlyphList", function() { return GlyphList; });
/* harmony import */ var _proto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(15);
/* harmony import */ var _proto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_proto__WEBPACK_IMPORTED_MODULE_0__);

// The sole purpose of this module is to provide shorthands to messages used in
// the codebase without polluting the rest of it.
//
// NB: `import` keyword here bears a meaning that's somewhat different from the
// ES modules one. It's here to create an alias to a symbol. It's necessary
// because those symbols are simultaneously types, classes and namespaces (thus,
// using `const` and `type` doesn't cut it).
//
// See https://www.typescriptlang.org/docs/handbook/namespaces.html#aliases.
var Presentation = _proto__WEBPACK_IMPORTED_MODULE_0__["yandex"].maps.proto.vectordata2.presentation.Presentation;
var Tile = _proto__WEBPACK_IMPORTED_MODULE_0__["yandex"].maps.proto.vectordata2.tile.Tile;
var GlyphList = _proto__WEBPACK_IMPORTED_MODULE_0__["yandex"].maps.proto.vectordata2.glyphs.GlyphList;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/


var $protobuf = __webpack_require__(16);

// Common aliases
var $Reader = $protobuf.Reader, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.yandex = (function() {

    /**
     * Namespace yandex.
     * @exports yandex
     * @namespace
     */
    var yandex = {};

    yandex.maps = (function() {

        /**
         * Namespace maps.
         * @memberof yandex
         * @namespace
         */
        var maps = {};

        maps.proto = (function() {

            /**
             * Namespace proto.
             * @memberof yandex.maps
             * @namespace
             */
            var proto = {};

            proto.vectordata2 = (function() {

                /**
                 * Namespace vectordata2.
                 * @memberof yandex.maps.proto
                 * @namespace
                 */
                var vectordata2 = {};

                vectordata2.tile = (function() {

                    /**
                     * Namespace tile.
                     * @memberof yandex.maps.proto.vectordata2
                     * @namespace
                     */
                    var tile = {};

                    tile.Tile = (function() {

                        /**
                         * Properties of a Tile.
                         * @memberof yandex.maps.proto.vectordata2.tile
                         * @interface ITile
                         * @property {Array.<yandex.maps.proto.vectordata2.presentation.Presentation>|null} [presentation] Tile presentation
                         * @property {yandex.maps.proto.vectordata2.tile.Tile.PointObjects|null} [points] Tile points
                         * @property {yandex.maps.proto.vectordata2.tile.Tile.PolylineObjects|null} [polylines] Tile polylines
                         * @property {yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects|null} [polygons] Tile polygons
                         * @property {yandex.maps.proto.vectordata2.tile.Tile.StraightLabels|null} [pointLabels] Tile pointLabels
                         * @property {yandex.maps.proto.vectordata2.tile.Tile.CurvedLabels|null} [polylineLabels] Tile polylineLabels
                         * @property {Array.<yandex.maps.proto.vectordata2.tile.Tile.Layer>|null} [layers] Tile layers
                         * @property {Array.<string>|null} [indoorPlanId] Tile indoorPlanId
                         */

                        /**
                         * Constructs a new Tile.
                         * @memberof yandex.maps.proto.vectordata2.tile
                         * @classdesc Represents a Tile.
                         * @implements ITile
                         * @constructor
                         * @param {yandex.maps.proto.vectordata2.tile.ITile=} [properties] Properties to set
                         */
                        function Tile(properties) {
                            this.presentation = [];
                            this.layers = [];
                            this.indoorPlanId = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Tile presentation.
                         * @member {Array.<yandex.maps.proto.vectordata2.presentation.Presentation>} presentation
                         * @memberof yandex.maps.proto.vectordata2.tile.Tile
                         * @instance
                         */
                        Tile.prototype.presentation = $util.emptyArray;

                        /**
                         * Tile points.
                         * @member {yandex.maps.proto.vectordata2.tile.Tile.PointObjects|null|undefined} points
                         * @memberof yandex.maps.proto.vectordata2.tile.Tile
                         * @instance
                         */
                        Tile.prototype.points = null;

                        /**
                         * Tile polylines.
                         * @member {yandex.maps.proto.vectordata2.tile.Tile.PolylineObjects|null|undefined} polylines
                         * @memberof yandex.maps.proto.vectordata2.tile.Tile
                         * @instance
                         */
                        Tile.prototype.polylines = null;

                        /**
                         * Tile polygons.
                         * @member {yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects|null|undefined} polygons
                         * @memberof yandex.maps.proto.vectordata2.tile.Tile
                         * @instance
                         */
                        Tile.prototype.polygons = null;

                        /**
                         * Tile pointLabels.
                         * @member {yandex.maps.proto.vectordata2.tile.Tile.StraightLabels|null|undefined} pointLabels
                         * @memberof yandex.maps.proto.vectordata2.tile.Tile
                         * @instance
                         */
                        Tile.prototype.pointLabels = null;

                        /**
                         * Tile polylineLabels.
                         * @member {yandex.maps.proto.vectordata2.tile.Tile.CurvedLabels|null|undefined} polylineLabels
                         * @memberof yandex.maps.proto.vectordata2.tile.Tile
                         * @instance
                         */
                        Tile.prototype.polylineLabels = null;

                        /**
                         * Tile layers.
                         * @member {Array.<yandex.maps.proto.vectordata2.tile.Tile.Layer>} layers
                         * @memberof yandex.maps.proto.vectordata2.tile.Tile
                         * @instance
                         */
                        Tile.prototype.layers = $util.emptyArray;

                        /**
                         * Tile indoorPlanId.
                         * @member {Array.<string>} indoorPlanId
                         * @memberof yandex.maps.proto.vectordata2.tile.Tile
                         * @instance
                         */
                        Tile.prototype.indoorPlanId = $util.emptyArray;

                        /**
                         * Decodes a Tile message from the specified reader or buffer.
                         * @function decode
                         * @memberof yandex.maps.proto.vectordata2.tile.Tile
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {yandex.maps.proto.vectordata2.tile.Tile} Tile
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Tile.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.tile.Tile();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.presentation && message.presentation.length))
                                        message.presentation = [];
                                    message.presentation.push($root.yandex.maps.proto.vectordata2.presentation.Presentation.decode(reader, reader.uint32()));
                                    break;
                                case 2:
                                    message.points = $root.yandex.maps.proto.vectordata2.tile.Tile.PointObjects.decode(reader, reader.uint32());
                                    break;
                                case 3:
                                    message.polylines = $root.yandex.maps.proto.vectordata2.tile.Tile.PolylineObjects.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.polygons = $root.yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects.decode(reader, reader.uint32());
                                    break;
                                case 5:
                                    message.pointLabels = $root.yandex.maps.proto.vectordata2.tile.Tile.StraightLabels.decode(reader, reader.uint32());
                                    break;
                                case 6:
                                    message.polylineLabels = $root.yandex.maps.proto.vectordata2.tile.Tile.CurvedLabels.decode(reader, reader.uint32());
                                    break;
                                case 8:
                                    if (!(message.layers && message.layers.length))
                                        message.layers = [];
                                    message.layers.push($root.yandex.maps.proto.vectordata2.tile.Tile.Layer.decode(reader, reader.uint32()));
                                    break;
                                case 9:
                                    if (!(message.indoorPlanId && message.indoorPlanId.length))
                                        message.indoorPlanId = [];
                                    message.indoorPlanId.push(reader.string());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        Tile.PointObjects = (function() {

                            /**
                             * Properties of a PointObjects.
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile
                             * @interface IPointObjects
                             * @property {Array.<number>|null} [coordsx] PointObjects coordsx
                             * @property {Array.<number>|null} [coordsy] PointObjects coordsy
                             * @property {Array.<number>|null} [classId] PointObjects classId
                             * @property {Array.<number>|null} [zOrder] PointObjects zOrder
                             */

                            /**
                             * Constructs a new PointObjects.
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile
                             * @classdesc Represents a PointObjects.
                             * @implements IPointObjects
                             * @constructor
                             * @param {yandex.maps.proto.vectordata2.tile.Tile.IPointObjects=} [properties] Properties to set
                             */
                            function PointObjects(properties) {
                                this.coordsx = [];
                                this.coordsy = [];
                                this.classId = [];
                                this.zOrder = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * PointObjects coordsx.
                             * @member {Array.<number>} coordsx
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PointObjects
                             * @instance
                             */
                            PointObjects.prototype.coordsx = $util.emptyArray;

                            /**
                             * PointObjects coordsy.
                             * @member {Array.<number>} coordsy
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PointObjects
                             * @instance
                             */
                            PointObjects.prototype.coordsy = $util.emptyArray;

                            /**
                             * PointObjects classId.
                             * @member {Array.<number>} classId
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PointObjects
                             * @instance
                             */
                            PointObjects.prototype.classId = $util.emptyArray;

                            /**
                             * PointObjects zOrder.
                             * @member {Array.<number>} zOrder
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PointObjects
                             * @instance
                             */
                            PointObjects.prototype.zOrder = $util.emptyArray;

                            /**
                             * Decodes a PointObjects message from the specified reader or buffer.
                             * @function decode
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PointObjects
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {yandex.maps.proto.vectordata2.tile.Tile.PointObjects} PointObjects
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            PointObjects.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.tile.Tile.PointObjects();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.coordsx && message.coordsx.length))
                                            message.coordsx = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.coordsx.push(reader.sint32());
                                        } else
                                            message.coordsx.push(reader.sint32());
                                        break;
                                    case 2:
                                        if (!(message.coordsy && message.coordsy.length))
                                            message.coordsy = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.coordsy.push(reader.sint32());
                                        } else
                                            message.coordsy.push(reader.sint32());
                                        break;
                                    case 3:
                                        if (!(message.classId && message.classId.length))
                                            message.classId = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.classId.push(reader.uint32());
                                        } else
                                            message.classId.push(reader.uint32());
                                        break;
                                    case 4:
                                        if (!(message.zOrder && message.zOrder.length))
                                            message.zOrder = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.zOrder.push(reader.sint32());
                                        } else
                                            message.zOrder.push(reader.sint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            return PointObjects;
                        })();

                        Tile.PolylineObjects = (function() {

                            /**
                             * Properties of a PolylineObjects.
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile
                             * @interface IPolylineObjects
                             * @property {Array.<number>|null} [coordsx] PolylineObjects coordsx
                             * @property {Array.<number>|null} [coordsy] PolylineObjects coordsy
                             * @property {Array.<number>|null} [lineSize] PolylineObjects lineSize
                             * @property {Array.<number|Long>|null} [distance] PolylineObjects distance
                             * @property {Array.<number>|null} [classId] PolylineObjects classId
                             * @property {Array.<number>|null} [pointVisibility] PolylineObjects pointVisibility
                             * @property {Array.<number>|null} [zOrderBegin] PolylineObjects zOrderBegin
                             * @property {Array.<number>|null} [zOrderEnd] PolylineObjects zOrderEnd
                             */

                            /**
                             * Constructs a new PolylineObjects.
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile
                             * @classdesc Represents a PolylineObjects.
                             * @implements IPolylineObjects
                             * @constructor
                             * @param {yandex.maps.proto.vectordata2.tile.Tile.IPolylineObjects=} [properties] Properties to set
                             */
                            function PolylineObjects(properties) {
                                this.coordsx = [];
                                this.coordsy = [];
                                this.lineSize = [];
                                this.distance = [];
                                this.classId = [];
                                this.pointVisibility = [];
                                this.zOrderBegin = [];
                                this.zOrderEnd = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * PolylineObjects coordsx.
                             * @member {Array.<number>} coordsx
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolylineObjects
                             * @instance
                             */
                            PolylineObjects.prototype.coordsx = $util.emptyArray;

                            /**
                             * PolylineObjects coordsy.
                             * @member {Array.<number>} coordsy
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolylineObjects
                             * @instance
                             */
                            PolylineObjects.prototype.coordsy = $util.emptyArray;

                            /**
                             * PolylineObjects lineSize.
                             * @member {Array.<number>} lineSize
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolylineObjects
                             * @instance
                             */
                            PolylineObjects.prototype.lineSize = $util.emptyArray;

                            /**
                             * PolylineObjects distance.
                             * @member {Array.<number|Long>} distance
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolylineObjects
                             * @instance
                             */
                            PolylineObjects.prototype.distance = $util.emptyArray;

                            /**
                             * PolylineObjects classId.
                             * @member {Array.<number>} classId
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolylineObjects
                             * @instance
                             */
                            PolylineObjects.prototype.classId = $util.emptyArray;

                            /**
                             * PolylineObjects pointVisibility.
                             * @member {Array.<number>} pointVisibility
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolylineObjects
                             * @instance
                             */
                            PolylineObjects.prototype.pointVisibility = $util.emptyArray;

                            /**
                             * PolylineObjects zOrderBegin.
                             * @member {Array.<number>} zOrderBegin
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolylineObjects
                             * @instance
                             */
                            PolylineObjects.prototype.zOrderBegin = $util.emptyArray;

                            /**
                             * PolylineObjects zOrderEnd.
                             * @member {Array.<number>} zOrderEnd
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolylineObjects
                             * @instance
                             */
                            PolylineObjects.prototype.zOrderEnd = $util.emptyArray;

                            /**
                             * Decodes a PolylineObjects message from the specified reader or buffer.
                             * @function decode
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolylineObjects
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {yandex.maps.proto.vectordata2.tile.Tile.PolylineObjects} PolylineObjects
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            PolylineObjects.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.tile.Tile.PolylineObjects();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.coordsx && message.coordsx.length))
                                            message.coordsx = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.coordsx.push(reader.sint32());
                                        } else
                                            message.coordsx.push(reader.sint32());
                                        break;
                                    case 2:
                                        if (!(message.coordsy && message.coordsy.length))
                                            message.coordsy = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.coordsy.push(reader.sint32());
                                        } else
                                            message.coordsy.push(reader.sint32());
                                        break;
                                    case 3:
                                        if (!(message.lineSize && message.lineSize.length))
                                            message.lineSize = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.lineSize.push(reader.uint32());
                                        } else
                                            message.lineSize.push(reader.uint32());
                                        break;
                                    case 4:
                                        if (!(message.distance && message.distance.length))
                                            message.distance = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.distance.push(reader.uint64());
                                        } else
                                            message.distance.push(reader.uint64());
                                        break;
                                    case 5:
                                        if (!(message.classId && message.classId.length))
                                            message.classId = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.classId.push(reader.uint32());
                                        } else
                                            message.classId.push(reader.uint32());
                                        break;
                                    case 6:
                                        if (!(message.pointVisibility && message.pointVisibility.length))
                                            message.pointVisibility = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.pointVisibility.push(reader.uint32());
                                        } else
                                            message.pointVisibility.push(reader.uint32());
                                        break;
                                    case 7:
                                        if (!(message.zOrderBegin && message.zOrderBegin.length))
                                            message.zOrderBegin = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.zOrderBegin.push(reader.sint32());
                                        } else
                                            message.zOrderBegin.push(reader.sint32());
                                        break;
                                    case 8:
                                        if (!(message.zOrderEnd && message.zOrderEnd.length))
                                            message.zOrderEnd = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.zOrderEnd.push(reader.sint32());
                                        } else
                                            message.zOrderEnd.push(reader.sint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            return PolylineObjects;
                        })();

                        Tile.PolygonObjects = (function() {

                            /**
                             * Properties of a PolygonObjects.
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile
                             * @interface IPolygonObjects
                             * @property {Array.<number>|null} [coordsx] PolygonObjects coordsx
                             * @property {Array.<number>|null} [coordsy] PolygonObjects coordsy
                             * @property {Array.<number>|null} [classId] PolygonObjects classId
                             * @property {Array.<number>|null} [ringCount] PolygonObjects ringCount
                             * @property {Array.<number>|null} [ringSize] PolygonObjects ringSize
                             * @property {Array.<number>|null} [contourIndex] PolygonObjects contourIndex
                             * @property {Array.<number>|null} [contourCount] PolygonObjects contourCount
                             * @property {Array.<number>|null} [pointVisibility] PolygonObjects pointVisibility
                             * @property {Array.<number>|null} [height] PolygonObjects height
                             * @property {Array.<number>|null} [zOrder] PolygonObjects zOrder
                             * @property {Array.<yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects.Mesh>|null} [mesh] PolygonObjects mesh
                             */

                            /**
                             * Constructs a new PolygonObjects.
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile
                             * @classdesc Represents a PolygonObjects.
                             * @implements IPolygonObjects
                             * @constructor
                             * @param {yandex.maps.proto.vectordata2.tile.Tile.IPolygonObjects=} [properties] Properties to set
                             */
                            function PolygonObjects(properties) {
                                this.coordsx = [];
                                this.coordsy = [];
                                this.classId = [];
                                this.ringCount = [];
                                this.ringSize = [];
                                this.contourIndex = [];
                                this.contourCount = [];
                                this.pointVisibility = [];
                                this.height = [];
                                this.zOrder = [];
                                this.mesh = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * PolygonObjects coordsx.
                             * @member {Array.<number>} coordsx
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects
                             * @instance
                             */
                            PolygonObjects.prototype.coordsx = $util.emptyArray;

                            /**
                             * PolygonObjects coordsy.
                             * @member {Array.<number>} coordsy
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects
                             * @instance
                             */
                            PolygonObjects.prototype.coordsy = $util.emptyArray;

                            /**
                             * PolygonObjects classId.
                             * @member {Array.<number>} classId
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects
                             * @instance
                             */
                            PolygonObjects.prototype.classId = $util.emptyArray;

                            /**
                             * PolygonObjects ringCount.
                             * @member {Array.<number>} ringCount
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects
                             * @instance
                             */
                            PolygonObjects.prototype.ringCount = $util.emptyArray;

                            /**
                             * PolygonObjects ringSize.
                             * @member {Array.<number>} ringSize
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects
                             * @instance
                             */
                            PolygonObjects.prototype.ringSize = $util.emptyArray;

                            /**
                             * PolygonObjects contourIndex.
                             * @member {Array.<number>} contourIndex
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects
                             * @instance
                             */
                            PolygonObjects.prototype.contourIndex = $util.emptyArray;

                            /**
                             * PolygonObjects contourCount.
                             * @member {Array.<number>} contourCount
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects
                             * @instance
                             */
                            PolygonObjects.prototype.contourCount = $util.emptyArray;

                            /**
                             * PolygonObjects pointVisibility.
                             * @member {Array.<number>} pointVisibility
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects
                             * @instance
                             */
                            PolygonObjects.prototype.pointVisibility = $util.emptyArray;

                            /**
                             * PolygonObjects height.
                             * @member {Array.<number>} height
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects
                             * @instance
                             */
                            PolygonObjects.prototype.height = $util.emptyArray;

                            /**
                             * PolygonObjects zOrder.
                             * @member {Array.<number>} zOrder
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects
                             * @instance
                             */
                            PolygonObjects.prototype.zOrder = $util.emptyArray;

                            /**
                             * PolygonObjects mesh.
                             * @member {Array.<yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects.Mesh>} mesh
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects
                             * @instance
                             */
                            PolygonObjects.prototype.mesh = $util.emptyArray;

                            /**
                             * Decodes a PolygonObjects message from the specified reader or buffer.
                             * @function decode
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects} PolygonObjects
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            PolygonObjects.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.coordsx && message.coordsx.length))
                                            message.coordsx = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.coordsx.push(reader.sint32());
                                        } else
                                            message.coordsx.push(reader.sint32());
                                        break;
                                    case 2:
                                        if (!(message.coordsy && message.coordsy.length))
                                            message.coordsy = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.coordsy.push(reader.sint32());
                                        } else
                                            message.coordsy.push(reader.sint32());
                                        break;
                                    case 3:
                                        if (!(message.classId && message.classId.length))
                                            message.classId = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.classId.push(reader.uint32());
                                        } else
                                            message.classId.push(reader.uint32());
                                        break;
                                    case 4:
                                        if (!(message.ringCount && message.ringCount.length))
                                            message.ringCount = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.ringCount.push(reader.uint32());
                                        } else
                                            message.ringCount.push(reader.uint32());
                                        break;
                                    case 5:
                                        if (!(message.ringSize && message.ringSize.length))
                                            message.ringSize = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.ringSize.push(reader.uint32());
                                        } else
                                            message.ringSize.push(reader.uint32());
                                        break;
                                    case 6:
                                        if (!(message.contourIndex && message.contourIndex.length))
                                            message.contourIndex = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.contourIndex.push(reader.sint32());
                                        } else
                                            message.contourIndex.push(reader.sint32());
                                        break;
                                    case 7:
                                        if (!(message.contourCount && message.contourCount.length))
                                            message.contourCount = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.contourCount.push(reader.sint32());
                                        } else
                                            message.contourCount.push(reader.sint32());
                                        break;
                                    case 8:
                                        if (!(message.pointVisibility && message.pointVisibility.length))
                                            message.pointVisibility = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.pointVisibility.push(reader.uint32());
                                        } else
                                            message.pointVisibility.push(reader.uint32());
                                        break;
                                    case 9:
                                        if (!(message.height && message.height.length))
                                            message.height = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.height.push(reader.sint32());
                                        } else
                                            message.height.push(reader.sint32());
                                        break;
                                    case 10:
                                        if (!(message.zOrder && message.zOrder.length))
                                            message.zOrder = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.zOrder.push(reader.sint32());
                                        } else
                                            message.zOrder.push(reader.sint32());
                                        break;
                                    case 11:
                                        if (!(message.mesh && message.mesh.length))
                                            message.mesh = [];
                                        message.mesh.push($root.yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects.Mesh.decode(reader, reader.uint32()));
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            PolygonObjects.BBox = (function() {

                                /**
                                 * Properties of a BBox.
                                 * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects
                                 * @interface IBBox
                                 * @property {number|null} [minX] BBox minX
                                 * @property {number|null} [minY] BBox minY
                                 * @property {number|null} [maxX] BBox maxX
                                 * @property {number|null} [maxY] BBox maxY
                                 */

                                /**
                                 * Constructs a new BBox.
                                 * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects
                                 * @classdesc Represents a BBox.
                                 * @implements IBBox
                                 * @constructor
                                 * @param {yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects.IBBox=} [properties] Properties to set
                                 */
                                function BBox(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * BBox minX.
                                 * @member {number} minX
                                 * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects.BBox
                                 * @instance
                                 */
                                BBox.prototype.minX = 0;

                                /**
                                 * BBox minY.
                                 * @member {number} minY
                                 * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects.BBox
                                 * @instance
                                 */
                                BBox.prototype.minY = 0;

                                /**
                                 * BBox maxX.
                                 * @member {number} maxX
                                 * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects.BBox
                                 * @instance
                                 */
                                BBox.prototype.maxX = 0;

                                /**
                                 * BBox maxY.
                                 * @member {number} maxY
                                 * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects.BBox
                                 * @instance
                                 */
                                BBox.prototype.maxY = 0;

                                /**
                                 * Decodes a BBox message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects.BBox
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects.BBox} BBox
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                BBox.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects.BBox();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.minX = reader.sint32();
                                            break;
                                        case 2:
                                            message.minY = reader.sint32();
                                            break;
                                        case 3:
                                            message.maxX = reader.sint32();
                                            break;
                                        case 4:
                                            message.maxY = reader.sint32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                return BBox;
                            })();

                            PolygonObjects.Mesh = (function() {

                                /**
                                 * Properties of a Mesh.
                                 * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects
                                 * @interface IMesh
                                 * @property {number|null} [polygonId] Mesh polygonId
                                 * @property {string|null} [meshId] Mesh meshId
                                 * @property {yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects.BBox|null} [bbox] Mesh bbox
                                 * @property {string|null} [objectId] Mesh objectId
                                 */

                                /**
                                 * Constructs a new Mesh.
                                 * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects
                                 * @classdesc Represents a Mesh.
                                 * @implements IMesh
                                 * @constructor
                                 * @param {yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects.IMesh=} [properties] Properties to set
                                 */
                                function Mesh(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Mesh polygonId.
                                 * @member {number} polygonId
                                 * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects.Mesh
                                 * @instance
                                 */
                                Mesh.prototype.polygonId = 0;

                                /**
                                 * Mesh meshId.
                                 * @member {string} meshId
                                 * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects.Mesh
                                 * @instance
                                 */
                                Mesh.prototype.meshId = "";

                                /**
                                 * Mesh bbox.
                                 * @member {yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects.BBox|null|undefined} bbox
                                 * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects.Mesh
                                 * @instance
                                 */
                                Mesh.prototype.bbox = null;

                                /**
                                 * Mesh objectId.
                                 * @member {string} objectId
                                 * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects.Mesh
                                 * @instance
                                 */
                                Mesh.prototype.objectId = "";

                                /**
                                 * Decodes a Mesh message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects.Mesh
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects.Mesh} Mesh
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Mesh.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects.Mesh();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.polygonId = reader.uint32();
                                            break;
                                        case 2:
                                            message.meshId = reader.string();
                                            break;
                                        case 3:
                                            message.bbox = $root.yandex.maps.proto.vectordata2.tile.Tile.PolygonObjects.BBox.decode(reader, reader.uint32());
                                            break;
                                        case 4:
                                            message.objectId = reader.string();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                return Mesh;
                            })();

                            return PolygonObjects;
                        })();

                        Tile.ShapedString = (function() {

                            /**
                             * Properties of a ShapedString.
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile
                             * @interface IShapedString
                             * @property {Array.<number>|null} [glyphs] ShapedString glyphs
                             */

                            /**
                             * Constructs a new ShapedString.
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile
                             * @classdesc Represents a ShapedString.
                             * @implements IShapedString
                             * @constructor
                             * @param {yandex.maps.proto.vectordata2.tile.Tile.IShapedString=} [properties] Properties to set
                             */
                            function ShapedString(properties) {
                                this.glyphs = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * ShapedString glyphs.
                             * @member {Array.<number>} glyphs
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.ShapedString
                             * @instance
                             */
                            ShapedString.prototype.glyphs = $util.emptyArray;

                            /**
                             * Decodes a ShapedString message from the specified reader or buffer.
                             * @function decode
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.ShapedString
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {yandex.maps.proto.vectordata2.tile.Tile.ShapedString} ShapedString
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ShapedString.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.tile.Tile.ShapedString();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.glyphs && message.glyphs.length))
                                            message.glyphs = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.glyphs.push(reader.uint32());
                                        } else
                                            message.glyphs.push(reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            return ShapedString;
                        })();

                        Tile.ShapedText = (function() {

                            /**
                             * Properties of a ShapedText.
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile
                             * @interface IShapedText
                             * @property {Array.<yandex.maps.proto.vectordata2.tile.Tile.ShapedString>|null} [strings] ShapedText strings
                             */

                            /**
                             * Constructs a new ShapedText.
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile
                             * @classdesc Represents a ShapedText.
                             * @implements IShapedText
                             * @constructor
                             * @param {yandex.maps.proto.vectordata2.tile.Tile.IShapedText=} [properties] Properties to set
                             */
                            function ShapedText(properties) {
                                this.strings = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * ShapedText strings.
                             * @member {Array.<yandex.maps.proto.vectordata2.tile.Tile.ShapedString>} strings
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.ShapedText
                             * @instance
                             */
                            ShapedText.prototype.strings = $util.emptyArray;

                            /**
                             * Decodes a ShapedText message from the specified reader or buffer.
                             * @function decode
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.ShapedText
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {yandex.maps.proto.vectordata2.tile.Tile.ShapedText} ShapedText
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ShapedText.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.tile.Tile.ShapedText();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.strings && message.strings.length))
                                            message.strings = [];
                                        message.strings.push($root.yandex.maps.proto.vectordata2.tile.Tile.ShapedString.decode(reader, reader.uint32()));
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            return ShapedText;
                        })();

                        Tile.StraightLabels = (function() {

                            /**
                             * Properties of a StraightLabels.
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile
                             * @interface IStraightLabels
                             * @property {Array.<number>|null} [classId] StraightLabels classId
                             * @property {Array.<number>|null} [centerX] StraightLabels centerX
                             * @property {Array.<number>|null} [centerY] StraightLabels centerY
                             * @property {Array.<number>|null} [offsetX] StraightLabels offsetX
                             * @property {Array.<number>|null} [offsetY] StraightLabels offsetY
                             * @property {Array.<yandex.maps.proto.vectordata2.tile.Tile.ShapedText>|null} [text] StraightLabels text
                             * @property {Array.<yandex.maps.proto.vectordata2.tile.Tile.ShapedText>|null} [textAlt] StraightLabels textAlt
                             * @property {Array.<number>|null} [priority] StraightLabels priority
                             * @property {Array.<yandex.maps.proto.vectordata2.tile.Tile.StraightLabels.AlignType>|null} [align] StraightLabels align
                             */

                            /**
                             * Constructs a new StraightLabels.
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile
                             * @classdesc Represents a StraightLabels.
                             * @implements IStraightLabels
                             * @constructor
                             * @param {yandex.maps.proto.vectordata2.tile.Tile.IStraightLabels=} [properties] Properties to set
                             */
                            function StraightLabels(properties) {
                                this.classId = [];
                                this.centerX = [];
                                this.centerY = [];
                                this.offsetX = [];
                                this.offsetY = [];
                                this.text = [];
                                this.textAlt = [];
                                this.priority = [];
                                this.align = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * StraightLabels classId.
                             * @member {Array.<number>} classId
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.StraightLabels
                             * @instance
                             */
                            StraightLabels.prototype.classId = $util.emptyArray;

                            /**
                             * StraightLabels centerX.
                             * @member {Array.<number>} centerX
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.StraightLabels
                             * @instance
                             */
                            StraightLabels.prototype.centerX = $util.emptyArray;

                            /**
                             * StraightLabels centerY.
                             * @member {Array.<number>} centerY
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.StraightLabels
                             * @instance
                             */
                            StraightLabels.prototype.centerY = $util.emptyArray;

                            /**
                             * StraightLabels offsetX.
                             * @member {Array.<number>} offsetX
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.StraightLabels
                             * @instance
                             */
                            StraightLabels.prototype.offsetX = $util.emptyArray;

                            /**
                             * StraightLabels offsetY.
                             * @member {Array.<number>} offsetY
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.StraightLabels
                             * @instance
                             */
                            StraightLabels.prototype.offsetY = $util.emptyArray;

                            /**
                             * StraightLabels text.
                             * @member {Array.<yandex.maps.proto.vectordata2.tile.Tile.ShapedText>} text
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.StraightLabels
                             * @instance
                             */
                            StraightLabels.prototype.text = $util.emptyArray;

                            /**
                             * StraightLabels textAlt.
                             * @member {Array.<yandex.maps.proto.vectordata2.tile.Tile.ShapedText>} textAlt
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.StraightLabels
                             * @instance
                             */
                            StraightLabels.prototype.textAlt = $util.emptyArray;

                            /**
                             * StraightLabels priority.
                             * @member {Array.<number>} priority
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.StraightLabels
                             * @instance
                             */
                            StraightLabels.prototype.priority = $util.emptyArray;

                            /**
                             * StraightLabels align.
                             * @member {Array.<yandex.maps.proto.vectordata2.tile.Tile.StraightLabels.AlignType>} align
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.StraightLabels
                             * @instance
                             */
                            StraightLabels.prototype.align = $util.emptyArray;

                            /**
                             * Decodes a StraightLabels message from the specified reader or buffer.
                             * @function decode
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.StraightLabels
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {yandex.maps.proto.vectordata2.tile.Tile.StraightLabels} StraightLabels
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            StraightLabels.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.tile.Tile.StraightLabels();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.classId && message.classId.length))
                                            message.classId = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.classId.push(reader.uint32());
                                        } else
                                            message.classId.push(reader.uint32());
                                        break;
                                    case 2:
                                        if (!(message.centerX && message.centerX.length))
                                            message.centerX = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.centerX.push(reader.sint32());
                                        } else
                                            message.centerX.push(reader.sint32());
                                        break;
                                    case 3:
                                        if (!(message.centerY && message.centerY.length))
                                            message.centerY = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.centerY.push(reader.sint32());
                                        } else
                                            message.centerY.push(reader.sint32());
                                        break;
                                    case 4:
                                        if (!(message.offsetX && message.offsetX.length))
                                            message.offsetX = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.offsetX.push(reader.sint32());
                                        } else
                                            message.offsetX.push(reader.sint32());
                                        break;
                                    case 5:
                                        if (!(message.offsetY && message.offsetY.length))
                                            message.offsetY = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.offsetY.push(reader.sint32());
                                        } else
                                            message.offsetY.push(reader.sint32());
                                        break;
                                    case 6:
                                        if (!(message.text && message.text.length))
                                            message.text = [];
                                        message.text.push($root.yandex.maps.proto.vectordata2.tile.Tile.ShapedText.decode(reader, reader.uint32()));
                                        break;
                                    case 7:
                                        if (!(message.textAlt && message.textAlt.length))
                                            message.textAlt = [];
                                        message.textAlt.push($root.yandex.maps.proto.vectordata2.tile.Tile.ShapedText.decode(reader, reader.uint32()));
                                        break;
                                    case 8:
                                        if (!(message.priority && message.priority.length))
                                            message.priority = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.priority.push(reader.sint32());
                                        } else
                                            message.priority.push(reader.sint32());
                                        break;
                                    case 9:
                                        if (!(message.align && message.align.length))
                                            message.align = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.align.push(reader.int32());
                                        } else
                                            message.align.push(reader.int32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            /**
                             * AlignType enum.
                             * @name yandex.maps.proto.vectordata2.tile.Tile.StraightLabels.AlignType
                             * @enum {string}
                             * @property {number} Left=0 Left value
                             * @property {number} Center=1 Center value
                             * @property {number} Right=2 Right value
                             */
                            StraightLabels.AlignType = (function() {
                                var valuesById = {}, values = Object.create(valuesById);
                                values[valuesById[0] = "Left"] = 0;
                                values[valuesById[1] = "Center"] = 1;
                                values[valuesById[2] = "Right"] = 2;
                                return values;
                            })();

                            return StraightLabels;
                        })();

                        Tile.CurvedLabels = (function() {

                            /**
                             * Properties of a CurvedLabels.
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile
                             * @interface ICurvedLabels
                             * @property {Array.<number>|null} [classId] CurvedLabels classId
                             * @property {Array.<yandex.maps.proto.vectordata2.tile.Tile.ShapedString>|null} [text] CurvedLabels text
                             * @property {Array.<yandex.maps.proto.vectordata2.tile.Tile.ShapedString>|null} [textAlt] CurvedLabels textAlt
                             * @property {Array.<number>|null} [priority] CurvedLabels priority
                             * @property {Array.<number>|null} [verticesCount] CurvedLabels verticesCount
                             * @property {Array.<number>|null} [vertexX] CurvedLabels vertexX
                             * @property {Array.<number>|null} [vertexY] CurvedLabels vertexY
                             */

                            /**
                             * Constructs a new CurvedLabels.
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile
                             * @classdesc Represents a CurvedLabels.
                             * @implements ICurvedLabels
                             * @constructor
                             * @param {yandex.maps.proto.vectordata2.tile.Tile.ICurvedLabels=} [properties] Properties to set
                             */
                            function CurvedLabels(properties) {
                                this.classId = [];
                                this.text = [];
                                this.textAlt = [];
                                this.priority = [];
                                this.verticesCount = [];
                                this.vertexX = [];
                                this.vertexY = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * CurvedLabels classId.
                             * @member {Array.<number>} classId
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.CurvedLabels
                             * @instance
                             */
                            CurvedLabels.prototype.classId = $util.emptyArray;

                            /**
                             * CurvedLabels text.
                             * @member {Array.<yandex.maps.proto.vectordata2.tile.Tile.ShapedString>} text
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.CurvedLabels
                             * @instance
                             */
                            CurvedLabels.prototype.text = $util.emptyArray;

                            /**
                             * CurvedLabels textAlt.
                             * @member {Array.<yandex.maps.proto.vectordata2.tile.Tile.ShapedString>} textAlt
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.CurvedLabels
                             * @instance
                             */
                            CurvedLabels.prototype.textAlt = $util.emptyArray;

                            /**
                             * CurvedLabels priority.
                             * @member {Array.<number>} priority
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.CurvedLabels
                             * @instance
                             */
                            CurvedLabels.prototype.priority = $util.emptyArray;

                            /**
                             * CurvedLabels verticesCount.
                             * @member {Array.<number>} verticesCount
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.CurvedLabels
                             * @instance
                             */
                            CurvedLabels.prototype.verticesCount = $util.emptyArray;

                            /**
                             * CurvedLabels vertexX.
                             * @member {Array.<number>} vertexX
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.CurvedLabels
                             * @instance
                             */
                            CurvedLabels.prototype.vertexX = $util.emptyArray;

                            /**
                             * CurvedLabels vertexY.
                             * @member {Array.<number>} vertexY
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.CurvedLabels
                             * @instance
                             */
                            CurvedLabels.prototype.vertexY = $util.emptyArray;

                            /**
                             * Decodes a CurvedLabels message from the specified reader or buffer.
                             * @function decode
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.CurvedLabels
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {yandex.maps.proto.vectordata2.tile.Tile.CurvedLabels} CurvedLabels
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            CurvedLabels.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.tile.Tile.CurvedLabels();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        if (!(message.classId && message.classId.length))
                                            message.classId = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.classId.push(reader.uint32());
                                        } else
                                            message.classId.push(reader.uint32());
                                        break;
                                    case 2:
                                        if (!(message.text && message.text.length))
                                            message.text = [];
                                        message.text.push($root.yandex.maps.proto.vectordata2.tile.Tile.ShapedString.decode(reader, reader.uint32()));
                                        break;
                                    case 3:
                                        if (!(message.textAlt && message.textAlt.length))
                                            message.textAlt = [];
                                        message.textAlt.push($root.yandex.maps.proto.vectordata2.tile.Tile.ShapedString.decode(reader, reader.uint32()));
                                        break;
                                    case 4:
                                        if (!(message.priority && message.priority.length))
                                            message.priority = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.priority.push(reader.sint32());
                                        } else
                                            message.priority.push(reader.sint32());
                                        break;
                                    case 5:
                                        if (!(message.verticesCount && message.verticesCount.length))
                                            message.verticesCount = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.verticesCount.push(reader.uint32());
                                        } else
                                            message.verticesCount.push(reader.uint32());
                                        break;
                                    case 6:
                                        if (!(message.vertexX && message.vertexX.length))
                                            message.vertexX = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.vertexX.push(reader.sint32());
                                        } else
                                            message.vertexX.push(reader.sint32());
                                        break;
                                    case 7:
                                        if (!(message.vertexY && message.vertexY.length))
                                            message.vertexY = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.vertexY.push(reader.sint32());
                                        } else
                                            message.vertexY.push(reader.sint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            return CurvedLabels;
                        })();

                        Tile.Layer = (function() {

                            /**
                             * Properties of a Layer.
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile
                             * @interface ILayer
                             * @property {string|null} [name] Layer name
                             * @property {Array.<string>|null} [ids] Layer ids
                             * @property {Array.<number>|null} [objectIndices] Layer objectIndices
                             * @property {Array.<string>|null} [keys] Layer keys
                             * @property {Array.<string>|null} [values] Layer values
                             */

                            /**
                             * Constructs a new Layer.
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile
                             * @classdesc Represents a Layer.
                             * @implements ILayer
                             * @constructor
                             * @param {yandex.maps.proto.vectordata2.tile.Tile.ILayer=} [properties] Properties to set
                             */
                            function Layer(properties) {
                                this.ids = [];
                                this.objectIndices = [];
                                this.keys = [];
                                this.values = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * Layer name.
                             * @member {string} name
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.Layer
                             * @instance
                             */
                            Layer.prototype.name = "";

                            /**
                             * Layer ids.
                             * @member {Array.<string>} ids
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.Layer
                             * @instance
                             */
                            Layer.prototype.ids = $util.emptyArray;

                            /**
                             * Layer objectIndices.
                             * @member {Array.<number>} objectIndices
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.Layer
                             * @instance
                             */
                            Layer.prototype.objectIndices = $util.emptyArray;

                            /**
                             * Layer keys.
                             * @member {Array.<string>} keys
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.Layer
                             * @instance
                             */
                            Layer.prototype.keys = $util.emptyArray;

                            /**
                             * Layer values.
                             * @member {Array.<string>} values
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.Layer
                             * @instance
                             */
                            Layer.prototype.values = $util.emptyArray;

                            /**
                             * Decodes a Layer message from the specified reader or buffer.
                             * @function decode
                             * @memberof yandex.maps.proto.vectordata2.tile.Tile.Layer
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {yandex.maps.proto.vectordata2.tile.Tile.Layer} Layer
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Layer.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.tile.Tile.Layer();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.name = reader.string();
                                        break;
                                    case 2:
                                        if (!(message.ids && message.ids.length))
                                            message.ids = [];
                                        message.ids.push(reader.string());
                                        break;
                                    case 3:
                                        if (!(message.objectIndices && message.objectIndices.length))
                                            message.objectIndices = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.objectIndices.push(reader.uint32());
                                        } else
                                            message.objectIndices.push(reader.uint32());
                                        break;
                                    case 4:
                                        if (!(message.keys && message.keys.length))
                                            message.keys = [];
                                        message.keys.push(reader.string());
                                        break;
                                    case 5:
                                        if (!(message.values && message.values.length))
                                            message.values = [];
                                        message.values.push(reader.string());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            return Layer;
                        })();

                        return Tile;
                    })();

                    return tile;
                })();

                vectordata2.presentation = (function() {

                    /**
                     * Namespace presentation.
                     * @memberof yandex.maps.proto.vectordata2
                     * @namespace
                     */
                    var presentation = {};

                    presentation.Presentation = (function() {

                        /**
                         * Properties of a Presentation.
                         * @memberof yandex.maps.proto.vectordata2.presentation
                         * @interface IPresentation
                         * @property {Array.<yandex.maps.proto.vectordata2.presentation.Presentation.Class>|null} [classes] Presentation classes
                         * @property {string|null} [name] Presentation name
                         * @property {yandex.maps.proto.vectordata2.presentation.Presentation.Parameters|null} [params] Presentation params
                         */

                        /**
                         * Constructs a new Presentation.
                         * @memberof yandex.maps.proto.vectordata2.presentation
                         * @classdesc Represents a Presentation.
                         * @implements IPresentation
                         * @constructor
                         * @param {yandex.maps.proto.vectordata2.presentation.IPresentation=} [properties] Properties to set
                         */
                        function Presentation(properties) {
                            this.classes = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Presentation classes.
                         * @member {Array.<yandex.maps.proto.vectordata2.presentation.Presentation.Class>} classes
                         * @memberof yandex.maps.proto.vectordata2.presentation.Presentation
                         * @instance
                         */
                        Presentation.prototype.classes = $util.emptyArray;

                        /**
                         * Presentation name.
                         * @member {string} name
                         * @memberof yandex.maps.proto.vectordata2.presentation.Presentation
                         * @instance
                         */
                        Presentation.prototype.name = "";

                        /**
                         * Presentation params.
                         * @member {yandex.maps.proto.vectordata2.presentation.Presentation.Parameters|null|undefined} params
                         * @memberof yandex.maps.proto.vectordata2.presentation.Presentation
                         * @instance
                         */
                        Presentation.prototype.params = null;

                        /**
                         * Decodes a Presentation message from the specified reader or buffer.
                         * @function decode
                         * @memberof yandex.maps.proto.vectordata2.presentation.Presentation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {yandex.maps.proto.vectordata2.presentation.Presentation} Presentation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Presentation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.presentation.Presentation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.classes && message.classes.length))
                                        message.classes = [];
                                    message.classes.push($root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.decode(reader, reader.uint32()));
                                    break;
                                case 2:
                                    message.name = reader.string();
                                    break;
                                case 3:
                                    message.params = $root.yandex.maps.proto.vectordata2.presentation.Presentation.Parameters.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        Presentation.Class = (function() {

                            /**
                             * Properties of a Class.
                             * @memberof yandex.maps.proto.vectordata2.presentation.Presentation
                             * @interface IClass
                             * @property {number|null} [id] Class id
                             * @property {string|null} [name] Class name
                             * @property {Array.<yandex.maps.proto.vectordata2.presentation.Presentation.Class.ZoomSlice>|null} [slices] Class slices
                             */

                            /**
                             * Constructs a new Class.
                             * @memberof yandex.maps.proto.vectordata2.presentation.Presentation
                             * @classdesc Represents a Class.
                             * @implements IClass
                             * @constructor
                             * @param {yandex.maps.proto.vectordata2.presentation.Presentation.IClass=} [properties] Properties to set
                             */
                            function Class(properties) {
                                this.slices = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * Class id.
                             * @member {number} id
                             * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                             * @instance
                             */
                            Class.prototype.id = 0;

                            /**
                             * Class name.
                             * @member {string} name
                             * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                             * @instance
                             */
                            Class.prototype.name = "";

                            /**
                             * Class slices.
                             * @member {Array.<yandex.maps.proto.vectordata2.presentation.Presentation.Class.ZoomSlice>} slices
                             * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                             * @instance
                             */
                            Class.prototype.slices = $util.emptyArray;

                            /**
                             * Decodes a Class message from the specified reader or buffer.
                             * @function decode
                             * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {yandex.maps.proto.vectordata2.presentation.Presentation.Class} Class
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Class.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.id = reader.uint32();
                                        break;
                                    case 2:
                                        message.name = reader.string();
                                        break;
                                    case 3:
                                        if (!(message.slices && message.slices.length))
                                            message.slices = [];
                                        message.slices.push($root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.ZoomSlice.decode(reader, reader.uint32()));
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            Class.ZoomRange = (function() {

                                /**
                                 * Properties of a ZoomRange.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                                 * @interface IZoomRange
                                 * @property {number|null} [min] ZoomRange min
                                 * @property {number|null} [max] ZoomRange max
                                 */

                                /**
                                 * Constructs a new ZoomRange.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                                 * @classdesc Represents a ZoomRange.
                                 * @implements IZoomRange
                                 * @constructor
                                 * @param {yandex.maps.proto.vectordata2.presentation.Presentation.Class.IZoomRange=} [properties] Properties to set
                                 */
                                function ZoomRange(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ZoomRange min.
                                 * @member {number} min
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.ZoomRange
                                 * @instance
                                 */
                                ZoomRange.prototype.min = 0;

                                /**
                                 * ZoomRange max.
                                 * @member {number} max
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.ZoomRange
                                 * @instance
                                 */
                                ZoomRange.prototype.max = 0;

                                /**
                                 * Decodes a ZoomRange message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.ZoomRange
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {yandex.maps.proto.vectordata2.presentation.Presentation.Class.ZoomRange} ZoomRange
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ZoomRange.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.ZoomRange();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.min = reader.sint32();
                                            break;
                                        case 2:
                                            message.max = reader.sint32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                return ZoomRange;
                            })();

                            Class.Image = (function() {

                                /**
                                 * Properties of an Image.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                                 * @interface IImage
                                 * @property {string|null} [id] Image id
                                 * @property {number|null} [width] Image width
                                 */

                                /**
                                 * Constructs a new Image.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                                 * @classdesc Represents an Image.
                                 * @implements IImage
                                 * @constructor
                                 * @param {yandex.maps.proto.vectordata2.presentation.Presentation.Class.IImage=} [properties] Properties to set
                                 */
                                function Image(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Image id.
                                 * @member {string} id
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.Image
                                 * @instance
                                 */
                                Image.prototype.id = "";

                                /**
                                 * Image width.
                                 * @member {number} width
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.Image
                                 * @instance
                                 */
                                Image.prototype.width = 0;

                                /**
                                 * Decodes an Image message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.Image
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {yandex.maps.proto.vectordata2.presentation.Presentation.Class.Image} Image
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Image.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.Image();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.id = reader.string();
                                            break;
                                        case 2:
                                            message.width = reader.float();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                return Image;
                            })();

                            Class.PointStyle = (function() {

                                /**
                                 * Properties of a PointStyle.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                                 * @interface IPointStyle
                                 * @property {yandex.maps.proto.vectordata2.presentation.Presentation.Class.Image|null} [icon] PointStyle icon
                                 * @property {number|null} [anchorX] PointStyle anchorX
                                 * @property {number|null} [anchorY] PointStyle anchorY
                                 * @property {yandex.maps.proto.vectordata2.presentation.Presentation.Class.Image|null} [selectedIcon] PointStyle selectedIcon
                                 * @property {number|null} [selectedAnchorX] PointStyle selectedAnchorX
                                 * @property {number|null} [selectedAnchorY] PointStyle selectedAnchorY
                                 */

                                /**
                                 * Constructs a new PointStyle.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                                 * @classdesc Represents a PointStyle.
                                 * @implements IPointStyle
                                 * @constructor
                                 * @param {yandex.maps.proto.vectordata2.presentation.Presentation.Class.IPointStyle=} [properties] Properties to set
                                 */
                                function PointStyle(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * PointStyle icon.
                                 * @member {yandex.maps.proto.vectordata2.presentation.Presentation.Class.Image|null|undefined} icon
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.PointStyle
                                 * @instance
                                 */
                                PointStyle.prototype.icon = null;

                                /**
                                 * PointStyle anchorX.
                                 * @member {number} anchorX
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.PointStyle
                                 * @instance
                                 */
                                PointStyle.prototype.anchorX = 0;

                                /**
                                 * PointStyle anchorY.
                                 * @member {number} anchorY
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.PointStyle
                                 * @instance
                                 */
                                PointStyle.prototype.anchorY = 0;

                                /**
                                 * PointStyle selectedIcon.
                                 * @member {yandex.maps.proto.vectordata2.presentation.Presentation.Class.Image|null|undefined} selectedIcon
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.PointStyle
                                 * @instance
                                 */
                                PointStyle.prototype.selectedIcon = null;

                                /**
                                 * PointStyle selectedAnchorX.
                                 * @member {number} selectedAnchorX
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.PointStyle
                                 * @instance
                                 */
                                PointStyle.prototype.selectedAnchorX = 0;

                                /**
                                 * PointStyle selectedAnchorY.
                                 * @member {number} selectedAnchorY
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.PointStyle
                                 * @instance
                                 */
                                PointStyle.prototype.selectedAnchorY = 0;

                                /**
                                 * Decodes a PointStyle message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.PointStyle
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {yandex.maps.proto.vectordata2.presentation.Presentation.Class.PointStyle} PointStyle
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PointStyle.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.PointStyle();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.icon = $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.Image.decode(reader, reader.uint32());
                                            break;
                                        case 2:
                                            message.anchorX = reader.float();
                                            break;
                                        case 3:
                                            message.anchorY = reader.float();
                                            break;
                                        case 4:
                                            message.selectedIcon = $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.Image.decode(reader, reader.uint32());
                                            break;
                                        case 5:
                                            message.selectedAnchorX = reader.float();
                                            break;
                                        case 6:
                                            message.selectedAnchorY = reader.float();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                return PointStyle;
                            })();

                            Class.DashItem = (function() {

                                /**
                                 * Properties of a DashItem.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                                 * @interface IDashItem
                                 * @property {number|null} [fill] DashItem fill
                                 * @property {number|null} [gap] DashItem gap
                                 */

                                /**
                                 * Constructs a new DashItem.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                                 * @classdesc Represents a DashItem.
                                 * @implements IDashItem
                                 * @constructor
                                 * @param {yandex.maps.proto.vectordata2.presentation.Presentation.Class.IDashItem=} [properties] Properties to set
                                 */
                                function DashItem(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * DashItem fill.
                                 * @member {number} fill
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.DashItem
                                 * @instance
                                 */
                                DashItem.prototype.fill = 0;

                                /**
                                 * DashItem gap.
                                 * @member {number} gap
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.DashItem
                                 * @instance
                                 */
                                DashItem.prototype.gap = 0;

                                /**
                                 * Decodes a DashItem message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.DashItem
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {yandex.maps.proto.vectordata2.presentation.Presentation.Class.DashItem} DashItem
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                DashItem.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.DashItem();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.fill = reader.float();
                                            break;
                                        case 2:
                                            message.gap = reader.float();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                return DashItem;
                            })();

                            Class.DashStyle = (function() {

                                /**
                                 * Properties of a DashStyle.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                                 * @interface IDashStyle
                                 * @property {Array.<yandex.maps.proto.vectordata2.presentation.Presentation.Class.DashItem>|null} [dashes] DashStyle dashes
                                 */

                                /**
                                 * Constructs a new DashStyle.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                                 * @classdesc Represents a DashStyle.
                                 * @implements IDashStyle
                                 * @constructor
                                 * @param {yandex.maps.proto.vectordata2.presentation.Presentation.Class.IDashStyle=} [properties] Properties to set
                                 */
                                function DashStyle(properties) {
                                    this.dashes = [];
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * DashStyle dashes.
                                 * @member {Array.<yandex.maps.proto.vectordata2.presentation.Presentation.Class.DashItem>} dashes
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.DashStyle
                                 * @instance
                                 */
                                DashStyle.prototype.dashes = $util.emptyArray;

                                /**
                                 * Decodes a DashStyle message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.DashStyle
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {yandex.maps.proto.vectordata2.presentation.Presentation.Class.DashStyle} DashStyle
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                DashStyle.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.DashStyle();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            if (!(message.dashes && message.dashes.length))
                                                message.dashes = [];
                                            message.dashes.push($root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.DashItem.decode(reader, reader.uint32()));
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                return DashStyle;
                            })();

                            Class.LineStyle = (function() {

                                /**
                                 * Properties of a LineStyle.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                                 * @interface ILineStyle
                                 * @property {number|null} [color] LineStyle color
                                 * @property {number|null} [width] LineStyle width
                                 * @property {yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle.CapStyle|null} [caps] LineStyle caps
                                 * @property {yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle.JoinStyle|null} [joins] LineStyle joins
                                 * @property {yandex.maps.proto.vectordata2.presentation.Presentation.Class.DashStyle|null} [dash] LineStyle dash
                                 * @property {yandex.maps.proto.vectordata2.presentation.Presentation.Class.Image|null} [pattern] LineStyle pattern
                                 */

                                /**
                                 * Constructs a new LineStyle.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                                 * @classdesc Represents a LineStyle.
                                 * @implements ILineStyle
                                 * @constructor
                                 * @param {yandex.maps.proto.vectordata2.presentation.Presentation.Class.ILineStyle=} [properties] Properties to set
                                 */
                                function LineStyle(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * LineStyle color.
                                 * @member {number} color
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle
                                 * @instance
                                 */
                                LineStyle.prototype.color = 0;

                                /**
                                 * LineStyle width.
                                 * @member {number} width
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle
                                 * @instance
                                 */
                                LineStyle.prototype.width = 0;

                                /**
                                 * LineStyle caps.
                                 * @member {yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle.CapStyle} caps
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle
                                 * @instance
                                 */
                                LineStyle.prototype.caps = 0;

                                /**
                                 * LineStyle joins.
                                 * @member {yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle.JoinStyle} joins
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle
                                 * @instance
                                 */
                                LineStyle.prototype.joins = 0;

                                /**
                                 * LineStyle dash.
                                 * @member {yandex.maps.proto.vectordata2.presentation.Presentation.Class.DashStyle|null|undefined} dash
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle
                                 * @instance
                                 */
                                LineStyle.prototype.dash = null;

                                /**
                                 * LineStyle pattern.
                                 * @member {yandex.maps.proto.vectordata2.presentation.Presentation.Class.Image|null|undefined} pattern
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle
                                 * @instance
                                 */
                                LineStyle.prototype.pattern = null;

                                /**
                                 * Decodes a LineStyle message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle} LineStyle
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LineStyle.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.color = reader.fixed32();
                                            break;
                                        case 2:
                                            message.width = reader.float();
                                            break;
                                        case 3:
                                            message.caps = reader.int32();
                                            break;
                                        case 4:
                                            message.joins = reader.int32();
                                            break;
                                        case 5:
                                            message.dash = $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.DashStyle.decode(reader, reader.uint32());
                                            break;
                                        case 6:
                                            message.pattern = $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.Image.decode(reader, reader.uint32());
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                /**
                                 * CapStyle enum.
                                 * @name yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle.CapStyle
                                 * @enum {string}
                                 * @property {number} CapRound=0 CapRound value
                                 * @property {number} CapBevel=1 CapBevel value
                                 * @property {number} CapSquare=2 CapSquare value
                                 */
                                LineStyle.CapStyle = (function() {
                                    var valuesById = {}, values = Object.create(valuesById);
                                    values[valuesById[0] = "CapRound"] = 0;
                                    values[valuesById[1] = "CapBevel"] = 1;
                                    values[valuesById[2] = "CapSquare"] = 2;
                                    return values;
                                })();

                                /**
                                 * JoinStyle enum.
                                 * @name yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle.JoinStyle
                                 * @enum {string}
                                 * @property {number} JoinMiter=0 JoinMiter value
                                 * @property {number} JoinRound=1 JoinRound value
                                 * @property {number} JoinBevel=2 JoinBevel value
                                 */
                                LineStyle.JoinStyle = (function() {
                                    var valuesById = {}, values = Object.create(valuesById);
                                    values[valuesById[0] = "JoinMiter"] = 0;
                                    values[valuesById[1] = "JoinRound"] = 1;
                                    values[valuesById[2] = "JoinBevel"] = 2;
                                    return values;
                                })();

                                return LineStyle;
                            })();

                            Class.PolylineStyle = (function() {

                                /**
                                 * Properties of a PolylineStyle.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                                 * @interface IPolylineStyle
                                 * @property {yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle|null} [line] PolylineStyle line
                                 * @property {yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle|null} [outline] PolylineStyle outline
                                 */

                                /**
                                 * Constructs a new PolylineStyle.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                                 * @classdesc Represents a PolylineStyle.
                                 * @implements IPolylineStyle
                                 * @constructor
                                 * @param {yandex.maps.proto.vectordata2.presentation.Presentation.Class.IPolylineStyle=} [properties] Properties to set
                                 */
                                function PolylineStyle(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * PolylineStyle line.
                                 * @member {yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle|null|undefined} line
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolylineStyle
                                 * @instance
                                 */
                                PolylineStyle.prototype.line = null;

                                /**
                                 * PolylineStyle outline.
                                 * @member {yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle|null|undefined} outline
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolylineStyle
                                 * @instance
                                 */
                                PolylineStyle.prototype.outline = null;

                                /**
                                 * Decodes a PolylineStyle message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolylineStyle
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolylineStyle} PolylineStyle
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PolylineStyle.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolylineStyle();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.line = $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle.decode(reader, reader.uint32());
                                            break;
                                        case 2:
                                            message.outline = $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle.decode(reader, reader.uint32());
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                return PolylineStyle;
                            })();

                            Class.PolygonStyle = (function() {

                                /**
                                 * Properties of a PolygonStyle.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                                 * @interface IPolygonStyle
                                 * @property {yandex.maps.proto.vectordata2.presentation.Presentation.Class.Image|null} [pattern] PolygonStyle pattern
                                 * @property {number|null} [color] PolygonStyle color
                                 * @property {yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolygonStyle.Extrusion|null} [extrusion] PolygonStyle extrusion
                                 * @property {yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle|null} [contour] PolygonStyle contour
                                 */

                                /**
                                 * Constructs a new PolygonStyle.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                                 * @classdesc Represents a PolygonStyle.
                                 * @implements IPolygonStyle
                                 * @constructor
                                 * @param {yandex.maps.proto.vectordata2.presentation.Presentation.Class.IPolygonStyle=} [properties] Properties to set
                                 */
                                function PolygonStyle(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * PolygonStyle pattern.
                                 * @member {yandex.maps.proto.vectordata2.presentation.Presentation.Class.Image|null|undefined} pattern
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolygonStyle
                                 * @instance
                                 */
                                PolygonStyle.prototype.pattern = null;

                                /**
                                 * PolygonStyle color.
                                 * @member {number} color
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolygonStyle
                                 * @instance
                                 */
                                PolygonStyle.prototype.color = 0;

                                /**
                                 * PolygonStyle extrusion.
                                 * @member {yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolygonStyle.Extrusion|null|undefined} extrusion
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolygonStyle
                                 * @instance
                                 */
                                PolygonStyle.prototype.extrusion = null;

                                /**
                                 * PolygonStyle contour.
                                 * @member {yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle|null|undefined} contour
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolygonStyle
                                 * @instance
                                 */
                                PolygonStyle.prototype.contour = null;

                                /**
                                 * Decodes a PolygonStyle message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolygonStyle
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolygonStyle} PolygonStyle
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                PolygonStyle.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolygonStyle();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.pattern = $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.Image.decode(reader, reader.uint32());
                                            break;
                                        case 2:
                                            message.color = reader.fixed32();
                                            break;
                                        case 3:
                                            message.extrusion = $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolygonStyle.Extrusion.decode(reader, reader.uint32());
                                            break;
                                        case 4:
                                            message.contour = $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle.decode(reader, reader.uint32());
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                PolygonStyle.Extrusion = (function() {

                                    /**
                                     * Properties of an Extrusion.
                                     * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolygonStyle
                                     * @interface IExtrusion
                                     * @property {boolean|null} [enabled] Extrusion enabled
                                     * @property {number|null} [height] Extrusion height
                                     */

                                    /**
                                     * Constructs a new Extrusion.
                                     * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolygonStyle
                                     * @classdesc Represents an Extrusion.
                                     * @implements IExtrusion
                                     * @constructor
                                     * @param {yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolygonStyle.IExtrusion=} [properties] Properties to set
                                     */
                                    function Extrusion(properties) {
                                        if (properties)
                                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                                if (properties[keys[i]] != null)
                                                    this[keys[i]] = properties[keys[i]];
                                    }

                                    /**
                                     * Extrusion enabled.
                                     * @member {boolean} enabled
                                     * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolygonStyle.Extrusion
                                     * @instance
                                     */
                                    Extrusion.prototype.enabled = false;

                                    /**
                                     * Extrusion height.
                                     * @member {number} height
                                     * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolygonStyle.Extrusion
                                     * @instance
                                     */
                                    Extrusion.prototype.height = 0;

                                    /**
                                     * Decodes an Extrusion message from the specified reader or buffer.
                                     * @function decode
                                     * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolygonStyle.Extrusion
                                     * @static
                                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                     * @param {number} [length] Message length if known beforehand
                                     * @returns {yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolygonStyle.Extrusion} Extrusion
                                     * @throws {Error} If the payload is not a reader or valid buffer
                                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                     */
                                    Extrusion.decode = function decode(reader, length) {
                                        if (!(reader instanceof $Reader))
                                            reader = $Reader.create(reader);
                                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolygonStyle.Extrusion();
                                        while (reader.pos < end) {
                                            var tag = reader.uint32();
                                            switch (tag >>> 3) {
                                            case 1:
                                                message.enabled = reader.bool();
                                                break;
                                            case 3:
                                                message.height = reader.float();
                                                break;
                                            default:
                                                reader.skipType(tag & 7);
                                                break;
                                            }
                                        }
                                        return message;
                                    };

                                    return Extrusion;
                                })();

                                return PolygonStyle;
                            })();

                            Class.TextStyle = (function() {

                                /**
                                 * Properties of a TextStyle.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                                 * @interface ITextStyle
                                 * @property {number|null} [color] TextStyle color
                                 * @property {string|null} [fontId] TextStyle fontId
                                 * @property {number|null} [fontSize] TextStyle fontSize
                                 * @property {number|null} [outlineColor] TextStyle outlineColor
                                 */

                                /**
                                 * Constructs a new TextStyle.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                                 * @classdesc Represents a TextStyle.
                                 * @implements ITextStyle
                                 * @constructor
                                 * @param {yandex.maps.proto.vectordata2.presentation.Presentation.Class.ITextStyle=} [properties] Properties to set
                                 */
                                function TextStyle(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * TextStyle color.
                                 * @member {number} color
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.TextStyle
                                 * @instance
                                 */
                                TextStyle.prototype.color = 0;

                                /**
                                 * TextStyle fontId.
                                 * @member {string} fontId
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.TextStyle
                                 * @instance
                                 */
                                TextStyle.prototype.fontId = "";

                                /**
                                 * TextStyle fontSize.
                                 * @member {number} fontSize
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.TextStyle
                                 * @instance
                                 */
                                TextStyle.prototype.fontSize = 0;

                                /**
                                 * TextStyle outlineColor.
                                 * @member {number} outlineColor
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.TextStyle
                                 * @instance
                                 */
                                TextStyle.prototype.outlineColor = 0;

                                /**
                                 * Decodes a TextStyle message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.TextStyle
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {yandex.maps.proto.vectordata2.presentation.Presentation.Class.TextStyle} TextStyle
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                TextStyle.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.TextStyle();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.color = reader.fixed32();
                                            break;
                                        case 2:
                                            message.fontId = reader.string();
                                            break;
                                        case 3:
                                            message.fontSize = reader.float();
                                            break;
                                        case 4:
                                            message.outlineColor = reader.fixed32();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                return TextStyle;
                            })();

                            Class.LabelStyle = (function() {

                                /**
                                 * Properties of a LabelStyle.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                                 * @interface ILabelStyle
                                 * @property {yandex.maps.proto.vectordata2.presentation.Presentation.Class.TextStyle|null} [text] LabelStyle text
                                 * @property {yandex.maps.proto.vectordata2.presentation.Presentation.Class.TextStyle|null} [textAlt] LabelStyle textAlt
                                 * @property {number|null} [hdistance] LabelStyle hdistance
                                 * @property {number|null} [vdistance] LabelStyle vdistance
                                 * @property {yandex.maps.proto.vectordata2.presentation.Presentation.Class.LabelBackgroundStyle|null} [background] LabelStyle background
                                 */

                                /**
                                 * Constructs a new LabelStyle.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                                 * @classdesc Represents a LabelStyle.
                                 * @implements ILabelStyle
                                 * @constructor
                                 * @param {yandex.maps.proto.vectordata2.presentation.Presentation.Class.ILabelStyle=} [properties] Properties to set
                                 */
                                function LabelStyle(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * LabelStyle text.
                                 * @member {yandex.maps.proto.vectordata2.presentation.Presentation.Class.TextStyle|null|undefined} text
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.LabelStyle
                                 * @instance
                                 */
                                LabelStyle.prototype.text = null;

                                /**
                                 * LabelStyle textAlt.
                                 * @member {yandex.maps.proto.vectordata2.presentation.Presentation.Class.TextStyle|null|undefined} textAlt
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.LabelStyle
                                 * @instance
                                 */
                                LabelStyle.prototype.textAlt = null;

                                /**
                                 * LabelStyle hdistance.
                                 * @member {number} hdistance
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.LabelStyle
                                 * @instance
                                 */
                                LabelStyle.prototype.hdistance = 0;

                                /**
                                 * LabelStyle vdistance.
                                 * @member {number} vdistance
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.LabelStyle
                                 * @instance
                                 */
                                LabelStyle.prototype.vdistance = 0;

                                /**
                                 * LabelStyle background.
                                 * @member {yandex.maps.proto.vectordata2.presentation.Presentation.Class.LabelBackgroundStyle|null|undefined} background
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.LabelStyle
                                 * @instance
                                 */
                                LabelStyle.prototype.background = null;

                                /**
                                 * Decodes a LabelStyle message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.LabelStyle
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {yandex.maps.proto.vectordata2.presentation.Presentation.Class.LabelStyle} LabelStyle
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LabelStyle.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.LabelStyle();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.text = $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.TextStyle.decode(reader, reader.uint32());
                                            break;
                                        case 2:
                                            message.textAlt = $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.TextStyle.decode(reader, reader.uint32());
                                            break;
                                        case 3:
                                            message.hdistance = reader.float();
                                            break;
                                        case 4:
                                            message.vdistance = reader.float();
                                            break;
                                        case 5:
                                            message.background = $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.LabelBackgroundStyle.decode(reader, reader.uint32());
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                return LabelStyle;
                            })();

                            Class.LabelBackgroundStyle = (function() {

                                /**
                                 * Properties of a LabelBackgroundStyle.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                                 * @interface ILabelBackgroundStyle
                                 * @property {number|null} [hPadding] LabelBackgroundStyle hPadding
                                 * @property {number|null} [vPadding] LabelBackgroundStyle vPadding
                                 * @property {number|null} [color] LabelBackgroundStyle color
                                 * @property {yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle|null} [outline] LabelBackgroundStyle outline
                                 */

                                /**
                                 * Constructs a new LabelBackgroundStyle.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                                 * @classdesc Represents a LabelBackgroundStyle.
                                 * @implements ILabelBackgroundStyle
                                 * @constructor
                                 * @param {yandex.maps.proto.vectordata2.presentation.Presentation.Class.ILabelBackgroundStyle=} [properties] Properties to set
                                 */
                                function LabelBackgroundStyle(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * LabelBackgroundStyle hPadding.
                                 * @member {number} hPadding
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.LabelBackgroundStyle
                                 * @instance
                                 */
                                LabelBackgroundStyle.prototype.hPadding = 0;

                                /**
                                 * LabelBackgroundStyle vPadding.
                                 * @member {number} vPadding
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.LabelBackgroundStyle
                                 * @instance
                                 */
                                LabelBackgroundStyle.prototype.vPadding = 0;

                                /**
                                 * LabelBackgroundStyle color.
                                 * @member {number} color
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.LabelBackgroundStyle
                                 * @instance
                                 */
                                LabelBackgroundStyle.prototype.color = 0;

                                /**
                                 * LabelBackgroundStyle outline.
                                 * @member {yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle|null|undefined} outline
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.LabelBackgroundStyle
                                 * @instance
                                 */
                                LabelBackgroundStyle.prototype.outline = null;

                                /**
                                 * Decodes a LabelBackgroundStyle message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.LabelBackgroundStyle
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {yandex.maps.proto.vectordata2.presentation.Presentation.Class.LabelBackgroundStyle} LabelBackgroundStyle
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                LabelBackgroundStyle.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.LabelBackgroundStyle();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.hPadding = reader.float();
                                            break;
                                        case 2:
                                            message.vPadding = reader.float();
                                            break;
                                        case 3:
                                            message.color = reader.fixed32();
                                            break;
                                        case 4:
                                            message.outline = $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.LineStyle.decode(reader, reader.uint32());
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                return LabelBackgroundStyle;
                            })();

                            Class.ZoomSlice = (function() {

                                /**
                                 * Properties of a ZoomSlice.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                                 * @interface IZoomSlice
                                 * @property {number|null} [zIndex] ZoomSlice zIndex
                                 * @property {yandex.maps.proto.vectordata2.presentation.Presentation.Class.ZoomRange|null} [visibility] ZoomSlice visibility
                                 * @property {yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolylineStyle|null} [line] ZoomSlice line
                                 * @property {yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolygonStyle|null} [poly] ZoomSlice poly
                                 * @property {yandex.maps.proto.vectordata2.presentation.Presentation.Class.PointStyle|null} [point] ZoomSlice point
                                 * @property {yandex.maps.proto.vectordata2.presentation.Presentation.Class.LabelStyle|null} [label] ZoomSlice label
                                 */

                                /**
                                 * Constructs a new ZoomSlice.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class
                                 * @classdesc Represents a ZoomSlice.
                                 * @implements IZoomSlice
                                 * @constructor
                                 * @param {yandex.maps.proto.vectordata2.presentation.Presentation.Class.IZoomSlice=} [properties] Properties to set
                                 */
                                function ZoomSlice(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * ZoomSlice zIndex.
                                 * @member {number} zIndex
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.ZoomSlice
                                 * @instance
                                 */
                                ZoomSlice.prototype.zIndex = 0;

                                /**
                                 * ZoomSlice visibility.
                                 * @member {yandex.maps.proto.vectordata2.presentation.Presentation.Class.ZoomRange|null|undefined} visibility
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.ZoomSlice
                                 * @instance
                                 */
                                ZoomSlice.prototype.visibility = null;

                                /**
                                 * ZoomSlice line.
                                 * @member {yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolylineStyle|null|undefined} line
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.ZoomSlice
                                 * @instance
                                 */
                                ZoomSlice.prototype.line = null;

                                /**
                                 * ZoomSlice poly.
                                 * @member {yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolygonStyle|null|undefined} poly
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.ZoomSlice
                                 * @instance
                                 */
                                ZoomSlice.prototype.poly = null;

                                /**
                                 * ZoomSlice point.
                                 * @member {yandex.maps.proto.vectordata2.presentation.Presentation.Class.PointStyle|null|undefined} point
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.ZoomSlice
                                 * @instance
                                 */
                                ZoomSlice.prototype.point = null;

                                /**
                                 * ZoomSlice label.
                                 * @member {yandex.maps.proto.vectordata2.presentation.Presentation.Class.LabelStyle|null|undefined} label
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.ZoomSlice
                                 * @instance
                                 */
                                ZoomSlice.prototype.label = null;

                                /**
                                 * Decodes a ZoomSlice message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Class.ZoomSlice
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {yandex.maps.proto.vectordata2.presentation.Presentation.Class.ZoomSlice} ZoomSlice
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                ZoomSlice.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.ZoomSlice();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.zIndex = reader.sint32();
                                            break;
                                        case 2:
                                            message.visibility = $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.ZoomRange.decode(reader, reader.uint32());
                                            break;
                                        case 3:
                                            message.line = $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolylineStyle.decode(reader, reader.uint32());
                                            break;
                                        case 4:
                                            message.poly = $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.PolygonStyle.decode(reader, reader.uint32());
                                            break;
                                        case 5:
                                            message.point = $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.PointStyle.decode(reader, reader.uint32());
                                            break;
                                        case 6:
                                            message.label = $root.yandex.maps.proto.vectordata2.presentation.Presentation.Class.LabelStyle.decode(reader, reader.uint32());
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                return ZoomSlice;
                            })();

                            return Class;
                        })();

                        Presentation.Parameters = (function() {

                            /**
                             * Properties of a Parameters.
                             * @memberof yandex.maps.proto.vectordata2.presentation.Presentation
                             * @interface IParameters
                             * @property {yandex.maps.proto.vectordata2.presentation.Presentation.Parameters.Extrusion|null} [extrusion] Parameters extrusion
                             */

                            /**
                             * Constructs a new Parameters.
                             * @memberof yandex.maps.proto.vectordata2.presentation.Presentation
                             * @classdesc Represents a Parameters.
                             * @implements IParameters
                             * @constructor
                             * @param {yandex.maps.proto.vectordata2.presentation.Presentation.IParameters=} [properties] Properties to set
                             */
                            function Parameters(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }

                            /**
                             * Parameters extrusion.
                             * @member {yandex.maps.proto.vectordata2.presentation.Presentation.Parameters.Extrusion|null|undefined} extrusion
                             * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Parameters
                             * @instance
                             */
                            Parameters.prototype.extrusion = null;

                            /**
                             * Decodes a Parameters message from the specified reader or buffer.
                             * @function decode
                             * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Parameters
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {yandex.maps.proto.vectordata2.presentation.Presentation.Parameters} Parameters
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Parameters.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.presentation.Presentation.Parameters();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1:
                                        message.extrusion = $root.yandex.maps.proto.vectordata2.presentation.Presentation.Parameters.Extrusion.decode(reader, reader.uint32());
                                        break;
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };

                            Parameters.Extrusion = (function() {

                                /**
                                 * Properties of an Extrusion.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Parameters
                                 * @interface IExtrusion
                                 * @property {number|null} [adjustMeshHeightK] Extrusion adjustMeshHeightK
                                 * @property {number|null} [adjustMeshHeightPow] Extrusion adjustMeshHeightPow
                                 * @property {number|null} [adjustBoxHeightK] Extrusion adjustBoxHeightK
                                 * @property {number|null} [adjustBoxHeightPow] Extrusion adjustBoxHeightPow
                                 */

                                /**
                                 * Constructs a new Extrusion.
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Parameters
                                 * @classdesc Represents an Extrusion.
                                 * @implements IExtrusion
                                 * @constructor
                                 * @param {yandex.maps.proto.vectordata2.presentation.Presentation.Parameters.IExtrusion=} [properties] Properties to set
                                 */
                                function Extrusion(properties) {
                                    if (properties)
                                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                            if (properties[keys[i]] != null)
                                                this[keys[i]] = properties[keys[i]];
                                }

                                /**
                                 * Extrusion adjustMeshHeightK.
                                 * @member {number} adjustMeshHeightK
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Parameters.Extrusion
                                 * @instance
                                 */
                                Extrusion.prototype.adjustMeshHeightK = 0;

                                /**
                                 * Extrusion adjustMeshHeightPow.
                                 * @member {number} adjustMeshHeightPow
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Parameters.Extrusion
                                 * @instance
                                 */
                                Extrusion.prototype.adjustMeshHeightPow = 0;

                                /**
                                 * Extrusion adjustBoxHeightK.
                                 * @member {number} adjustBoxHeightK
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Parameters.Extrusion
                                 * @instance
                                 */
                                Extrusion.prototype.adjustBoxHeightK = 0;

                                /**
                                 * Extrusion adjustBoxHeightPow.
                                 * @member {number} adjustBoxHeightPow
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Parameters.Extrusion
                                 * @instance
                                 */
                                Extrusion.prototype.adjustBoxHeightPow = 0;

                                /**
                                 * Decodes an Extrusion message from the specified reader or buffer.
                                 * @function decode
                                 * @memberof yandex.maps.proto.vectordata2.presentation.Presentation.Parameters.Extrusion
                                 * @static
                                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                                 * @param {number} [length] Message length if known beforehand
                                 * @returns {yandex.maps.proto.vectordata2.presentation.Presentation.Parameters.Extrusion} Extrusion
                                 * @throws {Error} If the payload is not a reader or valid buffer
                                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                                 */
                                Extrusion.decode = function decode(reader, length) {
                                    if (!(reader instanceof $Reader))
                                        reader = $Reader.create(reader);
                                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.presentation.Presentation.Parameters.Extrusion();
                                    while (reader.pos < end) {
                                        var tag = reader.uint32();
                                        switch (tag >>> 3) {
                                        case 1:
                                            message.adjustMeshHeightK = reader.float();
                                            break;
                                        case 2:
                                            message.adjustMeshHeightPow = reader.float();
                                            break;
                                        case 3:
                                            message.adjustBoxHeightK = reader.float();
                                            break;
                                        case 4:
                                            message.adjustBoxHeightPow = reader.float();
                                            break;
                                        default:
                                            reader.skipType(tag & 7);
                                            break;
                                        }
                                    }
                                    return message;
                                };

                                return Extrusion;
                            })();

                            return Parameters;
                        })();

                        return Presentation;
                    })();

                    return presentation;
                })();

                vectordata2.glyphs = (function() {

                    /**
                     * Namespace glyphs.
                     * @memberof yandex.maps.proto.vectordata2
                     * @namespace
                     */
                    var glyphs = {};

                    glyphs.Glyph = (function() {

                        /**
                         * Properties of a Glyph.
                         * @memberof yandex.maps.proto.vectordata2.glyphs
                         * @interface IGlyph
                         * @property {number} id Glyph id
                         * @property {Uint8Array} bitmap Glyph bitmap
                         * @property {number} width Glyph width
                         * @property {number} height Glyph height
                         * @property {number} bearingX Glyph bearingX
                         * @property {number} bearingY Glyph bearingY
                         * @property {number} advance Glyph advance
                         */

                        /**
                         * Constructs a new Glyph.
                         * @memberof yandex.maps.proto.vectordata2.glyphs
                         * @classdesc Represents a Glyph.
                         * @implements IGlyph
                         * @constructor
                         * @param {yandex.maps.proto.vectordata2.glyphs.IGlyph=} [properties] Properties to set
                         */
                        function Glyph(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Glyph id.
                         * @member {number} id
                         * @memberof yandex.maps.proto.vectordata2.glyphs.Glyph
                         * @instance
                         */
                        Glyph.prototype.id = 0;

                        /**
                         * Glyph bitmap.
                         * @member {Uint8Array} bitmap
                         * @memberof yandex.maps.proto.vectordata2.glyphs.Glyph
                         * @instance
                         */
                        Glyph.prototype.bitmap = $util.newBuffer([]);

                        /**
                         * Glyph width.
                         * @member {number} width
                         * @memberof yandex.maps.proto.vectordata2.glyphs.Glyph
                         * @instance
                         */
                        Glyph.prototype.width = 0;

                        /**
                         * Glyph height.
                         * @member {number} height
                         * @memberof yandex.maps.proto.vectordata2.glyphs.Glyph
                         * @instance
                         */
                        Glyph.prototype.height = 0;

                        /**
                         * Glyph bearingX.
                         * @member {number} bearingX
                         * @memberof yandex.maps.proto.vectordata2.glyphs.Glyph
                         * @instance
                         */
                        Glyph.prototype.bearingX = 0;

                        /**
                         * Glyph bearingY.
                         * @member {number} bearingY
                         * @memberof yandex.maps.proto.vectordata2.glyphs.Glyph
                         * @instance
                         */
                        Glyph.prototype.bearingY = 0;

                        /**
                         * Glyph advance.
                         * @member {number} advance
                         * @memberof yandex.maps.proto.vectordata2.glyphs.Glyph
                         * @instance
                         */
                        Glyph.prototype.advance = 0;

                        /**
                         * Decodes a Glyph message from the specified reader or buffer.
                         * @function decode
                         * @memberof yandex.maps.proto.vectordata2.glyphs.Glyph
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {yandex.maps.proto.vectordata2.glyphs.Glyph} Glyph
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Glyph.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.glyphs.Glyph();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.id = reader.uint32();
                                    break;
                                case 2:
                                    message.bitmap = reader.bytes();
                                    break;
                                case 3:
                                    message.width = reader.uint32();
                                    break;
                                case 4:
                                    message.height = reader.uint32();
                                    break;
                                case 5:
                                    message.bearingX = reader.sint32();
                                    break;
                                case 6:
                                    message.bearingY = reader.sint32();
                                    break;
                                case 7:
                                    message.advance = reader.uint32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            if (!message.hasOwnProperty("id"))
                                throw $util.ProtocolError("missing required 'id'", { instance: message });
                            if (!message.hasOwnProperty("bitmap"))
                                throw $util.ProtocolError("missing required 'bitmap'", { instance: message });
                            if (!message.hasOwnProperty("width"))
                                throw $util.ProtocolError("missing required 'width'", { instance: message });
                            if (!message.hasOwnProperty("height"))
                                throw $util.ProtocolError("missing required 'height'", { instance: message });
                            if (!message.hasOwnProperty("bearingX"))
                                throw $util.ProtocolError("missing required 'bearingX'", { instance: message });
                            if (!message.hasOwnProperty("bearingY"))
                                throw $util.ProtocolError("missing required 'bearingY'", { instance: message });
                            if (!message.hasOwnProperty("advance"))
                                throw $util.ProtocolError("missing required 'advance'", { instance: message });
                            return message;
                        };

                        return Glyph;
                    })();

                    glyphs.FontDescription = (function() {

                        /**
                         * Properties of a FontDescription.
                         * @memberof yandex.maps.proto.vectordata2.glyphs
                         * @interface IFontDescription
                         * @property {string} fontId FontDescription fontId
                         * @property {number} xheight FontDescription xheight
                         * @property {number} margin FontDescription margin
                         */

                        /**
                         * Constructs a new FontDescription.
                         * @memberof yandex.maps.proto.vectordata2.glyphs
                         * @classdesc Represents a FontDescription.
                         * @implements IFontDescription
                         * @constructor
                         * @param {yandex.maps.proto.vectordata2.glyphs.IFontDescription=} [properties] Properties to set
                         */
                        function FontDescription(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * FontDescription fontId.
                         * @member {string} fontId
                         * @memberof yandex.maps.proto.vectordata2.glyphs.FontDescription
                         * @instance
                         */
                        FontDescription.prototype.fontId = "";

                        /**
                         * FontDescription xheight.
                         * @member {number} xheight
                         * @memberof yandex.maps.proto.vectordata2.glyphs.FontDescription
                         * @instance
                         */
                        FontDescription.prototype.xheight = 0;

                        /**
                         * FontDescription margin.
                         * @member {number} margin
                         * @memberof yandex.maps.proto.vectordata2.glyphs.FontDescription
                         * @instance
                         */
                        FontDescription.prototype.margin = 3;

                        /**
                         * Decodes a FontDescription message from the specified reader or buffer.
                         * @function decode
                         * @memberof yandex.maps.proto.vectordata2.glyphs.FontDescription
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {yandex.maps.proto.vectordata2.glyphs.FontDescription} FontDescription
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FontDescription.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.glyphs.FontDescription();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.fontId = reader.string();
                                    break;
                                case 2:
                                    message.xheight = reader.uint32();
                                    break;
                                case 3:
                                    message.margin = reader.sint32();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            if (!message.hasOwnProperty("fontId"))
                                throw $util.ProtocolError("missing required 'fontId'", { instance: message });
                            if (!message.hasOwnProperty("xheight"))
                                throw $util.ProtocolError("missing required 'xheight'", { instance: message });
                            if (!message.hasOwnProperty("margin"))
                                throw $util.ProtocolError("missing required 'margin'", { instance: message });
                            return message;
                        };

                        return FontDescription;
                    })();

                    glyphs.GlyphList = (function() {

                        /**
                         * Properties of a GlyphList.
                         * @memberof yandex.maps.proto.vectordata2.glyphs
                         * @interface IGlyphList
                         * @property {yandex.maps.proto.vectordata2.glyphs.FontDescription} font GlyphList font
                         * @property {Array.<yandex.maps.proto.vectordata2.glyphs.Glyph>|null} [glyphs] GlyphList glyphs
                         */

                        /**
                         * Constructs a new GlyphList.
                         * @memberof yandex.maps.proto.vectordata2.glyphs
                         * @classdesc Represents a GlyphList.
                         * @implements IGlyphList
                         * @constructor
                         * @param {yandex.maps.proto.vectordata2.glyphs.IGlyphList=} [properties] Properties to set
                         */
                        function GlyphList(properties) {
                            this.glyphs = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * GlyphList font.
                         * @member {yandex.maps.proto.vectordata2.glyphs.FontDescription} font
                         * @memberof yandex.maps.proto.vectordata2.glyphs.GlyphList
                         * @instance
                         */
                        GlyphList.prototype.font = null;

                        /**
                         * GlyphList glyphs.
                         * @member {Array.<yandex.maps.proto.vectordata2.glyphs.Glyph>} glyphs
                         * @memberof yandex.maps.proto.vectordata2.glyphs.GlyphList
                         * @instance
                         */
                        GlyphList.prototype.glyphs = $util.emptyArray;

                        /**
                         * Decodes a GlyphList message from the specified reader or buffer.
                         * @function decode
                         * @memberof yandex.maps.proto.vectordata2.glyphs.GlyphList
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {yandex.maps.proto.vectordata2.glyphs.GlyphList} GlyphList
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GlyphList.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.yandex.maps.proto.vectordata2.glyphs.GlyphList();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.font = $root.yandex.maps.proto.vectordata2.glyphs.FontDescription.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    if (!(message.glyphs && message.glyphs.length))
                                        message.glyphs = [];
                                    message.glyphs.push($root.yandex.maps.proto.vectordata2.glyphs.Glyph.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            if (!message.hasOwnProperty("font"))
                                throw $util.ProtocolError("missing required 'font'", { instance: message });
                            return message;
                        };

                        return GlyphList;
                    })();

                    return glyphs;
                })();

                return vectordata2;
            })();

            return proto;
        })();

        return maps;
    })();

    return yandex;
})();

module.exports = $root;


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// minimal library entry point.


module.exports = __webpack_require__(17);


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var protobuf = exports;

/**
 * Build type, one of `"full"`, `"light"` or `"minimal"`.
 * @name build
 * @type {string}
 * @const
 */
protobuf.build = "minimal";

// Serialization
protobuf.Writer       = __webpack_require__(18);
protobuf.BufferWriter = __webpack_require__(29);
protobuf.Reader       = __webpack_require__(30);
protobuf.BufferReader = __webpack_require__(31);

// Utility
protobuf.util         = __webpack_require__(19);
protobuf.rpc          = __webpack_require__(32);
protobuf.roots        = __webpack_require__(34);
protobuf.configure    = configure;

/* istanbul ignore next */
/**
 * Reconfigures the library according to the environment.
 * @returns {undefined}
 */
function configure() {
    protobuf.Reader._configure(protobuf.BufferReader);
    protobuf.util._configure();
}

// Set up buffer utility according to the environment
protobuf.Writer._configure(protobuf.BufferWriter);
configure();


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = Writer;

var util      = __webpack_require__(19);

var BufferWriter; // cyclic

var LongBits  = util.LongBits,
    base64    = util.base64,
    utf8      = util.utf8;

/**
 * Constructs a new writer operation instance.
 * @classdesc Scheduled writer operation.
 * @constructor
 * @param {function(*, Uint8Array, number)} fn Function to call
 * @param {number} len Value byte length
 * @param {*} val Value to write
 * @ignore
 */
function Op(fn, len, val) {

    /**
     * Function to call.
     * @type {function(Uint8Array, number, *)}
     */
    this.fn = fn;

    /**
     * Value byte length.
     * @type {number}
     */
    this.len = len;

    /**
     * Next operation.
     * @type {Writer.Op|undefined}
     */
    this.next = undefined;

    /**
     * Value to write.
     * @type {*}
     */
    this.val = val; // type varies
}

/* istanbul ignore next */
function noop() {} // eslint-disable-line no-empty-function

/**
 * Constructs a new writer state instance.
 * @classdesc Copied writer state.
 * @memberof Writer
 * @constructor
 * @param {Writer} writer Writer to copy state from
 * @ignore
 */
function State(writer) {

    /**
     * Current head.
     * @type {Writer.Op}
     */
    this.head = writer.head;

    /**
     * Current tail.
     * @type {Writer.Op}
     */
    this.tail = writer.tail;

    /**
     * Current buffer length.
     * @type {number}
     */
    this.len = writer.len;

    /**
     * Next state.
     * @type {State|null}
     */
    this.next = writer.states;
}

/**
 * Constructs a new writer instance.
 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 */
function Writer() {

    /**
     * Current length.
     * @type {number}
     */
    this.len = 0;

    /**
     * Operations head.
     * @type {Object}
     */
    this.head = new Op(noop, 0, 0);

    /**
     * Operations tail
     * @type {Object}
     */
    this.tail = this.head;

    /**
     * Linked forked states.
     * @type {Object|null}
     */
    this.states = null;

    // When a value is written, the writer calculates its byte length and puts it into a linked
    // list of operations to perform when finish() is called. This both allows us to allocate
    // buffers of the exact required size and reduces the amount of work we have to do compared
    // to first calculating over objects and then encoding over objects. In our case, the encoding
    // part is just a linked list walk calling operations with already prepared values.
}

/**
 * Creates a new writer.
 * @function
 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
 */
Writer.create = util.Buffer
    ? function create_buffer_setup() {
        return (Writer.create = function create_buffer() {
            return new BufferWriter();
        })();
    }
    /* istanbul ignore next */
    : function create_array() {
        return new Writer();
    };

/**
 * Allocates a buffer of the specified size.
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */
Writer.alloc = function alloc(size) {
    return new util.Array(size);
};

// Use Uint8Array buffer pool in the browser, just like node does with buffers
/* istanbul ignore else */
if (util.Array !== Array)
    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);

/**
 * Pushes a new operation to the queue.
 * @param {function(Uint8Array, number, *)} fn Function to call
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @returns {Writer} `this`
 * @private
 */
Writer.prototype._push = function push(fn, len, val) {
    this.tail = this.tail.next = new Op(fn, len, val);
    this.len += len;
    return this;
};

function writeByte(val, buf, pos) {
    buf[pos] = val & 255;
}

function writeVarint32(val, buf, pos) {
    while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
    }
    buf[pos] = val;
}

/**
 * Constructs a new varint writer operation instance.
 * @classdesc Scheduled varint writer operation.
 * @extends Op
 * @constructor
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @ignore
 */
function VarintOp(len, val) {
    this.len = len;
    this.next = undefined;
    this.val = val;
}

VarintOp.prototype = Object.create(Op.prototype);
VarintOp.prototype.fn = writeVarint32;

/**
 * Writes an unsigned 32 bit value as a varint.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.uint32 = function write_uint32(value) {
    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
    // uint32 is by far the most frequently used operation and benefits significantly from this.
    this.len += (this.tail = this.tail.next = new VarintOp(
        (value = value >>> 0)
                < 128       ? 1
        : value < 16384     ? 2
        : value < 2097152   ? 3
        : value < 268435456 ? 4
        :                     5,
    value)).len;
    return this;
};

/**
 * Writes a signed 32 bit value as a varint.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.int32 = function write_int32(value) {
    return value < 0
        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec
        : this.uint32(value);
};

/**
 * Writes a 32 bit value as a varint, zig-zag encoded.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sint32 = function write_sint32(value) {
    return this.uint32((value << 1 ^ value >> 31) >>> 0);
};

function writeVarint64(val, buf, pos) {
    while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
    }
    while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
    }
    buf[pos++] = val.lo;
}

/**
 * Writes an unsigned 64 bit value as a varint.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.uint64 = function write_uint64(value) {
    var bits = LongBits.from(value);
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a signed 64 bit value as a varint.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.int64 = Writer.prototype.uint64;

/**
 * Writes a signed 64 bit value as a varint, zig-zag encoded.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sint64 = function write_sint64(value) {
    var bits = LongBits.from(value).zzEncode();
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a boolish value as a varint.
 * @param {boolean} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.bool = function write_bool(value) {
    return this._push(writeByte, 1, value ? 1 : 0);
};

function writeFixed32(val, buf, pos) {
    buf[pos    ] =  val         & 255;
    buf[pos + 1] =  val >>> 8   & 255;
    buf[pos + 2] =  val >>> 16  & 255;
    buf[pos + 3] =  val >>> 24;
}

/**
 * Writes an unsigned 32 bit value as fixed 32 bits.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.fixed32 = function write_fixed32(value) {
    return this._push(writeFixed32, 4, value >>> 0);
};

/**
 * Writes a signed 32 bit value as fixed 32 bits.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sfixed32 = Writer.prototype.fixed32;

/**
 * Writes an unsigned 64 bit value as fixed 64 bits.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.fixed64 = function write_fixed64(value) {
    var bits = LongBits.from(value);
    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
};

/**
 * Writes a signed 64 bit value as fixed 64 bits.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sfixed64 = Writer.prototype.fixed64;

/**
 * Writes a float (32 bit).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.float = function write_float(value) {
    return this._push(util.float.writeFloatLE, 4, value);
};

/**
 * Writes a double (64 bit float).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.double = function write_double(value) {
    return this._push(util.float.writeDoubleLE, 8, value);
};

var writeBytes = util.Array.prototype.set
    ? function writeBytes_set(val, buf, pos) {
        buf.set(val, pos); // also works for plain array values
    }
    /* istanbul ignore next */
    : function writeBytes_for(val, buf, pos) {
        for (var i = 0; i < val.length; ++i)
            buf[pos + i] = val[i];
    };

/**
 * Writes a sequence of bytes.
 * @param {Uint8Array|string} value Buffer or base64 encoded string to write
 * @returns {Writer} `this`
 */
Writer.prototype.bytes = function write_bytes(value) {
    var len = value.length >>> 0;
    if (!len)
        return this._push(writeByte, 1, 0);
    if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
    }
    return this.uint32(len)._push(writeBytes, len, value);
};

/**
 * Writes a string.
 * @param {string} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.string = function write_string(value) {
    var len = utf8.length(value);
    return len
        ? this.uint32(len)._push(utf8.write, len, value)
        : this._push(writeByte, 1, 0);
};

/**
 * Forks this writer's state by pushing it to a stack.
 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
 * @returns {Writer} `this`
 */
Writer.prototype.fork = function fork() {
    this.states = new State(this);
    this.head = this.tail = new Op(noop, 0, 0);
    this.len = 0;
    return this;
};

/**
 * Resets this instance to the last state.
 * @returns {Writer} `this`
 */
Writer.prototype.reset = function reset() {
    if (this.states) {
        this.head   = this.states.head;
        this.tail   = this.states.tail;
        this.len    = this.states.len;
        this.states = this.states.next;
    } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len  = 0;
    }
    return this;
};

/**
 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
 * @returns {Writer} `this`
 */
Writer.prototype.ldelim = function ldelim() {
    var head = this.head,
        tail = this.tail,
        len  = this.len;
    this.reset().uint32(len);
    if (len) {
        this.tail.next = head.next; // skip noop
        this.tail = tail;
        this.len += len;
    }
    return this;
};

/**
 * Finishes the write operation.
 * @returns {Uint8Array} Finished buffer
 */
Writer.prototype.finish = function finish() {
    var head = this.head.next, // skip noop
        buf  = this.constructor.alloc(this.len),
        pos  = 0;
    while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
    }
    // this.head = this.tail = null;
    return buf;
};

Writer._configure = function(BufferWriter_) {
    BufferWriter = BufferWriter_;
};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {
var util = exports;

// used to return a Promise where callback is omitted
util.asPromise = __webpack_require__(21);

// converts to / from base64 encoded strings
util.base64 = __webpack_require__(22);

// base class of rpc.Service
util.EventEmitter = __webpack_require__(23);

// float handling accross browsers
util.float = __webpack_require__(24);

// requires modules optionally and hides the call from bundlers
util.inquire = __webpack_require__(25);

// converts to / from utf8 encoded strings
util.utf8 = __webpack_require__(26);

// provides a node-like buffer pool in the browser
util.pool = __webpack_require__(27);

// utility to work with the low and high bits of a 64 bit value
util.LongBits = __webpack_require__(28);

// global object reference
util.global = typeof window !== "undefined" && window
           || typeof global !== "undefined" && global
           || typeof self   !== "undefined" && self
           || this; // eslint-disable-line no-invalid-this

/**
 * An immuable empty array.
 * @memberof util
 * @type {Array.<*>}
 * @const
 */
util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

/**
 * An immutable empty object.
 * @type {Object}
 * @const
 */
util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

/**
 * Whether running within node or not.
 * @memberof util
 * @type {boolean}
 * @const
 */
util.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);

/**
 * Tests if the specified value is an integer.
 * @function
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is an integer
 */
util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
};

/**
 * Tests if the specified value is a string.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a string
 */
util.isString = function isString(value) {
    return typeof value === "string" || value instanceof String;
};

/**
 * Tests if the specified value is a non-null object.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a non-null object
 */
util.isObject = function isObject(value) {
    return value && typeof value === "object";
};

/**
 * Checks if a property on a message is considered to be present.
 * This is an alias of {@link util.isSet}.
 * @function
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */
util.isset =

/**
 * Checks if a property on a message is considered to be present.
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */
util.isSet = function isSet(obj, prop) {
    var value = obj[prop];
    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
    return false;
};

/**
 * Any compatible Buffer instance.
 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
 * @interface Buffer
 * @extends Uint8Array
 */

/**
 * Node's Buffer class if available.
 * @type {Constructor<Buffer>}
 */
util.Buffer = (function() {
    try {
        var Buffer = util.inquire("buffer").Buffer;
        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
    } catch (e) {
        /* istanbul ignore next */
        return null;
    }
})();

// Internal alias of or polyfull for Buffer.from.
util._Buffer_from = null;

// Internal alias of or polyfill for Buffer.allocUnsafe.
util._Buffer_allocUnsafe = null;

/**
 * Creates a new buffer of whatever type supported by the environment.
 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
 * @returns {Uint8Array|Buffer} Buffer
 */
util.newBuffer = function newBuffer(sizeOrArray) {
    /* istanbul ignore next */
    return typeof sizeOrArray === "number"
        ? util.Buffer
            ? util._Buffer_allocUnsafe(sizeOrArray)
            : new util.Array(sizeOrArray)
        : util.Buffer
            ? util._Buffer_from(sizeOrArray)
            : typeof Uint8Array === "undefined"
                ? sizeOrArray
                : new Uint8Array(sizeOrArray);
};

/**
 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
 * @type {Constructor<Uint8Array>}
 */
util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

/**
 * Any compatible Long instance.
 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
 * @interface Long
 * @property {number} low Low bits
 * @property {number} high High bits
 * @property {boolean} unsigned Whether unsigned or not
 */

/**
 * Long.js's Long class if available.
 * @type {Constructor<Long>}
 */
util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long
         || /* istanbul ignore next */ util.global.Long
         || util.inquire("long");

/**
 * Regular expression used to verify 2 bit (`bool`) map keys.
 * @type {RegExp}
 * @const
 */
util.key2Re = /^true|false|0|1$/;

/**
 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
 * @type {RegExp}
 * @const
 */
util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

/**
 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
 * @type {RegExp}
 * @const
 */
util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

/**
 * Converts a number or long to an 8 characters long hash string.
 * @param {Long|number} value Value to convert
 * @returns {string} Hash
 */
util.longToHash = function longToHash(value) {
    return value
        ? util.LongBits.from(value).toHash()
        : util.LongBits.zeroHash;
};

/**
 * Converts an 8 characters long hash string to a long or number.
 * @param {string} hash Hash
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long|number} Original value
 */
util.longFromHash = function longFromHash(hash, unsigned) {
    var bits = util.LongBits.fromHash(hash);
    if (util.Long)
        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
    return bits.toNumber(Boolean(unsigned));
};

/**
 * Merges the properties of the source object into the destination object.
 * @memberof util
 * @param {Object.<string,*>} dst Destination object
 * @param {Object.<string,*>} src Source object
 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
 * @returns {Object.<string,*>} Destination object
 */
function merge(dst, src, ifNotSet) { // used by converters
    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
        if (dst[keys[i]] === undefined || !ifNotSet)
            dst[keys[i]] = src[keys[i]];
    return dst;
}

util.merge = merge;

/**
 * Converts the first character of a string to lower case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */
util.lcFirst = function lcFirst(str) {
    return str.charAt(0).toLowerCase() + str.substring(1);
};

/**
 * Creates a custom error constructor.
 * @memberof util
 * @param {string} name Error name
 * @returns {Constructor<Error>} Custom error constructor
 */
function newError(name) {

    function CustomError(message, properties) {

        if (!(this instanceof CustomError))
            return new CustomError(message, properties);

        // Error.call(this, message);
        // ^ just returns a new error instance because the ctor can be called as a function

        Object.defineProperty(this, "message", { get: function() { return message; } });

        /* istanbul ignore next */
        if (Error.captureStackTrace) // node
            Error.captureStackTrace(this, CustomError);
        else
            Object.defineProperty(this, "stack", { value: (new Error()).stack || "" });

        if (properties)
            merge(this, properties);
    }

    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;

    Object.defineProperty(CustomError.prototype, "name", { get: function() { return name; } });

    CustomError.prototype.toString = function toString() {
        return this.name + ": " + this.message;
    };

    return CustomError;
}

util.newError = newError;

/**
 * Constructs a new protocol error.
 * @classdesc Error subclass indicating a protocol specifc error.
 * @memberof util
 * @extends Error
 * @template T extends Message<T>
 * @constructor
 * @param {string} message Error message
 * @param {Object.<string,*>} [properties] Additional properties
 * @example
 * try {
 *     MyMessage.decode(someBuffer); // throws if required fields are missing
 * } catch (e) {
 *     if (e instanceof ProtocolError && e.instance)
 *         console.log("decoded so far: " + JSON.stringify(e.instance));
 * }
 */
util.ProtocolError = newError("ProtocolError");

/**
 * So far decoded message instance.
 * @name util.ProtocolError#instance
 * @type {Message<T>}
 */

/**
 * A OneOf getter as returned by {@link util.oneOfGetter}.
 * @typedef OneOfGetter
 * @type {function}
 * @returns {string|undefined} Set field name, if any
 */

/**
 * Builds a getter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfGetter} Unbound getter
 */
util.oneOfGetter = function getOneOf(fieldNames) {
    var fieldMap = {};
    for (var i = 0; i < fieldNames.length; ++i)
        fieldMap[fieldNames[i]] = 1;

    /**
     * @returns {string|undefined} Set field name, if any
     * @this Object
     * @ignore
     */
    return function() { // eslint-disable-line consistent-return
        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)
                return keys[i];
    };
};

/**
 * A OneOf setter as returned by {@link util.oneOfSetter}.
 * @typedef OneOfSetter
 * @type {function}
 * @param {string|undefined} value Field name
 * @returns {undefined}
 */

/**
 * Builds a setter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfSetter} Unbound setter
 */
util.oneOfSetter = function setOneOf(fieldNames) {

    /**
     * @param {string} name Field name
     * @returns {undefined}
     * @this Object
     * @ignore
     */
    return function(name) {
        for (var i = 0; i < fieldNames.length; ++i)
            if (fieldNames[i] !== name)
                delete this[fieldNames[i]];
    };
};

/**
 * Default conversion options used for {@link Message#toJSON} implementations.
 *
 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
 *
 * - Longs become strings
 * - Enums become string keys
 * - Bytes become base64 encoded strings
 * - (Sub-)Messages become plain objects
 * - Maps become plain objects with all string keys
 * - Repeated fields become arrays
 * - NaN and Infinity for float and double fields become strings
 *
 * @type {IConversionOptions}
 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
 */
util.toJSONOptions = {
    longs: String,
    enums: String,
    bytes: String,
    json: true
};

// Sets up buffer utility according to the environment (called in index-minimal)
util._configure = function() {
    var Buffer = util.Buffer;
    /* istanbul ignore if */
    if (!Buffer) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
    }
    // because node 4.x buffers are incompatible & immutable
    // see: https://github.com/dcodeIO/protobuf.js/pull/665
    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
        /* istanbul ignore next */
        function Buffer_from(value, encoding) {
            return new Buffer(value, encoding);
        };
    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
        /* istanbul ignore next */
        function Buffer_allocUnsafe(size) {
            return new Buffer(size);
        };
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(20)))

/***/ }),
/* 20 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = asPromise;

/**
 * Callback as used by {@link util.asPromise}.
 * @typedef asPromiseCallback
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {...*} params Additional arguments
 * @returns {undefined}
 */

/**
 * Returns a promise from a node-style callback function.
 * @memberof util
 * @param {asPromiseCallback} fn Function to call
 * @param {*} ctx Function context
 * @param {...*} params Function arguments
 * @returns {Promise<*>} Promisified function
 */
function asPromise(fn, ctx/*, varargs */) {
    var params  = new Array(arguments.length - 1),
        offset  = 0,
        index   = 2,
        pending = true;
    while (index < arguments.length)
        params[offset++] = arguments[index++];
    return new Promise(function executor(resolve, reject) {
        params[offset] = function callback(err/*, varargs */) {
            if (pending) {
                pending = false;
                if (err)
                    reject(err);
                else {
                    var params = new Array(arguments.length - 1),
                        offset = 0;
                    while (offset < params.length)
                        params[offset++] = arguments[offset];
                    resolve.apply(null, params);
                }
            }
        };
        try {
            fn.apply(ctx || null, params);
        } catch (err) {
            if (pending) {
                pending = false;
                reject(err);
            }
        }
    });
}


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A minimal base64 implementation for number arrays.
 * @memberof util
 * @namespace
 */
var base64 = exports;

/**
 * Calculates the byte length of a base64 encoded string.
 * @param {string} string Base64 encoded string
 * @returns {number} Byte length
 */
base64.length = function length(string) {
    var p = string.length;
    if (!p)
        return 0;
    var n = 0;
    while (--p % 4 > 1 && string.charAt(p) === "=")
        ++n;
    return Math.ceil(string.length * 3) / 4 - n;
};

// Base64 encoding table
var b64 = new Array(64);

// Base64 decoding table
var s64 = new Array(123);

// 65..90, 97..122, 48..57, 43, 47
for (var i = 0; i < 64;)
    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

/**
 * Encodes a buffer to a base64 encoded string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} Base64 encoded string
 */
base64.encode = function encode(buffer, start, end) {
    var parts = null,
        chunk = [];
    var i = 0, // output index
        j = 0, // goto index
        t;     // temporary
    while (start < end) {
        var b = buffer[start++];
        switch (j) {
            case 0:
                chunk[i++] = b64[b >> 2];
                t = (b & 3) << 4;
                j = 1;
                break;
            case 1:
                chunk[i++] = b64[t | b >> 4];
                t = (b & 15) << 2;
                j = 2;
                break;
            case 2:
                chunk[i++] = b64[t | b >> 6];
                chunk[i++] = b64[b & 63];
                j = 0;
                break;
        }
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (j) {
        chunk[i++] = b64[t];
        chunk[i++] = 61;
        if (j === 1)
            chunk[i++] = 61;
    }
    if (parts) {
        if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

var invalidEncoding = "invalid encoding";

/**
 * Decodes a base64 encoded string to a buffer.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Number of bytes written
 * @throws {Error} If encoding is invalid
 */
base64.decode = function decode(string, buffer, offset) {
    var start = offset;
    var j = 0, // goto index
        t;     // temporary
    for (var i = 0; i < string.length;) {
        var c = string.charCodeAt(i++);
        if (c === 61 && j > 1)
            break;
        if ((c = s64[c]) === undefined)
            throw Error(invalidEncoding);
        switch (j) {
            case 0:
                t = c;
                j = 1;
                break;
            case 1:
                buffer[offset++] = t << 2 | (c & 48) >> 4;
                t = c;
                j = 2;
                break;
            case 2:
                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
                t = c;
                j = 3;
                break;
            case 3:
                buffer[offset++] = (t & 3) << 6 | c;
                j = 0;
                break;
        }
    }
    if (j === 1)
        throw Error(invalidEncoding);
    return offset - start;
};

/**
 * Tests if the specified string appears to be base64 encoded.
 * @param {string} string String to test
 * @returns {boolean} `true` if probably base64 encoded, otherwise false
 */
base64.test = function test(string) {
    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = EventEmitter;

/**
 * Constructs a new event emitter instance.
 * @classdesc A minimal event emitter.
 * @memberof util
 * @constructor
 */
function EventEmitter() {

    /**
     * Registered listeners.
     * @type {Object.<string,*>}
     * @private
     */
    this._listeners = {};
}

/**
 * Registers an event listener.
 * @param {string} evt Event name
 * @param {function} fn Listener
 * @param {*} [ctx] Listener context
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.on = function on(evt, fn, ctx) {
    (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn  : fn,
        ctx : ctx || this
    });
    return this;
};

/**
 * Removes an event listener or any matching listeners if arguments are omitted.
 * @param {string} [evt] Event name. Removes all listeners if omitted.
 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.off = function off(evt, fn) {
    if (evt === undefined)
        this._listeners = {};
    else {
        if (fn === undefined)
            this._listeners[evt] = [];
        else {
            var listeners = this._listeners[evt];
            for (var i = 0; i < listeners.length;)
                if (listeners[i].fn === fn)
                    listeners.splice(i, 1);
                else
                    ++i;
        }
    }
    return this;
};

/**
 * Emits an event by calling its listeners with the specified arguments.
 * @param {string} evt Event name
 * @param {...*} args Arguments
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.emit = function emit(evt) {
    var listeners = this._listeners[evt];
    if (listeners) {
        var args = [],
            i = 1;
        for (; i < arguments.length;)
            args.push(arguments[i++]);
        for (i = 0; i < listeners.length;)
            listeners[i].fn.apply(listeners[i++].ctx, args);
    }
    return this;
};


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = factory(factory);

/**
 * Reads / writes floats / doubles from / to buffers.
 * @name util.float
 * @namespace
 */

/**
 * Writes a 32 bit float to a buffer using little endian byte order.
 * @name util.float.writeFloatLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 32 bit float to a buffer using big endian byte order.
 * @name util.float.writeFloatBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 32 bit float from a buffer using little endian byte order.
 * @name util.float.readFloatLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 32 bit float from a buffer using big endian byte order.
 * @name util.float.readFloatBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Writes a 64 bit double to a buffer using little endian byte order.
 * @name util.float.writeDoubleLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 64 bit double to a buffer using big endian byte order.
 * @name util.float.writeDoubleBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 64 bit double from a buffer using little endian byte order.
 * @name util.float.readDoubleLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 64 bit double from a buffer using big endian byte order.
 * @name util.float.readDoubleBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

// Factory function for the purpose of node-based testing in modified global environments
function factory(exports) {

    // float: typed array
    if (typeof Float32Array !== "undefined") (function() {

        var f32 = new Float32Array([ -0 ]),
            f8b = new Uint8Array(f32.buffer),
            le  = f8b[3] === 128;

        function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos    ] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
        }

        function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos    ] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
        /* istanbul ignore next */
        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

        function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos    ];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
        }

        function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos    ];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
        }

        /* istanbul ignore next */
        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
        /* istanbul ignore next */
        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

    // float: ieee754
    })(); else (function() {

        function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
                val = -val;
            if (val === 0)
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
            else if (isNaN(val))
                writeUint(2143289344, buf, pos);
            else if (val > 3.4028234663852886e+38) // +-Infinity
                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 1.1754943508222875e-38) // denormal
                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
            else {
                var exponent = Math.floor(Math.log(val) / Math.LN2),
                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
        }

        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

        function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos),
                sign = (uint >> 31) * 2 + 1,
                exponent = uint >>> 23 & 255,
                mantissa = uint & 8388607;
            return exponent === 255
                ? mantissa
                ? NaN
                : sign * Infinity
                : exponent === 0 // denormal
                ? sign * 1.401298464324817e-45 * mantissa
                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
        }

        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);

    })();

    // double: typed array
    if (typeof Float64Array !== "undefined") (function() {

        var f64 = new Float64Array([-0]),
            f8b = new Uint8Array(f64.buffer),
            le  = f8b[7] === 128;

        function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos    ] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
        }

        function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos    ] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
        /* istanbul ignore next */
        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

        function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos    ];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
        }

        function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos    ];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
        }

        /* istanbul ignore next */
        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
        /* istanbul ignore next */
        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

    // double: ieee754
    })(); else (function() {

        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
                val = -val;
            if (val === 0) {
                writeUint(0, buf, pos + off0);
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
            } else if (isNaN(val)) {
                writeUint(0, buf, pos + off0);
                writeUint(2146959360, buf, pos + off1);
            } else if (val > 1.7976931348623157e+308) { // +-Infinity
                writeUint(0, buf, pos + off0);
                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
                var mantissa;
                if (val < 2.2250738585072014e-308) { // denormal
                    mantissa = val / 5e-324;
                    writeUint(mantissa >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
                } else {
                    var exponent = Math.floor(Math.log(val) / Math.LN2);
                    if (exponent === 1024)
                        exponent = 1023;
                    mantissa = val * Math.pow(2, -exponent);
                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
                }
            }
        }

        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0),
                hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1,
                exponent = hi >>> 20 & 2047,
                mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047
                ? mantissa
                ? NaN
                : sign * Infinity
                : exponent === 0 // denormal
                ? sign * 5e-324 * mantissa
                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
        }

        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);

    })();

    return exports;
}

// uint helpers

function writeUintLE(val, buf, pos) {
    buf[pos    ] =  val        & 255;
    buf[pos + 1] =  val >>> 8  & 255;
    buf[pos + 2] =  val >>> 16 & 255;
    buf[pos + 3] =  val >>> 24;
}

function writeUintBE(val, buf, pos) {
    buf[pos    ] =  val >>> 24;
    buf[pos + 1] =  val >>> 16 & 255;
    buf[pos + 2] =  val >>> 8  & 255;
    buf[pos + 3] =  val        & 255;
}

function readUintLE(buf, pos) {
    return (buf[pos    ]
          | buf[pos + 1] << 8
          | buf[pos + 2] << 16
          | buf[pos + 3] << 24) >>> 0;
}

function readUintBE(buf, pos) {
    return (buf[pos    ] << 24
          | buf[pos + 1] << 16
          | buf[pos + 2] << 8
          | buf[pos + 3]) >>> 0;
}


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = inquire;

/**
 * Requires a module only if available.
 * @memberof util
 * @param {string} moduleName Module to require
 * @returns {?Object} Required module if available and not empty, otherwise `null`
 */
function inquire(moduleName) {
    try {
        var mod = eval("quire".replace(/^/,"re"))(moduleName); // eslint-disable-line no-eval
        if (mod && (mod.length || Object.keys(mod).length))
            return mod;
    } catch (e) {} // eslint-disable-line no-empty
    return null;
}


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A minimal UTF8 implementation for number arrays.
 * @memberof util
 * @namespace
 */
var utf8 = exports;

/**
 * Calculates the UTF8 byte length of a string.
 * @param {string} string String
 * @returns {number} Byte length
 */
utf8.length = function utf8_length(string) {
    var len = 0,
        c = 0;
    for (var i = 0; i < string.length; ++i) {
        c = string.charCodeAt(i);
        if (c < 128)
            len += 1;
        else if (c < 2048)
            len += 2;
        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
            ++i;
            len += 4;
        } else
            len += 3;
    }
    return len;
};

/**
 * Reads UTF8 bytes as a string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} String read
 */
utf8.read = function utf8_read(buffer, start, end) {
    var len = end - start;
    if (len < 1)
        return "";
    var parts = null,
        chunk = [],
        i = 0, // char offset
        t;     // temporary
    while (start < end) {
        t = buffer[start++];
        if (t < 128)
            chunk[i++] = t;
        else if (t > 191 && t < 224)
            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
        else if (t > 239 && t < 365) {
            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
            chunk[i++] = 0xD800 + (t >> 10);
            chunk[i++] = 0xDC00 + (t & 1023);
        } else
            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (parts) {
        if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

/**
 * Writes a string as UTF8 bytes.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Bytes written
 */
utf8.write = function utf8_write(string, buffer, offset) {
    var start = offset,
        c1, // character 1
        c2; // character 2
    for (var i = 0; i < string.length; ++i) {
        c1 = string.charCodeAt(i);
        if (c1 < 128) {
            buffer[offset++] = c1;
        } else if (c1 < 2048) {
            buffer[offset++] = c1 >> 6       | 192;
            buffer[offset++] = c1       & 63 | 128;
        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
            ++i;
            buffer[offset++] = c1 >> 18      | 240;
            buffer[offset++] = c1 >> 12 & 63 | 128;
            buffer[offset++] = c1 >> 6  & 63 | 128;
            buffer[offset++] = c1       & 63 | 128;
        } else {
            buffer[offset++] = c1 >> 12      | 224;
            buffer[offset++] = c1 >> 6  & 63 | 128;
            buffer[offset++] = c1       & 63 | 128;
        }
    }
    return offset - start;
};


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = pool;

/**
 * An allocator as used by {@link util.pool}.
 * @typedef PoolAllocator
 * @type {function}
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */

/**
 * A slicer as used by {@link util.pool}.
 * @typedef PoolSlicer
 * @type {function}
 * @param {number} start Start offset
 * @param {number} end End offset
 * @returns {Uint8Array} Buffer slice
 * @this {Uint8Array}
 */

/**
 * A general purpose buffer pool.
 * @memberof util
 * @function
 * @param {PoolAllocator} alloc Allocator
 * @param {PoolSlicer} slice Slicer
 * @param {number} [size=8192] Slab size
 * @returns {PoolAllocator} Pooled allocator
 */
function pool(alloc, slice, size) {
    var SIZE   = size || 8192;
    var MAX    = SIZE >>> 1;
    var slab   = null;
    var offset = SIZE;
    return function pool_alloc(size) {
        if (size < 1 || size > MAX)
            return alloc(size);
        if (offset + size > SIZE) {
            slab = alloc(SIZE);
            offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size);
        if (offset & 7) // align to 32 bit
            offset = (offset | 7) + 1;
        return buf;
    };
}


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = LongBits;

var util = __webpack_require__(19);

/**
 * Constructs new long bits.
 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
 * @memberof util
 * @constructor
 * @param {number} lo Low 32 bits, unsigned
 * @param {number} hi High 32 bits, unsigned
 */
function LongBits(lo, hi) {

    // note that the casts below are theoretically unnecessary as of today, but older statically
    // generated converter code might still call the ctor with signed 32bits. kept for compat.

    /**
     * Low bits.
     * @type {number}
     */
    this.lo = lo >>> 0;

    /**
     * High bits.
     * @type {number}
     */
    this.hi = hi >>> 0;
}

/**
 * Zero bits.
 * @memberof util.LongBits
 * @type {util.LongBits}
 */
var zero = LongBits.zero = new LongBits(0, 0);

zero.toNumber = function() { return 0; };
zero.zzEncode = zero.zzDecode = function() { return this; };
zero.length = function() { return 1; };

/**
 * Zero hash.
 * @memberof util.LongBits
 * @type {string}
 */
var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

/**
 * Constructs new long bits from the specified number.
 * @param {number} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.fromNumber = function fromNumber(value) {
    if (value === 0)
        return zero;
    var sign = value < 0;
    if (sign)
        value = -value;
    var lo = value >>> 0,
        hi = (value - lo) / 4294967296 >>> 0;
    if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
            lo = 0;
            if (++hi > 4294967295)
                hi = 0;
        }
    }
    return new LongBits(lo, hi);
};

/**
 * Constructs new long bits from a number, long or string.
 * @param {Long|number|string} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.from = function from(value) {
    if (typeof value === "number")
        return LongBits.fromNumber(value);
    if (util.isString(value)) {
        /* istanbul ignore else */
        if (util.Long)
            value = util.Long.fromString(value);
        else
            return LongBits.fromNumber(parseInt(value, 10));
    }
    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
};

/**
 * Converts this long bits to a possibly unsafe JavaScript number.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {number} Possibly unsafe number
 */
LongBits.prototype.toNumber = function toNumber(unsigned) {
    if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0,
            hi = ~this.hi     >>> 0;
        if (!lo)
            hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
    }
    return this.lo + this.hi * 4294967296;
};

/**
 * Converts this long bits to a long.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long} Long
 */
LongBits.prototype.toLong = function toLong(unsigned) {
    return util.Long
        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
        /* istanbul ignore next */
        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
};

var charCodeAt = String.prototype.charCodeAt;

/**
 * Constructs new long bits from the specified 8 characters long hash.
 * @param {string} hash Hash
 * @returns {util.LongBits} Bits
 */
LongBits.fromHash = function fromHash(hash) {
    if (hash === zeroHash)
        return zero;
    return new LongBits(
        ( charCodeAt.call(hash, 0)
        | charCodeAt.call(hash, 1) << 8
        | charCodeAt.call(hash, 2) << 16
        | charCodeAt.call(hash, 3) << 24) >>> 0
    ,
        ( charCodeAt.call(hash, 4)
        | charCodeAt.call(hash, 5) << 8
        | charCodeAt.call(hash, 6) << 16
        | charCodeAt.call(hash, 7) << 24) >>> 0
    );
};

/**
 * Converts this long bits to a 8 characters long hash.
 * @returns {string} Hash
 */
LongBits.prototype.toHash = function toHash() {
    return String.fromCharCode(
        this.lo        & 255,
        this.lo >>> 8  & 255,
        this.lo >>> 16 & 255,
        this.lo >>> 24      ,
        this.hi        & 255,
        this.hi >>> 8  & 255,
        this.hi >>> 16 & 255,
        this.hi >>> 24
    );
};

/**
 * Zig-zag encodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzEncode = function zzEncode() {
    var mask =   this.hi >> 31;
    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
    return this;
};

/**
 * Zig-zag decodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzDecode = function zzDecode() {
    var mask = -(this.lo & 1);
    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
    return this;
};

/**
 * Calculates the length of this longbits when encoded as a varint.
 * @returns {number} Length
 */
LongBits.prototype.length = function length() {
    var part0 =  this.lo,
        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
        part2 =  this.hi >>> 24;
    return part2 === 0
         ? part1 === 0
           ? part0 < 16384
             ? part0 < 128 ? 1 : 2
             : part0 < 2097152 ? 3 : 4
           : part1 < 16384
             ? part1 < 128 ? 5 : 6
             : part1 < 2097152 ? 7 : 8
         : part2 < 128 ? 9 : 10;
};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = BufferWriter;

// extends Writer
var Writer = __webpack_require__(18);
(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;

var util = __webpack_require__(19);

var Buffer = util.Buffer;

/**
 * Constructs a new buffer writer instance.
 * @classdesc Wire format writer using node buffers.
 * @extends Writer
 * @constructor
 */
function BufferWriter() {
    Writer.call(this);
}

/**
 * Allocates a buffer of the specified size.
 * @param {number} size Buffer size
 * @returns {Buffer} Buffer
 */
BufferWriter.alloc = function alloc_buffer(size) {
    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);
};

var writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === "set"
    ? function writeBytesBuffer_set(val, buf, pos) {
        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
                           // also works for plain array values
    }
    /* istanbul ignore next */
    : function writeBytesBuffer_copy(val, buf, pos) {
        if (val.copy) // Buffer values
            val.copy(buf, pos, 0, val.length);
        else for (var i = 0; i < val.length;) // plain array values
            buf[pos++] = val[i++];
    };

/**
 * @override
 */
BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
    if (util.isString(value))
        value = util._Buffer_from(value, "base64");
    var len = value.length >>> 0;
    this.uint32(len);
    if (len)
        this._push(writeBytesBuffer, len, value);
    return this;
};

function writeStringBuffer(val, buf, pos) {
    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
        util.utf8.write(val, buf, pos);
    else
        buf.utf8Write(val, pos);
}

/**
 * @override
 */
BufferWriter.prototype.string = function write_string_buffer(value) {
    var len = Buffer.byteLength(value);
    this.uint32(len);
    if (len)
        this._push(writeStringBuffer, len, value);
    return this;
};


/**
 * Finishes the write operation.
 * @name BufferWriter#finish
 * @function
 * @returns {Buffer} Finished buffer
 */


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = Reader;

var util      = __webpack_require__(19);

var BufferReader; // cyclic

var LongBits  = util.LongBits,
    utf8      = util.utf8;

/* istanbul ignore next */
function indexOutOfRange(reader, writeLength) {
    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
}

/**
 * Constructs a new reader instance using the specified buffer.
 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 * @param {Uint8Array} buffer Buffer to read from
 */
function Reader(buffer) {

    /**
     * Read buffer.
     * @type {Uint8Array}
     */
    this.buf = buffer;

    /**
     * Read buffer position.
     * @type {number}
     */
    this.pos = 0;

    /**
     * Read buffer length.
     * @type {number}
     */
    this.len = buffer.length;
}

var create_array = typeof Uint8Array !== "undefined"
    ? function create_typed_array(buffer) {
        if (buffer instanceof Uint8Array || Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    }
    /* istanbul ignore next */
    : function create_array(buffer) {
        if (Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    };

/**
 * Creates a new reader using the specified buffer.
 * @function
 * @param {Uint8Array|Buffer} buffer Buffer to read from
 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
 * @throws {Error} If `buffer` is not a valid buffer
 */
Reader.create = util.Buffer
    ? function create_buffer_setup(buffer) {
        return (Reader.create = function create_buffer(buffer) {
            return util.Buffer.isBuffer(buffer)
                ? new BufferReader(buffer)
                /* istanbul ignore next */
                : create_array(buffer);
        })(buffer);
    }
    /* istanbul ignore next */
    : create_array;

Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;

/**
 * Reads a varint as an unsigned 32 bit value.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.uint32 = (function read_uint32_setup() {
    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
    return function read_uint32() {
        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

        /* istanbul ignore if */
        if ((this.pos += 5) > this.len) {
            this.pos = this.len;
            throw indexOutOfRange(this, 10);
        }
        return value;
    };
})();

/**
 * Reads a varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.int32 = function read_int32() {
    return this.uint32() | 0;
};

/**
 * Reads a zig-zag encoded varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.sint32 = function read_sint32() {
    var value = this.uint32();
    return value >>> 1 ^ -(value & 1) | 0;
};

/* eslint-disable no-invalid-this */

function readLongVarint() {
    // tends to deopt with local vars for octet etc.
    var bits = new LongBits(0, 0);
    var i = 0;
    if (this.len - this.pos > 4) { // fast route (lo)
        for (; i < 4; ++i) {
            // 1st..4th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 5th
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
        if (this.buf[this.pos++] < 128)
            return bits;
        i = 0;
    } else {
        for (; i < 3; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 1st..3th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 4th
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
    }
    if (this.len - this.pos > 4) { // fast route (hi)
        for (; i < 5; ++i) {
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    } else {
        for (; i < 5; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    }
    /* istanbul ignore next */
    throw Error("invalid varint encoding");
}

/* eslint-enable no-invalid-this */

/**
 * Reads a varint as a signed 64 bit value.
 * @name Reader#int64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as an unsigned 64 bit value.
 * @name Reader#uint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a zig-zag encoded varint as a signed 64 bit value.
 * @name Reader#sint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as a boolean.
 * @returns {boolean} Value read
 */
Reader.prototype.bool = function read_bool() {
    return this.uint32() !== 0;
};

function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
    return (buf[end - 4]
          | buf[end - 3] << 8
          | buf[end - 2] << 16
          | buf[end - 1] << 24) >>> 0;
}

/**
 * Reads fixed 32 bits as an unsigned 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.fixed32 = function read_fixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4);
};

/**
 * Reads fixed 32 bits as a signed 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.sfixed32 = function read_sfixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4) | 0;
};

/* eslint-disable no-invalid-this */

function readFixed64(/* this: Reader */) {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);

    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
}

/* eslint-enable no-invalid-this */

/**
 * Reads fixed 64 bits.
 * @name Reader#fixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads zig-zag encoded fixed 64 bits.
 * @name Reader#sfixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a float (32 bit) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.float = function read_float() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readFloatLE(this.buf, this.pos);
    this.pos += 4;
    return value;
};

/**
 * Reads a double (64 bit float) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.double = function read_double() {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readDoubleLE(this.buf, this.pos);
    this.pos += 8;
    return value;
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @returns {Uint8Array} Value read
 */
Reader.prototype.bytes = function read_bytes() {
    var length = this.uint32(),
        start  = this.pos,
        end    = this.pos + length;

    /* istanbul ignore if */
    if (end > this.len)
        throw indexOutOfRange(this, length);

    this.pos += length;
    if (Array.isArray(this.buf)) // plain array
        return this.buf.slice(start, end);
    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
        ? new this.buf.constructor(0)
        : this._slice.call(this.buf, start, end);
};

/**
 * Reads a string preceeded by its byte length as a varint.
 * @returns {string} Value read
 */
Reader.prototype.string = function read_string() {
    var bytes = this.bytes();
    return utf8.read(bytes, 0, bytes.length);
};

/**
 * Skips the specified number of bytes if specified, otherwise skips a varint.
 * @param {number} [length] Length if known, otherwise a varint is assumed
 * @returns {Reader} `this`
 */
Reader.prototype.skip = function skip(length) {
    if (typeof length === "number") {
        /* istanbul ignore if */
        if (this.pos + length > this.len)
            throw indexOutOfRange(this, length);
        this.pos += length;
    } else {
        do {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
    }
    return this;
};

/**
 * Skips the next element of the specified wire type.
 * @param {number} wireType Wire type received
 * @returns {Reader} `this`
 */
Reader.prototype.skipType = function(wireType) {
    switch (wireType) {
        case 0:
            this.skip();
            break;
        case 1:
            this.skip(8);
            break;
        case 2:
            this.skip(this.uint32());
            break;
        case 3:
            while ((wireType = this.uint32() & 7) !== 4) {
                this.skipType(wireType);
            }
            break;
        case 5:
            this.skip(4);
            break;

        /* istanbul ignore next */
        default:
            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
    }
    return this;
};

Reader._configure = function(BufferReader_) {
    BufferReader = BufferReader_;

    var fn = util.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
    util.merge(Reader.prototype, {

        int64: function read_int64() {
            return readLongVarint.call(this)[fn](false);
        },

        uint64: function read_uint64() {
            return readLongVarint.call(this)[fn](true);
        },

        sint64: function read_sint64() {
            return readLongVarint.call(this).zzDecode()[fn](false);
        },

        fixed64: function read_fixed64() {
            return readFixed64.call(this)[fn](true);
        },

        sfixed64: function read_sfixed64() {
            return readFixed64.call(this)[fn](false);
        }

    });
};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = BufferReader;

// extends Reader
var Reader = __webpack_require__(30);
(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;

var util = __webpack_require__(19);

/**
 * Constructs a new buffer reader instance.
 * @classdesc Wire format reader using node buffers.
 * @extends Reader
 * @constructor
 * @param {Buffer} buffer Buffer to read from
 */
function BufferReader(buffer) {
    Reader.call(this, buffer);

    /**
     * Read buffer.
     * @name BufferReader#buf
     * @type {Buffer}
     */
}

/* istanbul ignore else */
if (util.Buffer)
    BufferReader.prototype._slice = util.Buffer.prototype.slice;

/**
 * @override
 */
BufferReader.prototype.string = function read_string_buffer() {
    var len = this.uint32(); // modifies pos
    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @name BufferReader#bytes
 * @function
 * @returns {Buffer} Value read
 */


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Streaming RPC helpers.
 * @namespace
 */
var rpc = exports;

/**
 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
 * @typedef RPCImpl
 * @type {function}
 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
 * @param {Uint8Array} requestData Request data
 * @param {RPCImplCallback} callback Callback function
 * @returns {undefined}
 * @example
 * function rpcImpl(method, requestData, callback) {
 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
 *         throw Error("no such method");
 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
 *         callback(err, responseData);
 *     });
 * }
 */

/**
 * Node-style callback as used by {@link RPCImpl}.
 * @typedef RPCImplCallback
 * @type {function}
 * @param {Error|null} error Error, if any, otherwise `null`
 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
 * @returns {undefined}
 */

rpc.Service = __webpack_require__(33);


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = Service;

var util = __webpack_require__(19);

// Extends EventEmitter
(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;

/**
 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
 *
 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
 * @typedef rpc.ServiceMethodCallback
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {TRes} [response] Response message
 * @returns {undefined}
 */

/**
 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
 * @typedef rpc.ServiceMethod
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
 */

/**
 * Constructs a new RPC service instance.
 * @classdesc An RPC service as returned by {@link Service#create}.
 * @exports rpc.Service
 * @extends util.EventEmitter
 * @constructor
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 */
function Service(rpcImpl, requestDelimited, responseDelimited) {

    if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");

    util.EventEmitter.call(this);

    /**
     * RPC implementation. Becomes `null` once the service is ended.
     * @type {RPCImpl|null}
     */
    this.rpcImpl = rpcImpl;

    /**
     * Whether requests are length-delimited.
     * @type {boolean}
     */
    this.requestDelimited = Boolean(requestDelimited);

    /**
     * Whether responses are length-delimited.
     * @type {boolean}
     */
    this.responseDelimited = Boolean(responseDelimited);
}

/**
 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
 * @param {Constructor<TReq>} requestCtor Request constructor
 * @param {Constructor<TRes>} responseCtor Response constructor
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
 * @returns {undefined}
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 */
Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

    if (!request)
        throw TypeError("request must be specified");

    var self = this;
    if (!callback)
        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

    if (!self.rpcImpl) {
        setTimeout(function() { callback(Error("already ended")); }, 0);
        return undefined;
    }

    try {
        return self.rpcImpl(
            method,
            requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
            function rpcCallback(err, response) {

                if (err) {
                    self.emit("error", err, method);
                    return callback(err);
                }

                if (response === null) {
                    self.end(/* endedByRPC */ true);
                    return undefined;
                }

                if (!(response instanceof responseCtor)) {
                    try {
                        response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
                    } catch (err) {
                        self.emit("error", err, method);
                        return callback(err);
                    }
                }

                self.emit("data", response, method);
                return callback(null, response);
            }
        );
    } catch (err) {
        self.emit("error", err, method);
        setTimeout(function() { callback(err); }, 0);
        return undefined;
    }
};

/**
 * Ends this service and emits the `end` event.
 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
 * @returns {rpc.Service} `this`
 */
Service.prototype.end = function end(endedByRPC) {
    if (this.rpcImpl) {
        if (!endedByRPC) // signal end to rpcImpl
            this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
    }
    return this;
};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = {};

/**
 * Named roots.
 * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).
 * Can also be used manually to make roots available accross modules.
 * @name roots
 * @type {Object.<string,Root>}
 * @example
 * // pbjs -r myroot -o compiled.js ...
 *
 * // in another module:
 * require("./compiled.js");
 *
 * // in any subsequent module:
 * var root = protobuf.roots["myroot"];
 */


/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return DfGlyphDeliveryManager; });
/**
 * This class is responsible for enriching font and the atlas by new glyphs. The glyph source is abstracted and
 * should be specified in concrete descendants by implementing _getGlyphRange(), more likely it will be an http call.
 */
class DfGlyphDeliveryManager {
    constructor(fontRegistry, atlas) {
        this._fontRegistry = fontRegistry;
        this._atlas = atlas;
        this._rangeRequests = new Map();
    }
    /**
     * Requests glyphs via provider and stores them. Glyphs are requested by ranges, that is kind of an optimisation,
     * as it is more likely that subsequent glyph requests will be in those ranges too.
     */
    fetchGlyphs(fontId, glyphIds) {
        const requests = new Set();
        for (const glyphId of glyphIds) {
            // to save HTTP requests glyphs are requested by ranges, but this optimisation doesn't work well for asian
            // writings, where glyphs are highly scattered (such ranges contains not so many really used glyphs).
            // 10000 threshold is just a magic number that "works" (there is no reliable method to choose the strategy)
            // TODO: checkout https://st.yandex-team.ru/MAPSRENDER-2127 resolution and update this hack accordingly
            const rangeLength = glyphId > 10000 ? 1 : 256;
            const range = glyphId - glyphId % rangeLength;
            const fullRangeName = fontId + range;
            let request = this._rangeRequests.get(fullRangeName);
            if (!request) {
                request = this._getGlyphRange(fontId, range, range + rangeLength - 1);
                request.then(this._onNewRange.bind(this, fontId));
                this._rangeRequests.set(fullRangeName, request);
            }
            requests.add(request);
        }
        return Promise.all(requests);
    }
    /**
     * Handles incoming glyph range response. It adds new glyphs to font and atlas.
     */
    _onNewRange(fontId, glyphs) {
        for (const glyph of glyphs) {
            const font = this._fontRegistry.get(fontId);
            font.addGlyph(glyph);
            this._atlas.allocateGlyph(fontId, glyph, font.margin);
        }
    }
}


/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getHostAliasByUid", function() { return getHostAliasByUid; });
const HOST_ALIASES_N = 4;
function getHostAliasByUid(uid) {
    let sum = 0;
    for (let i = 0; i < uid.length; i++) {
        sum += uid.charCodeAt(i);
    }
    return (sum % HOST_ALIASES_N + 1).toString();
}


/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTileIdByRawValues", function() { return getTileIdByRawValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTileId", function() { return getTileId; });
function getTileIdByRawValues(x, y, zoom) {
    return `${x}:${y}:${zoom}`;
}
function getTileId(tile) {
    return getTileIdByRawValues(tile.x, tile.y, tile.zoom);
}


/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OPAQUE_BLACK", function() { return OPAQUE_BLACK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TRANSPARENT_BLACK", function() { return TRANSPARENT_BLACK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "areEqual", function() { return areEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decodeAbgr8", function() { return decodeAbgr8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encodeRgba8", function() { return encodeRgba8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isOpaque", function() { return isOpaque; });
const OPAQUE_BLACK = create(0, 0, 0, 1);
const TRANSPARENT_BLACK = create(0, 0, 0, 0);
/**
 * @param r Red component as a normalized value [0..1]
 * @param g Green component as a normalized value [0..1]
 * @param b Blue component as a normalized value [0..1]
 * @param a Alpha component as a normalized value [0..1]
 *
 * @returns A color with given values assigned to components.
 */
function create(r, g, b, a = 1) {
    return { r, g, b, a };
}
/**
 * Copies a color to another one.
 *
 * @param src The source color.
 * @param dst The color the source color will be copied to.
 * @returns `dst`.
 */
function copy(src, dst = create(0, 0, 0, 0)) {
    dst.r = src.r;
    dst.g = src.g;
    dst.b = src.b;
    dst.a = src.a;
    return dst;
}
function areEqual(c1, c2) {
    return c1.r === c2.r && c1.g === c2.g && c1.b === c2.b && c1.a === c2.a;
}
/**
 * Decodes a color represented as four 8-bit channels encoded into a 32-bit
 * number in ABGR order (from MSB to LSB).
 *
 * @param color Color encoded into unsigned 32-bit integer.
 * @returns Decoded color.
 */
function decodeAbgr8(color) {
    return {
        r: (color >>> 24) / 0xff,
        g: (color >>> 16 & 0xff) / 0xff,
        b: (color >>> 8 & 0xff) / 0xff,
        a: (color & 0xff) / 0xff
    };
}
/**
 * Encodes a color components into four 8 bit numbers packed into 32-bit one.
 *
 * @param c The color to be encoded.
 * @returns The color as 32-bit integer.
 */
function encodeRgba8(c) {
    return (c.r * 0xff |
        (c.g * 0xff << 8) |
        (c.b * 0xff << 16) |
        (c.a * 0xff << 24));
}
/**
 * Checks if a color is completely opaque.
 *
 * @param color The color to be checked.
 * @returns `true` if the color is opaque and `false` otherwise.
 */
function isOpaque(color) {
    return color.a === 1;
}


/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return extractPoints; });
/* harmony import */ var _tile_world_coordinates_converter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(40);
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43);
/* harmony import */ var _extract_styles__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(45);



/**
 * Utility method for getting point specific style details from a zoom slice.
 * To be used as a zoom slice style converter for style extractor.
 */
function convertZoomSliceToStyle(slice, styleBase) {
    const style = slice.point;
    return style && style.icon ? Object.assign({}, styleBase, { imageId: style.icon.id, 
        // Offsets are specified in the coordinate system with top-to-bottom Y axe, so `1 - style.anchorY` instead
        // of `style.anchorY` is used.
        offset: _math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](-style.anchorX * style.icon.width, (style.anchorY - 1) * style.icon.width), width: style.icon.width }) :
        undefined;
}
/**
 * Utility method for getting points from API tile response.
 */
function* extractPoints(tile, decodedApiTile, tileMinZoom, tileMaxZoom) {
    const points = decodedApiTile.points;
    if (points) {
        const converter = new _tile_world_coordinates_converter__WEBPACK_IMPORTED_MODULE_0__["default"](tile);
        for (let i = 0; i < points.classId.length; i++) {
            yield {
                position: converter.toWorldCoordinates(points.coordsx[i], points.coordsy[i]),
                styles: [
                    ...Object(_extract_styles__WEBPACK_IMPORTED_MODULE_2__["default"])(decodedApiTile.presentation, points.classId[i], convertZoomSliceToStyle, tileMinZoom, tileMaxZoom)
                ]
            };
        }
    }
}


/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isTileEdgeCoordinates", function() { return isTileEdgeCoordinates; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TileWorldCoordinatesConverter; });
/* harmony import */ var _tile_based_adapter_util_tile_system__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41);
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43);
/* harmony import */ var _math_scalar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(42);



// Tiles from API coordinates are defined in [-0x4000; 0x3FFF] range. See tile.proto for details.
const TILE_MIN_COORDINATE = -0x4000;
const TILE_MAX_COORDINATE = 0x3FFF;
/**
 * Check if point with specified coordinates lays on an edge of a tile.
 */
function isTileEdgeCoordinates(tileXCoordinate, tileYCoordinate) {
    return (tileXCoordinate === TILE_MIN_COORDINATE ||
        tileXCoordinate === TILE_MAX_COORDINATE ||
        tileYCoordinate === TILE_MIN_COORDINATE ||
        tileYCoordinate === TILE_MAX_COORDINATE);
}
/**
 * Coordinates converter, from tile units (taking into account tile position) to world units.
 */
class TileWorldCoordinatesConverter {
    constructor(tile) {
        const worldTileSystem = new _tile_based_adapter_util_tile_system__WEBPACK_IMPORTED_MODULE_0__["default"](tile.zoom);
        const tileOffset = worldTileSystem.getTileOffset(tile);
        const tileSize = worldTileSystem.getTileSize();
        const tileCenterOffset = tileSize / 2;
        this._tileCenter = _math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](tileOffset.x + tileCenterOffset, tileOffset.y - tileCenterOffset);
        this._tileWorldRatio = tileSize / (TILE_MAX_COORDINATE - TILE_MIN_COORDINATE);
    }
    /**
     * @return World's x coordinate that corresponds to the tile's one.
     */
    toWorldXCoordinate(tileXCoordinate) {
        return Object(_math_scalar__WEBPACK_IMPORTED_MODULE_2__["clamp"])(this._tileCenter.x + tileXCoordinate * this._tileWorldRatio, -1, 1);
    }
    /**
     * @return World's y coordinate that corresponds to the tile's one.
     */
    toWorldYCoordinate(tileYCoordinate) {
        return Object(_math_scalar__WEBPACK_IMPORTED_MODULE_2__["clamp"])(this._tileCenter.y - tileYCoordinate * this._tileWorldRatio, -1, 1);
    }
    /**
     * @return World's z coordinate that corresponds to the tile's one.
     */
    toWorldZCoordinate(tileZCoordinate) {
        return tileZCoordinate * this._tileWorldRatio;
    }
    /**
     * @return World's coordinates that corresponds to the tile's ones.
     */
    toWorldCoordinates(tileXCoordinate, tileYCoordinate) {
        return _math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](this.toWorldXCoordinate(tileXCoordinate), this.toWorldYCoordinate(tileYCoordinate));
    }
}


/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isParent", function() { return isParent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TileCoordinateSystem; });
/* harmony import */ var _math_scalar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(42);

/**
 * @return `true` if the first param overlaps the second in tile hierarchy.
 */
function isParent(potentialParent, possibleChild) {
    const zoomDiff = possibleChild.zoom - potentialParent.zoom;
    return zoomDiff > 0 &&
        possibleChild.x >> zoomDiff === potentialParent.x &&
        possibleChild.y >> zoomDiff === potentialParent.y;
}
class TileCoordinateSystem {
    constructor(zoom) {
        this._zoom = Math.ceil(Object(_math_scalar__WEBPACK_IMPORTED_MODULE_0__["clamp"])(zoom, 0, 31));
        this._tileSize = 2 / (1 << this._zoom);
    }
    getZoom() {
        return this._zoom;
    }
    /**
     * @return Tile side length in units of the world coordinate system.
     */
    getTileSize() {
        return this._tileSize;
    }
    /**
     * @return Top left corner coordinates of the tile.
     */
    getTileOffset(tile) {
        return {
            x: this.getTileSize() * tile.x - 1,
            y: 1 - this.getTileSize() * tile.y
        };
    }
    toTileCoordinates(worldCoordinates) {
        return {
            x: (worldCoordinates.x + 1) / this._tileSize,
            y: (1 - worldCoordinates.y) / this._tileSize
        };
    }
}


/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clamp", function() { return clamp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cycleRestrict", function() { return cycleRestrict; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mix", function() { return mix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "smoothStep", function() { return smoothStep; });
/**
 * Clamps a value to a given range.
 *
 * @param x The value.
 * @param min Start of the range.
 * @param max End of the range.
 * @returns Clamped value.
 */
function clamp(x, min, max) {
    return min < x ? x < max ? x : max : min;
}
/**
 * Restricts a value to a given cycled range, i.e. ends of the range are
 * equivalent. E.g. like angles can be restricted to any range of size `2 * PI`.
 *
 * @param x The value.
 * @param min Start of the range.
 * @param max End of the range.
 * @returns Restricted value.
 */
function cycleRestrict(x, min, max) {
    const d = max - min;
    const s = (x - min) / (max - min);
    return min + d * (s - Math.floor(s));
}
/**
 * Linear interpolation.
 *
 * @param min Value that correspond to 0% progress.
 * @param max Value that correspond to 100% progress.
 * @param progress In 0..1.0 range that maps to 0..100% progress. It is allowed to pass a value
 *      outside of this range, that means progress greater then 100% or negative progress.
 */
function mix(min, max, progress) {
    return (1 - progress) * min + progress * max;
}
/**
 * A step function with a smooth transition between given edges. Completely
 * analogous to `smoothstep` in GLSL (GLSL ES 1.0 §8.3).
 *
 * @param edge1 The smaller edge.
 * @param edge2
 * @param x `0` if `x < edge1`, `1` if `x > edge2` and an interpolated value for
 *      `edge1 < x < edge2`.
 */
function smoothStep(edge1, edge2, x) {
    const factor = clamp((x - edge1) / (edge2 - edge1), 0, 1);
    return factor * factor * (3 - 2 * factor);
}


/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZERO", function() { return ZERO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ORIGIN", function() { return ORIGIN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POSITIVE_X", function() { return POSITIVE_X; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NEGATIVE_X", function() { return NEGATIVE_X; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POSITIVE_Y", function() { return POSITIVE_Y; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NEGATIVE_Y", function() { return NEGATIVE_Y; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "areEqual", function() { return areEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "areCollinear", function() { return areCollinear; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "areFuzzyEqual", function() { return areFuzzyEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mulv", function() { return mulv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "muln", function() { return muln; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "divv", function() { return divv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "divn", function() { return divn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mod", function() { return mod; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mix", function() { return mix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate45", function() { return rotate45; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate90", function() { return rotate90; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateNeg90", function() { return rotateNeg90; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "invert", function() { return invert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "length", function() { return length; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distance", function() { return distance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalize", function() { return normalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convert", function() { return convert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return dot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "crossZ", function() { return crossZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EMPTY", function() { return EMPTY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UNIT_BBOX", function() { return UNIT_BBOX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createBBox2", function() { return createBBox2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copyBBox2", function() { return copyBBox2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bboxesOverlap", function() { return bboxesOverlap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pointIsInBBox", function() { return pointIsInBBox; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeBBoxForPoints", function() { return computeBBoxForPoints; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "X_AXIS", function() { return X_AXIS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Y_AXIS", function() { return Y_AXIS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLineFromPoints", function() { return getLineFromPoints; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSignedDistanceToLine", function() { return getSignedDistanceToLine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createExtent2", function() { return createExtent2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copyExtent2", function() { return copyExtent2; });
/* harmony import */ var _util_fuzzy_equal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(44);

/**
 * Creates a new vector and initializes it with given components.
 *
 * @param x X component of the vector.
 * @param y Y component of the vector.
 * @returns The vector.
 */
function create(x, y) {
    return { x, y };
}
const ZERO = create(0, 0);
const ORIGIN = ZERO;
const POSITIVE_X = create(1, 0);
const NEGATIVE_X = create(-1, 0);
const POSITIVE_Y = create(0, 1);
const NEGATIVE_Y = create(0, -1);
/**
 * Copies a vector to another one.
 *
 * @param src The source vector.
 * @param dst The vector the source vector will be copied to.
 * @returns `dst`.
 */
function copy(src, dst = create(0, 0)) {
    dst.x = src.x;
    dst.y = src.y;
    return dst;
}
/**
 * Checks if two vectors are strictly equal component-wise.
 *
 * @param v1 The first vector.
 * @param v2 The second vector.
 * @returns `true` if the vectors are equal and `false` otherwise.
 */
function areEqual(v1, v2) {
    return v1.x === v2.x && v1.y === v2.y;
}
/**
 * Checks if two vectors are collinear.
 *
 * @param v1 The first vector.
 * @param v2 The second vector.
 * @returns `true` if the vectors are collinear and `false` otherwise.
 */
function areCollinear(v1, v2) {
    return v1.x / v2.x === v1.y / v2.y;
}
/**
 * Checks if corresponding components of two vectors are all within given
 * tolerance from each other.
 *
 * @param v1 The first vector.
 * @param v2 The second vector.
 * @param tolerance The tolerance.
 * @returns `true` if the vectors are "fuzzy" equal and `false` otherwise.
 */
function areFuzzyEqual(v1, v2, tolerance = _util_fuzzy_equal__WEBPACK_IMPORTED_MODULE_0__["DEFAULT_TOLERANCE"]) {
    return (Object(_util_fuzzy_equal__WEBPACK_IMPORTED_MODULE_0__["default"])(v1.x, v2.x, tolerance) &&
        Object(_util_fuzzy_equal__WEBPACK_IMPORTED_MODULE_0__["default"])(v1.y, v2.y, tolerance));
}
/**
 * Adds two vector and stores the result into a third one, i.e. `dst = a + b`.
 *
 * @param a The first vector.
 * @param b The second vector.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function add(a, b, dst = create(0, 0)) {
    dst.x = a.x + b.x;
    dst.y = a.y + b.y;
    return dst;
}
/**
 * Subtracts a vector from another one and stores the result to a third one, i.e.
 * `dst = a - b`.
 *
 * @param a The minuend vector.
 * @param b The subtrahend vector.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function sub(a, b, dst = create(0, 0)) {
    dst.x = a.x - b.x;
    dst.y = a.y - b.y;
    return dst;
}
/**
 * Multiplies two vectors component-wise and stores the result into a third one.
 *
 * @param a The first vector.
 * @param b The second vector.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function mulv(a, b, dst = create(0, 0)) {
    dst.x = a.x * b.x;
    dst.y = a.y * b.y;
    return dst;
}
/**
 * Multiplies a vector by a scalar and stores the result into a third vector.
 *
 * @param a The vector.
 * @param n The scalar.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function muln(a, n, dst = create(0, 0)) {
    dst.x = a.x * n;
    dst.y = a.y * n;
    return dst;
}
/**
 * Divides a vector by another one component wise and stores the result into a
 * third one.
 *
 * @param a The dividend vector.
 * @param b The divisor vector.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function divv(a, b, dst = create(0, 0)) {
    dst.x = a.x / b.x;
    dst.y = a.y / b.y;
    return dst;
}
/**
 * Divides a vector by a scalar and stores the result into a third vector.
 *
 * @param a The dividend vector.
 * @param n The scalar.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function divn(a, n, dst = create(0, 0)) {
    dst.x = a.x / n;
    dst.y = a.y / n;
    return dst;
}
/**
 * Calculates the reminder after division of a's components by n and stores the result into a third vector.
 *
 * @param a The dividend vector.
 * @param n The scalar.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function mod(a, n, dst = create(0, 0)) {
    dst.x = a.x % n;
    dst.y = a.y % n;
    return dst;
}
/**
 * Linearly interpolates between two vectors, i.e. computes
 * `(1 - factor) * a + factor * b`, and writes the result into a third vector.
 *
 * @param a The first vector.
 * @param b The second vector.
 * @param factor The interpolation factor.
 * @param dst The vector the result will be written to.
 * @returns `dst`.
 */
function mix(a, b, factor, dst = create(0, 0)) {
    dst.x = (1 - factor) * a.x + factor * b.x;
    dst.y = (1 - factor) * a.y + factor * b.y;
    return dst;
}
/**
 * Rotates a vector by a given angle and stores the result into a second vector.
 * Positive direction is from +X to +Y.
 *
 * @param v The vector to rotate.
 * @param angle The angle of rotation.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function rotate(v, angle, dst = create(0, 0)) {
    const x = v.x;
    const y = v.y;
    const angleCos = Math.cos(angle);
    const angleSin = Math.sin(angle);
    dst.x = angleCos * x - angleSin * y;
    dst.y = angleSin * x + angleCos * y;
    return dst;
}
/**
 * Rotates a vector by 45 degrees and stores the result into a second vector.
 * Analogous to `rotate(v, Math.PI / 4, dst)`, but faster.
 *
 * @param v The vector to rotate.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function rotate45(v, dst = create(0, 0)) {
    const y = v.y;
    const s = Math.SQRT1_2;
    dst.y = s * v.x + s * v.y;
    dst.x = s * v.x - s * y;
    return dst;
}
/**
 * Rotates a vector by 90 degrees and stores the result into a second vector.
 * Analogous to `rotate(v, Math.PI / 2, dst)`, but faster.
 *
 * @param v The vector to rotate.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function rotate90(v, dst = create(0, 0)) {
    const y = v.y;
    dst.y = v.x;
    dst.x = -y;
    return dst;
}
/**
 * Rotates a vector by -90 degrees and stores the result into a second vector.
 * Analogous to `rotate(v, -Math.PI / 2, dst)`, but faster.
 *
 * @param v The vector to rotate.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function rotateNeg90(v, dst = create(0, 0)) {
    const y = v.y;
    dst.y = -v.x;
    dst.x = y;
    return dst;
}
/**
 * Inverts signs of components of a vector and stores the result into a second
 * vector. Analogous to `rotate(v, Math.PI, dst)` (or `rotate(v, -Math.PI, dst)`,
 * which is the same), but faster.
 *
 * @param v The vector to invert.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function invert(v, dst = create(0, 0)) {
    dst.x = -v.x;
    dst.y = -v.y;
    return dst;
}
/**
 * Computes length of a vector.
 *
 * @param v The vector.
 * @returns The length.
 */
function length(v) {
    return Math.hypot(v.x, v.y);
}
/**
 * Computes distance between ends of two vectors.
 *
 * @param a The first vector.
 * @param b The second vector.
 * @returns The distance, i.e. `length(sub(a, b))`.
 */
function distance(a, b) {
    return Math.hypot(a.x - b.x, a.y - b.y);
}
/**
 * Divides a vector by its length (thus making it a unit vector) and stores the
 * result to another one.
 *
 * @param v The vector to be normalized.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function normalize(v, dst = create(0, 0)) {
    return divn(v, length(v), dst);
}
/**
 * Converts each component of vector.
 *
 * @param v The vector to be converted.
 * @param converter The component converter.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function convert(v, converter, dst = create(0, 0)) {
    dst.x = converter(v.x);
    dst.y = converter(v.y);
    return dst;
}
/**
 * Computes dot product of two vectors.
 *
 * @param a The first vector.
 * @param b The second vector.
 * @returns The dot product.
 */
function dot(a, b) {
    return a.x * b.x + a.y * b.y;
}
/**
 * Computes Z-component of a cross product of two vectors.
 *
 * @param a The first vector.
 * @param b The second vector.
 * @returns Z-component of the cross product.
 */
function crossZ(a, b) {
    return a.x * b.y - a.y * b.x;
}
const EMPTY = {
    minX: 0,
    maxX: 0,
    minY: 0,
    maxY: 0
};
const UNIT_BBOX = {
    minX: -1,
    maxX: 1,
    minY: -1,
    maxY: 1
};
/**
 * Creates a new bbox and initializes it with given components.
 *
 * @param minX Left border of the bbox.
 * @param maxX Right border of the bbox.
 * @param minY Lower border of the bbox.
 * @param maxY Upper border of the bbox.
 * @returns The bbox.
 */
function createBBox2(minX, maxX, minY, maxY) {
    return { minX, maxX, minY, maxY };
}
/**
 * Copies a bbox to another one.
 *
 * @param src The source bbox.
 * @param dst The bbox the source bbox will be copied to.
 * @returns `dst`.
 */
function copyBBox2(src, dst = createBBox2(0, 0, 0, 0)) {
    dst.minX = src.minX;
    dst.maxX = src.maxX;
    dst.minY = src.minY;
    dst.maxY = src.maxY;
    return dst;
}
/**
 * Checks if two bounding boxes overlap.
 *
 * @param bbox1 A bounding box.
 * @param bbox2 Another bounding box.
 * @returns `true` if given bounding boxes do overlap and `false` otherwise.
 */
function bboxesOverlap(bbox1, bbox2) {
    let leftBBox;
    let rightBBox;
    if (bbox1.minX < bbox2.minX) {
        leftBBox = bbox1;
        rightBBox = bbox2;
    }
    else {
        leftBBox = bbox2;
        rightBBox = bbox1;
    }
    let topBBox;
    let bottomBBox;
    if (bbox1.maxY > bbox2.maxY) {
        topBBox = bbox1;
        bottomBBox = bbox2;
    }
    else {
        topBBox = bbox2;
        bottomBBox = bbox1;
    }
    return rightBBox.minX < leftBBox.maxX && bottomBBox.maxY > topBBox.minY;
}
/**
 * Checks if a 2D point lies inside a bounding box or on its border.
 *
 * @param point The point.
 * @param bbox The bounding box.
 * @returns `true` if the point is inside of the box and `false` otherwise.
 */
function pointIsInBBox(point, bbox) {
    return bbox.minX <= point.x && point.x <= bbox.maxX &&
        bbox.minY <= point.y && point.y <= bbox.maxY;
}
/**
 * Computes bounding box of an array of points and stores it to a given object.
 *
 * @param points The array of points.
 * @param dst The bbox the result will be written to. Left unmodified if the array
 *      of points is empty.
 * @returns `dst`.
 */
function computeBBoxForPoints(points, dst = { minX: 0, maxX: 0, minY: 0, maxY: 0 }) {
    if (points.length === 0) {
        return dst;
    }
    dst.minX = dst.maxX = points[0].x;
    dst.minY = dst.maxY = points[0].y;
    for (let i = 1; i < points.length; ++i) {
        const { x, y } = points[i];
        if (x < dst.minX) {
            dst.minX = x;
        }
        if (x > dst.maxX) {
            dst.maxX = x;
        }
        if (y < dst.minY) {
            dst.minY = y;
        }
        if (y > dst.maxY) {
            dst.maxY = y;
        }
    }
    return dst;
}
const X_AXIS = {
    origin: ORIGIN,
    tangent: POSITIVE_X
};
const Y_AXIS = {
    origin: ORIGIN,
    tangent: POSITIVE_Y
};
function getLineFromPoints(p1, p2, dst = {
    origin: create(0, 0),
    tangent: create(0, 0)
}) {
    copy(p1, dst.origin);
    sub(p2, p1, dst.tangent);
    return dst;
}
/**
 * Computes signed distance from a point to a line.
 *
 * @param p The point.
 * @param l1 Start point of the line.
 * @param l2 End point of the line.
 * @returns Distance from the point to the line. It'll be greater than 0 if the
 *      point lies to the left of the line and less than 0 otherwise.
 */
function getSignedDistanceToLine(p, l) {
    const tangent = l.tangent;
    return dot(sub(p, l.origin), create(-tangent.y, tangent.x)) / length(tangent);
}
/**
 * Creates a new extent and initializes it with given components.
 *
 * @param width Width of the extent.
 * @param Height Height of the extent.
 * @returns The extent.
 */
function createExtent2(width, height) {
    return { width, height };
}
/**
 * Copies an extent to another one.
 *
 * @param src The source bbox.
 * @param dst The extent the source extent will be copied to.
 * @returns `dst`.
 */
function copyExtent2(src, dst = createExtent2(0, 0)) {
    dst.width = src.width;
    dst.height = src.height;
    return dst;
}


/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_TOLERANCE", function() { return DEFAULT_TOLERANCE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return areFuzzyEqual; });
const DEFAULT_TOLERANCE = 1e-6;
/**
 * Checks if two floating point number are within a tolerance from each other.
 *
 * @param a The first number.
 * @param b The second number.
 * @param tolerance The tolerance.
 * @returns `true` if the number are within the tolerance and `false` otherwise.
 */
function areFuzzyEqual(a, b, tolerance = DEFAULT_TOLERANCE) {
    const d = a - b;
    return -tolerance < d && d < tolerance;
}


/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return extractStyles; });
/**
 * One object is used as a buffer to pass common properties to style extractors,
 * to prevent creation of many temporary objects.
 */
const styleBase = {
    minZoom: 0,
    maxZoom: 0,
    zIndex: 0
};
/**
 * Utility method for parsing styles from decoded API tile response. It handles some common logic regarding
 * zoom slices and delegates fetching style details to a StyleHandler.
 * Tile min/max zoom params are used to set proper styles to be used in over/under zooming, still adhering
 * the API convention where missing zoom range slice means object invisibility.
 */
function* extractStyles(presentations, classId, toStyle, tileMinZoom, tileMaxZoom, presentationName = 'map') {
    const presentation = presentations.find((presentation) => presentation.name === presentationName) ||
        presentations[0];
    const styleClass = presentation.classes[classId];
    if (styleClass) {
        for (const slice of styleClass.slices) {
            if (slice.visibility) {
                styleBase.minZoom = slice.visibility.min === tileMinZoom ? -Infinity : slice.visibility.min;
                styleBase.maxZoom = slice.visibility.max === tileMaxZoom ? +Infinity : slice.visibility.max;
                styleBase.zIndex = slice.zIndex;
                const style = toStyle(slice, styleBase);
                if (style) {
                    yield style;
                }
            }
        }
    }
}


/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return extractPolylines; });
/* harmony import */ var _proto_aliases__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14);
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43);
/* harmony import */ var _tile_world_coordinates_converter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(40);
/* harmony import */ var _extract_styles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(45);
/* harmony import */ var _util_color__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(38);
/* harmony import */ var _util_polyline__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(47);







const JOINS = {
    [_proto_aliases__WEBPACK_IMPORTED_MODULE_0__["Presentation"].Class.LineStyle.JoinStyle.JoinMiter]: 0 /* MITER */,
    [_proto_aliases__WEBPACK_IMPORTED_MODULE_0__["Presentation"].Class.LineStyle.JoinStyle.JoinRound]: 1 /* ROUND */,
    [_proto_aliases__WEBPACK_IMPORTED_MODULE_0__["Presentation"].Class.LineStyle.JoinStyle.JoinBevel]: 2 /* BEVEL */
};
const CAPS = {
    [_proto_aliases__WEBPACK_IMPORTED_MODULE_0__["Presentation"].Class.LineStyle.CapStyle.CapBevel]: 0 /* BUTT */,
    [_proto_aliases__WEBPACK_IMPORTED_MODULE_0__["Presentation"].Class.LineStyle.CapStyle.CapSquare]: 2 /* SQUARE */,
    [_proto_aliases__WEBPACK_IMPORTED_MODULE_0__["Presentation"].Class.LineStyle.CapStyle.CapRound]: 1 /* ROUND */
};
function extractPolylineStyle(zoomSlice, styleBase) {
    const inlineStyle = (zoomSlice.line && zoomSlice.line.line) || (zoomSlice.poly && zoomSlice.poly.contour);
    const outlineStyle = zoomSlice.line && zoomSlice.line.outline;
    return inlineStyle || outlineStyle ? Object.assign({}, styleBase, { inline: inlineStyle ? {
            strokeColor: inlineStyle.pattern ? _util_color__WEBPACK_IMPORTED_MODULE_4__["TRANSPARENT_BLACK"] : Object(_util_color__WEBPACK_IMPORTED_MODULE_4__["decodeAbgr8"])(inlineStyle.color),
            strokeWidth: inlineStyle.width,
            join: JOINS[inlineStyle.joins],
            startCap: CAPS[inlineStyle.caps],
            endCap: CAPS[inlineStyle.caps],
            dash: inlineStyle.dash ? {
                fill: inlineStyle.dash.dashes[0].fill,
                gap: inlineStyle.dash.dashes[0].gap
            } : undefined,
            pattern: inlineStyle.pattern ? {
                imageId: inlineStyle.pattern.id,
                width: inlineStyle.pattern.width,
                height: inlineStyle.width
            } : undefined
        } : undefined, outline: outlineStyle ? {
            strokeColor: outlineStyle.pattern ? _util_color__WEBPACK_IMPORTED_MODULE_4__["TRANSPARENT_BLACK"] : Object(_util_color__WEBPACK_IMPORTED_MODULE_4__["decodeAbgr8"])(outlineStyle.color),
            strokeWidth: outlineStyle.width,
            join: JOINS[outlineStyle.joins],
            startCap: CAPS[outlineStyle.caps],
            endCap: CAPS[outlineStyle.caps],
            dash: outlineStyle.dash ? {
                fill: outlineStyle.dash.dashes[0].fill,
                gap: outlineStyle.dash.dashes[0].gap
            } : undefined
        } : undefined }) : undefined;
}
function* extractPolylines(tile, decodedApiTile, tileMinZoom, tileMaxZoom) {
    const polylines = decodedApiTile.polylines;
    if (!polylines) {
        return;
    }
    const preparePolyline = (vertices, classId, zOrder, forcedStartCap, forcedEndCap) => {
        const styles = [...Object(_extract_styles__WEBPACK_IMPORTED_MODULE_3__["default"])(decodedApiTile.presentation, classId, extractPolylineStyle, tileMinZoom, tileMaxZoom)];
        for (const style of styles) {
            style.zIndex += zOrder;
            if (forcedStartCap !== undefined) {
                if (style.inline) {
                    style.inline.startCap = forcedStartCap;
                }
                if (style.outline) {
                    style.outline.startCap = forcedStartCap;
                }
            }
            if (forcedEndCap !== undefined && style.inline) {
                if (style.inline) {
                    style.inline.endCap = forcedEndCap;
                }
                if (style.outline) {
                    style.outline.endCap = forcedEndCap;
                }
            }
        }
        return { vertices, styles };
    };
    const converter = new _tile_world_coordinates_converter__WEBPACK_IMPORTED_MODULE_2__["default"](tile);
    for (let lineIdx = 0, vertexIdx = 0; lineIdx < polylines.lineSize.length; ++lineIdx) {
        const zOrderBegin = polylines.zOrderBegin[lineIdx] | 0;
        const zOrderEnd = polylines.zOrderEnd[lineIdx] | 0;
        const size = polylines.lineSize[lineIdx];
        const vertices = new Array(size);
        let forcedStartCap;
        let forcedEndCap;
        let x = 0;
        let y = 0;
        for (let i = 0; i < size; ++i, ++vertexIdx) {
            x += polylines.coordsx[vertexIdx];
            y += polylines.coordsy[vertexIdx];
            // polylines between tiles that are actually one line on the map overlaps themself at the edge,
            // to handle this case their caps are forcible removed, it is kind of hack and generally it is incorrect,
            // but works well enough for the data being come from API.
            if (i === 0 && Object(_tile_world_coordinates_converter__WEBPACK_IMPORTED_MODULE_2__["isTileEdgeCoordinates"])(x, y)) {
                forcedStartCap = 0 /* BUTT */;
            }
            if (i === size - 1 && Object(_tile_world_coordinates_converter__WEBPACK_IMPORTED_MODULE_2__["isTileEdgeCoordinates"])(x, y)) {
                forcedEndCap = 0 /* BUTT */;
            }
            vertices[i] = _math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](converter.toWorldXCoordinate(x), converter.toWorldYCoordinate(y));
        }
        if (zOrderBegin !== zOrderEnd) {
            const verticesSplit = Object(_util_polyline__WEBPACK_IMPORTED_MODULE_5__["splitPolyline"])(vertices);
            yield preparePolyline(verticesSplit[0], polylines.classId[lineIdx], zOrderBegin, forcedStartCap, forcedEndCap);
            yield preparePolyline(verticesSplit[1], polylines.classId[lineIdx], zOrderEnd, forcedStartCap, forcedEndCap);
        }
        else {
            yield preparePolyline(vertices, polylines.classId[lineIdx], zOrderBegin, forcedStartCap, forcedEndCap);
        }
    }
}


/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "splitPolyline", function() { return splitPolyline; });
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43);
/* harmony import */ var _fuzzy_equal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(44);



/**
 * Spilts a polyline in two parts: two polylines covering the input polyline with a coincident spilt point.
 *
 * @param polyline Polyline to be separated.
 * @param proportion Length of the first part as percentage (0..1) of the length of the polyline.
 * @returns Two polylines.
 */
function splitPolyline(polyline, proportion = 0.5) {
    const subLengths = new Array(polyline.length);
    subLengths[0] = 0;
    for (let i = 1; i < polyline.length; ++i) {
        subLengths[i] = subLengths[i - 1] + _math_vector2__WEBPACK_IMPORTED_MODULE_0__["distance"](polyline[i - 1], polyline[i]);
    }
    const splitLength = proportion * subLengths[polyline.length - 1];
    const splitIndex = subLengths.findIndex((length) => length >= splitLength) || 1; // "|| 1" to handle 0-length case
    const splitPoint = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["mix"](polyline[splitIndex - 1], polyline[splitIndex], 
    // "|| 1" to handle 0-length case
    (splitLength - subLengths[splitIndex - 1]) / ((subLengths[splitIndex] - subLengths[splitIndex - 1]) || 1));
    const leftPartLength = splitIndex + 1;
    const leftPart = new Array(leftPartLength);
    for (let i = 0; i < splitIndex; ++i) {
        leftPart[i] = polyline[i];
    }
    leftPart[splitIndex] = splitPoint;
    const isSplitExistingPoint = Object(_math_vector2__WEBPACK_IMPORTED_MODULE_0__["areFuzzyEqual"])(polyline[splitIndex], splitPoint, splitLength * _fuzzy_equal__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_TOLERANCE"]);
    const rightPartLength = polyline.length - splitIndex;
    const rightPart = new Array(rightPartLength + (isSplitExistingPoint ? 0 : 1));
    let rightPartIndex = 0;
    // don't include splitPoint if splitting has happened at a polyline's point
    if (!isSplitExistingPoint) {
        rightPart[rightPartIndex++] = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["copy"](splitPoint);
    }
    for (let i = 0; i < rightPartLength; i++) {
        rightPart[rightPartIndex++] = polyline[splitIndex + i];
    }
    return [leftPart, rightPart];
}


/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PolygonBufferWriter; });
/* harmony import */ var _util_buffer_writer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(49);
/* harmony import */ var _util_triangulate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(53);
/* harmony import */ var _polygon_attribute_mapping__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(55);
/* harmony import */ var _util_color__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(38);
/* harmony import */ var _util_z_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(59);





/**
 * Writer of geometry data of labels.
 */
class PolygonBufferWriter extends _util_buffer_writer__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(_polygon_attribute_mapping__WEBPACK_IMPORTED_MODULE_2__["POLYGON_ATTRIBUTE_MAPPING"].vertexByteSize);
    }
    writePolygon(polygon, zIndex, color) {
        const zIndexInt24 = Object(_util_z_index__WEBPACK_IMPORTED_MODULE_4__["intToZIndex"])(zIndex);
        const colorRgba8 = Object(_util_color__WEBPACK_IMPORTED_MODULE_3__["encodeRgba8"])(color);
        for (const ring of polygon.vertexRings) {
            for (const vertex of ring) {
                this._writeWorldCoordinate(vertex);
                this._writeWord(colorRgba8);
                this._writeFloat32(zIndexInt24);
            }
        }
        this.writeIndices(Object(_util_triangulate__WEBPACK_IMPORTED_MODULE_1__["default"])(polygon.vertexRings));
        return this.endMesh();
    }
}


/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WORD_BYTE_SIZE", function() { return WORD_BYTE_SIZE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return BufferWriter; });
/* harmony import */ var _gputypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(50);
/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51);


const WORD_BYTE_SIZE = 4;
/**
 * Generates triangles of a fan of a given length as if it is continuous and
 * starts with 0.
 *
 * @param count Number of vertices in the fan.
 * @returns Iterator over indices of triangles.
 */
function* generateFan(count) {
    for (let i = 2; i < count; ++i) {
        yield 0;
        yield i - 1;
        yield i;
    }
}
/**
 * Generates triangles of a strip of a given length as if it is continuous and
 * starts with 0.
 *
 * @param count Number of vertices in the fan.
 * @returns Iterator over indices of triangles.
 */
function* generateStrip(count) {
    yield 0;
    yield 1;
    yield 2;
    let offset0 = 1;
    let offset1 = 2;
    for (let i = 3; i < count; ++i) {
        yield i - offset0;
        yield i - offset1;
        yield i;
        const tmp = offset0;
        offset0 = offset1;
        offset1 = tmp;
    }
}
/**
 * Vertex buffer helper class, that supports sequential writing interface and takes over some single-buffer operations.
 * It is an integral part of the buffer writer class and its main purpose is to make the writer's code easier.
 */
class VertexBuffer {
    /**
     * @param byteSize Initial size of the buffer in bytes. As it gets filled by words
     *      the size must be a multiply of 4.
     */
    constructor(byteSize) {
        this._nextWordOffset = 0;
        this._initBuffers(byteSize);
    }
    /**
     * @returns true if there is no free space remaining in buffer.
     */
    get isFull() {
        return this._nextWordOffset >= this._uint32View.length;
    }
    /**
     * @returns The number of words (4 bytes values) already written.
     */
    get occupiedSize() {
        return this._nextWordOffset;
    }
    /**
     * @return Max number of bytes this buffer is able to store. It can be increased by the extend() method.
     */
    get byteSize() {
        return this._uint32View.byteLength;
    }
    /**
     * Extends buffer to the new size. The new size must be not less than current one and it must be a multiply of 4.
     */
    extend(newByteSize) {
        // TODO assert newByteLength is larger than current _arrayBuffer and its is a multiply of the word size.
        const oldUint32View = this._uint32View;
        this._initBuffers(newByteSize);
        this._uint32View.set(oldUint32View);
    }
    /**
     * Appends value as a uint32 number.
     */
    pushUint32(value) {
        this._uint32View[this._nextWordOffset++] = value;
    }
    /**
     * Appends value as a float32 number.
     */
    pushFloat32(value) {
        this._float32View[this._nextWordOffset++] = value;
    }
    /**
     * @returns uint8 view of this buffer. The size of the view matches the amount of written data.
     */
    asUint32Array() {
        return this._uint32View.subarray(0, this.occupiedSize);
    }
    _initBuffers(byteLength) {
        const arrayBuffer = new ArrayBuffer(byteLength);
        this._uint32View = new Uint32Array(arrayBuffer);
        this._float32View = new Float32Array(arrayBuffer);
    }
    /**
     * Moves "tail" data (from the offset specified to the end of the buffer) of one buffer to another. The cursors of
     * buffers will be appropriately updated to reflect data changes.
     */
    static transferDataTail(src, dst, srcWordOffset, dstOffset = 0) {
        const tailLength = src.occupiedSize - srcWordOffset;
        const srcTail = src._uint32View.subarray(srcWordOffset, src.occupiedSize);
        dst._uint32View.set(srcTail, dstOffset);
        dst._nextWordOffset = tailLength;
        src._nextWordOffset = srcWordOffset;
    }
}
/**
 * Index buffer helper class, that supports sequential writing interface and takes over some single-buffer operations.
 * It is an integral part of the buffer writer class and its main purpose is to make the writer's code easier.
 */
class IndexBuffer {
    /**
     * @param size Initial size of the buffer.
     */
    constructor(size) {
        this._nextIndexOffset = 0;
        this._uint16View = new Uint16Array(size);
    }
    /**
     * @returns The number of indices already written.
     */
    get occupiedSize() {
        return this._nextIndexOffset;
    }
    /**
     * @return Max number of indices this buffer is able to store. It can be increased by the extend() method.
     */
    get size() {
        return this._uint16View.length;
    }
    /**
     * Extends buffer to the new size.
     */
    extend(newSize) {
        // TODO assert newByteLength is larger than current _arrayBuffer
        const oldUint16View = this._uint16View;
        this._uint16View = new Uint16Array(newSize);
        this._uint16View.set(oldUint16View);
    }
    /**
     * Appends index to the end of the buffer.
     */
    push(index) {
        this._uint16View[this._nextIndexOffset++] = index;
    }
    /**
     * @returns uint16 view of this buffer. The size of the view matches the amount of written data.
     */
    asUint16Array() {
        return new Uint16Array(this._uint16View.buffer, 0, this.occupiedSize);
    }
    /**
     * Moves "tail" data (from the offset specified to the end of the buffer) of one buffer to another. The offsets of
     * buffers will be appropriately updated to reflect data changes.
     * baseIndex will be deducted from all moved indices.
     */
    static transferDataTail(src, dst, baseIndex, srcOffset, dstOffset = 0) {
        for (let i = srcOffset, j = dstOffset; i < src.occupiedSize; i++, j++) {
            dst._uint16View[j] = src._uint16View[i] - baseIndex;
        }
        dst._nextIndexOffset = src.occupiedSize - srcOffset;
        src._nextIndexOffset = srcOffset;
    }
}
/**
 * Base buffer writer implementation. Can write unsigned short indices and
 * provides facilities for child classes to handle writing vertex data. Defines
 * a concept of current mesh. Basically, it mean that all vertices and indices
 * written to a writer between two `endMesh` calls (or construction of the writer
 * and an `endMesh` call) must be considered belonging to one atomic piece of
 * geometry and should not be spitted between separate buffers.
 */
class BufferWriter {
    /**
     * Creates a new writer and allocates initial amount of memory to store data.
     * Also implicitly "start" a mesh.
     *
     * @param vertexByteSize
     * @param initVertexBufferSize Init size (in vertices) of growing vertex buffers.
     * @param maxVertexBufferSize Max size (in vertices) of vertex buffers.
     * @param initIndexBufferUint16Size Init size (in uint16 number) of growing index buffers.
     */
    constructor(vertexByteSize, initVertexBufferSize = 0x400, maxVertexBufferSize = 0x10000, initIndexBufferUint16Size = 0xc00) {
        this._vertexByteSize = vertexByteSize;
        this._initVertexBufferByteSize = vertexByteSize * initVertexBufferSize;
        this._maxVertexBufferByteSize = vertexByteSize * maxVertexBufferSize;
        this._initIndexBufferUint16Size = initIndexBufferUint16Size;
        this._vertexBuffer = new VertexBuffer(this._initVertexBufferByteSize);
        this._vertexBuffers = [this._vertexBuffer];
        this._indexBuffer = new IndexBuffer(this._initIndexBufferUint16Size);
        this._indexBuffers = [this._indexBuffer];
        this._currentMeshVertexOffset = 0;
        this._currentMeshIndexOffset = 0;
        this._currentMeshBaseIndex = 0;
    }
    /**
     * Writes a bunch of indices to the underlying storage as unsigned short
     * numbers. If current storage doesn't have enough space to accommodate
     * given indices, the writer will automatically resize it. The writer
     * automatically adds base index to the supplied values, so from a user
     * point of view first vertex of a mesh has index 0 and there's no need
     * to take into account it's offset while generating mesh's topology.
     *
     * @param indices Array of indices to write.
     */
    writeIndices(indices) {
        this._ensureEnoughIndexBufferSpace(indices.length);
        const buffer = this._indexBuffer;
        const baseIndex = this._currentMeshBaseIndex;
        for (let i = 0; i < indices.length; ++i) {
            buffer.push(baseIndex + indices[i]);
        }
    }
    /**
     * Generates triangle indices from an array of indices of a triangle strip
     * (as in GL) and writes generated triplets to the managed index buffer.
     * @see OpenGL ES 2.0 Spec, §2.6.1
     *
     * @param indices Indices of the strip.
     */
    writeIndicesForStrip(indices) {
        this._ensureEnoughIndexBufferSpace(3 * (indices.length - 2));
        const buffer = this._indexBuffer;
        const baseIndex = this._currentMeshBaseIndex;
        for (const i of generateStrip(indices.length)) {
            buffer.push(baseIndex + indices[i]);
        }
    }
    /**
     * Generates triangle indices from a continuous triangle strip of a given
     * length and writes generated triplets to managed index buffer.
     * @see OpenGL ES 2.0 Spec, §2.6.1
     *
     * @param indexCount
     * @param baseIndexInMesh
     */
    writeIndicesForContinuousStrip(indexCount, baseIndexInMesh = 0) {
        this._ensureEnoughIndexBufferSpace(3 * (indexCount - 2));
        const buffer = this._indexBuffer;
        const baseIndex = this._currentMeshBaseIndex + baseIndexInMesh;
        for (const i of generateStrip(indexCount)) {
            buffer.push(baseIndex + i);
        }
    }
    /**
     * Generates triangle indices from an array of indices of a triangle fan (as
     * in GL) and writes generated triplets to the managed index buffer.
     * @see OpenGL ES 2.0 Spec, §2.6.1
     *
     * @param indices Indices of the strip.
     */
    writeIndicesForFan(indices) {
        this._ensureEnoughIndexBufferSpace(3 * (indices.length - 2));
        const buffer = this._indexBuffer;
        const baseIndex = this._currentMeshBaseIndex;
        for (const i of generateFan(indices.length)) {
            buffer.push(baseIndex + indices[i]);
        }
    }
    /**
     * Generates triangle indices from a continuous triangle fan of a given length
     * and writes generated triplets to managed index buffer.
     * @see OpenGL ES 2.0 Spec, §2.6.1
     *
     * @param indexCount
     * @param baseIndexInMesh
     */
    writeIndicesForContinuousFan(indexCount, baseIndexInMesh = 0) {
        this._ensureEnoughIndexBufferSpace(3 * (indexCount - 2));
        const buffer = this._indexBuffer;
        const baseIndex = baseIndexInMesh + this._currentMeshBaseIndex;
        for (const i of generateFan(indexCount)) {
            buffer.push(baseIndex + i);
        }
    }
    /**
     * Ends current mesh and implicitly starts a new one.
     *
     * @returns Internal index of vertex and index buffers the mesh was written
     *      to and its memory location in them.
     */
    endMesh() {
        const currentMeshVertexOffset = this._currentMeshVertexOffset;
        const vertexOccupiedSize = this._vertexBuffer.occupiedSize;
        this._currentMeshVertexOffset = vertexOccupiedSize;
        this._currentMeshBaseIndex = (vertexOccupiedSize << 2) / this._vertexByteSize;
        const currentMeshIndexOffset = this._currentMeshIndexOffset;
        const indexOccupiedSize = this._indexBuffer.occupiedSize;
        this._currentMeshIndexOffset = indexOccupiedSize;
        return {
            vertexByteOffset: currentMeshVertexOffset << 2,
            vertexByteLength: vertexOccupiedSize - currentMeshVertexOffset << 2,
            indexByteOffset: currentMeshIndexOffset << 1,
            indexByteLength: indexOccupiedSize - currentMeshIndexOffset << 1,
            // We can't return actual buffer reference since it can change if
            // the buffer gets reallocated.
            bufferIndex: this._vertexBuffers.length - 1
        };
    }
    /**
     * Returns an array of currently owned buffer data. This call's better
     * made when you're done with the writer since if the writer decides to
     * resize any of the buffers some of the references in the returned array
     * may become outdated.
     */
    getBuffers() {
        return Object(_array__WEBPACK_IMPORTED_MODULE_1__["zip"])(this._vertexBuffers, this._indexBuffers, (vertexBuffer, indexBuffer) => ({
            vertexBuffer: vertexBuffer.asUint32Array(),
            indexBuffer: indexBuffer.asUint16Array()
        }));
    }
    /**
     * Returns an offset in the current vertex buffer to the location where next
     * piece of data will be written.
     */
    getCurrentVertexBufferByteOffset() {
        return this._vertexBuffer.occupiedSize << 2;
    }
    /**
     * Returns index of currently written vertex structure in the current vertex
     * buffer.
     */
    getCurrentVertexIdx() {
        return ((this._vertexBuffer.occupiedSize << 2) / this._vertexByteSize | 0) - this._currentMeshBaseIndex;
    }
    /**
     * Writes a floating point value to the current vertex buffer and advances
     * the offset by 4 bytes.
     *
     * @param value The value to be written.
     */
    _writeFloat32(value) {
        this._ensureEnoughVertexBufferSpace();
        this._vertexBuffer.pushFloat32(value);
    }
    /**
     * Writes an unsigned integer value to the current vertex buffer and advances
     * the offset by 4 bytes.
     *
     * @param value The value to be written.
     */
    _writeWord(value) {
        this._ensureEnoughVertexBufferSpace();
        this._vertexBuffer.pushUint32(value);
    }
    /**
     * Writes an unsigned short value to the current vertex buffer and advances
     * the offset by 2 bytes. Passed values will be truncated to 16 bits.
     *
     * @param value The value to be written.
     */
    _writeHalfWords(v1, v2) {
        this._writeWord(v2 << 16 | v1 & 0xffff);
    }
    /**
     * Writes an unsigned byte value to the current vertex buffer and advances
     * the offset by 1 byte. Passed values will be truncated to 8 bits.
     *
     * @param value The value to be written.
     */
    _writeBytes(v1, v2, v3, v4) {
        this._writeWord(v4 << 24 |
            (v3 & 0xff) << 16 |
            (v2 & 0xff) << 8 |
            v1 & 0xff);
    }
    /**
     * Encodes a world coordinate vector as a pair of 32-bit integers (splitting
     * them in turn into to 16-bit ones).
     *
     * @param c The world coordinate.
     */
    _writeWorldCoordinate(c) {
        // To avoid using GPU singed integer conversions we shift and scale world
        // coordinates so they're in [0, 1] range (instead of [-1, 1]) and then
        // encoded as unsigned 32 bit integers split into to 16 bit ones.
        const xUint32 = Object(_gputypes__WEBPACK_IMPORTED_MODULE_0__["floatToUint32"])(0.5 * (c.x + 1));
        const yUint32 = Object(_gputypes__WEBPACK_IMPORTED_MODULE_0__["floatToUint32"])(0.5 * (c.y + 1));
        this._writeHalfWords(xUint32 >>> 16, yUint32 >>> 16);
        this._writeHalfWords(xUint32, yUint32);
    }
    /**
     * Computes new bigger size of a vertex buffer based on its current size. By
     * default just double the current size.
     *
     * @param currentByteSize Current size of the index buffer in bytes.
     * @returns The new size.
     */
    _getNextVertexBufferByteSize(currentByteSize) {
        return currentByteSize << 1;
    }
    /**
     * Computes new bigger size of an index buffer based on its current size. By
     * default just double the current size.
     *
     * @param currentUint16Size Current size of the index buffer in shorts.
     * @returns The new size.
     */
    _getNextIndexBufferUint16Size(currentUint16Size) {
        return currentUint16Size << 1;
    }
    /**
     * Ensures that the managed vertex buffer has enough space to fit in a chunk
     * of data of a given size. Either does nothing, resizes the current vertex
     * buffer or creates entirely new pair of vertex and index buffers.
     *
     * @param valueSize Byte size of the data that needs to be accommodated by
     *      the vertex buffer.
     */
    _ensureEnoughVertexBufferSpace() {
        const vertexBuffer = this._vertexBuffer;
        if (!vertexBuffer.isFull) {
            // We have enough space, so nothing to be done.
            return;
        }
        if (vertexBuffer.byteSize < this._maxVertexBufferByteSize) {
            // If we can just resize the current vertex buffer, do that.
            this._vertexBuffer.extend(this._getNextVertexBufferByteSize(vertexBuffer.byteSize));
            return;
        }
        // If there's no enough space in the current vertex buffer and it's
        // already of maximum size, allocate new vertex and index buffers and
        // copy data of the current mesh to them from the current buffers.
        // Then make those buffer the current ones.
        const currentMeshVertexOffset = this._currentMeshVertexOffset;
        const currentMeshVertexByteSize = (vertexBuffer.occupiedSize - currentMeshVertexOffset) * 4;
        const maxVertexBufferByteSize = this._maxVertexBufferByteSize;
        if (currentMeshVertexByteSize === maxVertexBufferByteSize) {
            throw new Error('Mesh is too big to fit in.');
        }
        let newVertexBufferByteSize = this._initVertexBufferByteSize;
        // Initial vertex buffer size may be too small to accommodate the current
        // mesh, so we find next bigger size that is sufficient.
        while (newVertexBufferByteSize <= currentMeshVertexByteSize) {
            newVertexBufferByteSize = this._getNextVertexBufferByteSize(newVertexBufferByteSize);
        }
        const newVertexBuffer = new VertexBuffer(newVertexBufferByteSize);
        VertexBuffer.transferDataTail(vertexBuffer, newVertexBuffer, currentMeshVertexOffset);
        this._vertexBuffer = newVertexBuffer;
        this._vertexBuffers.push(newVertexBuffer);
        this._currentMeshVertexOffset = 0;
        const indexBuffer = this._indexBuffer;
        const currentMeshIndexOffset = this._currentMeshIndexOffset;
        const currentMeshIndexSize = indexBuffer.occupiedSize - currentMeshIndexOffset;
        let newIndexBufferSize = this._initIndexBufferUint16Size;
        // Initial index buffer size may be too small to accommodate the current
        // mesh, so we find next bigger size that is sufficient.
        while (newIndexBufferSize <= currentMeshIndexSize) {
            newIndexBufferSize = this._getNextIndexBufferUint16Size(newIndexBufferSize);
        }
        const newIndexBuffer = new IndexBuffer(newIndexBufferSize);
        // Since the current mesh's copied to the beginning of the new vertex
        // buffer, it's base index now is 0. If the mesh has any written indices,
        // they're already offset by the old base index.
        IndexBuffer.transferDataTail(indexBuffer, newIndexBuffer, this._currentMeshBaseIndex, currentMeshIndexOffset);
        this._currentMeshBaseIndex = 0;
        this._currentMeshIndexOffset = 0;
        this._indexBuffer = newIndexBuffer;
        this._indexBuffers.push(newIndexBuffer);
    }
    /**
     * Ensures that the managed index buffer has enough space to fit in a given
     * number of indices. Either does nothing or resizes the current index
     * buffer.
     *
     * @param indexCount Number of indices client wants to write to the managed
     *      index buffer.
     */
    _ensureEnoughIndexBufferSpace(indexCount) {
        const buffer = this._indexBuffer;
        const requiredSize = buffer.occupiedSize + indexCount;
        if (requiredSize <= buffer.size) {
            // We have enough space so nothing to be done.
            return;
        }
        let newBufferSize = buffer.size;
        // Let's compute new larger size of the index buffer until we can
        // accommodate incoming data.
        while (requiredSize > newBufferSize) {
            newBufferSize = this._getNextIndexBufferUint16Size(newBufferSize);
        }
        this._indexBuffer.extend(newBufferSize);
    }
}


/***/ }),
/* 50 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "floatToUint8", function() { return floatToUint8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "floatToUint16", function() { return floatToUint16; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "floatToInt16", function() { return floatToInt16; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "floatToUint32", function() { return floatToUint32; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "floatToInt32", function() { return floatToInt32; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "int32ToFloat", function() { return int32ToFloat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uint32ToFloat", function() { return uint32ToFloat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "int16ToFloat", function() { return int16ToFloat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uint16ToFloat", function() { return uint16ToFloat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uint8ToFloat", function() { return uint8ToFloat; });
const UINT8_MAX = 0xff;
const UINT16_MAX = 0xffff;
const UINT32_MAX = 0xffffffff;
function floatToUint8(x) {
    return UINT8_MAX * x | 0;
}
function floatToUint16(x) {
    return x * UINT16_MAX | 0;
}
function floatToInt16(x) {
    return (x * UINT16_MAX - 1) / 2 | 0;
}
function floatToUint32(x) {
    return x * UINT32_MAX | 0;
}
function floatToInt32(x) {
    return (x * UINT32_MAX - 1) / 2 | 0;
}
function int32ToFloat(x) {
    return (2 * x + 1) / UINT32_MAX;
}
function uint32ToFloat(x) {
    return x / UINT32_MAX;
}
function int16ToFloat(x) {
    return (2 * x + 1) / UINT16_MAX;
}
function uint16ToFloat(x) {
    return x / UINT16_MAX;
}
function uint8ToFloat(x) {
    return x / UINT8_MAX;
}


/***/ }),
/* 51 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "swap", function() { return swap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reverse", function() { return reverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shuffle", function() { return shuffle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zip", function() { return zip; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compare", function() { return compare; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertionSort", function() { return insertionSort; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mergeSort", function() { return mergeSort; });
/* harmony import */ var _comparator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52);

/**
 * Swaps two values in an array.
 *
 * @param array The array.
 * @param i Index of a value to be swapped.
 * @param j Index of a value to be swapped.
 */
function swap(array, i, j) {
    const t = array[i];
    array[i] = array[j];
    array[j] = t;
}
/**
 * Reverses order of elements in a range in an array.
 *
 * @param array The array.
 * @param start The start of the range.
 * @param end The end of the range.
 */
function reverse(array, start = 0, end = array.length) {
    for (let i = start, j = end - 1; i < j; ++i, --j) {
        swap(array, i, j);
    }
}
/**
 * Rotates a range of elements in an array by given amount.
 *
 * @param array The array.
 * @param amount The amount.
 * @param start The start of the range.
 * @param end The end of the range.
 */
function rotate(array, amount = 1, start = 0, end = array.length) {
    reverse(array, start, end);
    reverse(array, start, start + amount);
    reverse(array, start + amount, end);
}
/**
 * Copies a range of elements from a source array to a range in a destination
 * array.
 *
 * @param src The source array.
 * @param dst The destination array.
 * @param srcStart The start of the source range.
 * @param srcStart The start of the source range.
 * @param dstStart The start of the destination range.
 */
function copy(src, dst, srcStart = 0, srcEnd = src.length, dstStart = 0) {
    for (let i = srcStart, j = dstStart; i < srcEnd; ++i, ++j) {
        dst[j] = src[i];
    }
}
/**
 * Shuffles randomly a range of elements in an array.
 *
 * @param array The array.
 * @param start The start of the range.
 * @param end The end of the range.
 */
function shuffle(array, start = 0, end = array.length) {
    for (let i = start, j = i + 1; i < end; ++i, ++j) {
        swap(array, i, j + (Math.random() * (end - j) | 0));
    }
}
function zip(ts, us, zipper = (t, u) => [t, u]) {
    const l = Math.min(ts.length, us.length);
    const vs = new Array(l);
    for (let i = 0; i < l; ++i) {
        vs[i] = zipper(ts[i], us[i]);
    }
    return vs;
}
/**
 * Compares two arrays lexicographically. The order is specified be the comparator parameter.
 *
 * @param comparator Elements comparator with standard signature.
 * @param a The first array to compare.
 * @param b The second array to compare.
 * @returns 0 if all elements and lengths are equal,
 *      negative number if the first element is less then the second (lexicographically),
 *      positive number if the first element is greater then the second,
 *      if all the elements are equal the lengths are being compared.
 */
function compare(comparator, a, b) {
    const length = Math.min(a.length, b.length);
    for (let i = 0; i < length; i++) {
        const result = comparator(a[i], b[i]);
        if (result) {
            return result;
        }
    }
    return a.length - b.length;
}
/**
 * Sorts a range of elements of an array in place with insertion sort.
 *
 * @param array The array to be sorted.
 * @param comparator Comparator for array elements.
 * @param start Index of the first element in the range to be sorted.
 * @param end Index of an element behind the last element in the range to be
 *      sorted.
 */
function insertionSort(array, comparator = _comparator__WEBPACK_IMPORTED_MODULE_0__["DEFAULT_COMPARATOR"], start = 0, end = array.length) {
    for (let i = start; i < end; ++i) {
        for (let j = i; j > start && comparator(array[j - 1], array[j]) > 0; --j) {
            swap(array, j - 1, j);
        }
    }
}
const BLOCK_SIZE = 32;
/**
 * Merges two sorted ranges of an array. Stores the result into another one.
 *
 * @param src The array with the ranges to be merged.
 * @param dst The array the resulting range will be stored to.
 * @param comparator The comparator for array elements.
 * @param start Start of the first range to be merged.
 * @param middle End of the first and simultaneously start of the second range
 *      to be merged.
 * @param end End of the second range to be merged.
 * @param dstOffset Offset of merged range in the result array.
 */
function merge(src, dst, comparator, start, middle, end, dstOffset) {
    let i = dstOffset;
    let j = start;
    let k = middle;
    while (j < middle && k < end) {
        dst[i++] = comparator(src[j], src[k]) > 0 ? src[k++] : src[j++];
    }
    copy(src, dst, j, middle, i);
    copy(src, dst, k, end, i);
}
/**
 * Sorts a range of elements of an array with merge sort.
 *
 * @param array  The array to be sorted.
 * @param comparator Comparator for array elements.
 * @param end Index of an element behind the last element in the range to be
 *      sorted.
 */
function mergeSort(array, comparator = _comparator__WEBPACK_IMPORTED_MODULE_0__["DEFAULT_COMPARATOR"], start = 0, end = array.length) {
    // First and foremost: if the range is smaller than the block size, just
    // perform insertion sort on it.
    if (end - start <= BLOCK_SIZE) {
        insertionSort(array, comparator, start, end);
        return;
    }
    // First we split the given range into subranges of size BLOCK_SIZE and
    // sort every range with insertion sort.
    {
        let s = start;
        let e = s + BLOCK_SIZE;
        while (e < end) {
            insertionSort(array, comparator, s, e);
            s = e;
            e += BLOCK_SIZE;
        }
        insertionSort(array, comparator, s, end);
    }
    // TODO(dmikis): Implement in-place merge. It seems there're reasonably
    //      complex solutions out there.
    const auxArray = new Array(end - start);
    // Then we merge blocks pairs, increase block size by 2 and repeat.
    for (let blockSize = BLOCK_SIZE; blockSize < end - start; blockSize += blockSize) {
        // TODO(dmikis): Before aforementioned todo maybe implement array
        // pingponging to cut down amount of full copies.
        copy(array, auxArray, start, end);
        let i = start;
        let s = 0;
        let m = blockSize;
        let e = m + blockSize;
        while (e < end - start) {
            merge(auxArray, array, comparator, s, m, e, i);
            s = e;
            m = s + blockSize;
            e = m + blockSize;
            i += 2 * blockSize;
        }
        merge(auxArray, array, comparator, s, Math.min(m, end - start), end - start, i);
    }
}


/***/ }),
/* 52 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_COMPARATOR", function() { return DEFAULT_COMPARATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NUMERICAL_COMPARATOR", function() { return NUMERICAL_COMPARATOR; });
function DEFAULT_COMPARATOR(a, b) {
    if (a > b) {
        return 1;
    }
    if (a < b) {
        return -1;
    }
    return 0;
}
function NUMERICAL_COMPARATOR(a, b) {
    return a - b;
}


/***/ }),
/* 53 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return triangulate; });
/* harmony import */ var earcut__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(54);
/* harmony import */ var earcut__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(earcut__WEBPACK_IMPORTED_MODULE_0__);

/**
 * Triangulates complex 2D polygons with holes.
 *
 * @param polygon Polygon with holes encoded as a set of rings, with the first ring representing
 *      the outer contour and others - the holes.
 * @returns Triangle indices that correspond to vertices of all the rings as if they
 *      were flattened into a single array.
 */
function triangulate(polygon) {
    const earcutVertices = [];
    const earcutHoles = [];
    let ringCoordsOffset = 0;
    for (const ring of polygon) {
        // skip the first ring that is not a hole
        if (ringCoordsOffset !== 0) {
            earcutHoles.push(ringCoordsOffset);
        }
        for (const vertex of ring) {
            earcutVertices.push(vertex.x, vertex.y);
            ringCoordsOffset++;
        }
    }
    return earcut__WEBPACK_IMPORTED_MODULE_0___default()(earcutVertices, earcutHoles);
}


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = earcut;
module.exports.default = earcut;

function earcut(data, holeIndices, dim) {

    dim = dim || 2;

    var hasHoles = holeIndices && holeIndices.length,
        outerLen = hasHoles ? holeIndices[0] * dim : data.length,
        outerNode = linkedList(data, 0, outerLen, dim, true),
        triangles = [];

    if (!outerNode) return triangles;

    var minX, minY, maxX, maxY, x, y, invSize;

    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);

    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
    if (data.length > 80 * dim) {
        minX = maxX = data[0];
        minY = maxY = data[1];

        for (var i = dim; i < outerLen; i += dim) {
            x = data[i];
            y = data[i + 1];
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
        }

        // minX, minY and invSize are later used to transform coords into integers for z-order calculation
        invSize = Math.max(maxX - minX, maxY - minY);
        invSize = invSize !== 0 ? 1 / invSize : 0;
    }

    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);

    return triangles;
}

// create a circular doubly linked list from polygon points in the specified winding order
function linkedList(data, start, end, dim, clockwise) {
    var i, last;

    if (clockwise === (signedArea(data, start, end, dim) > 0)) {
        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);
    } else {
        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);
    }

    if (last && equals(last, last.next)) {
        removeNode(last);
        last = last.next;
    }

    return last;
}

// eliminate colinear or duplicate points
function filterPoints(start, end) {
    if (!start) return start;
    if (!end) end = start;

    var p = start,
        again;
    do {
        again = false;

        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
            removeNode(p);
            p = end = p.prev;
            if (p === p.next) break;
            again = true;

        } else {
            p = p.next;
        }
    } while (again || p !== end);

    return end;
}

// main ear slicing loop which triangulates a polygon (given as a linked list)
function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
    if (!ear) return;

    // interlink polygon nodes in z-order
    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);

    var stop = ear,
        prev, next;

    // iterate through ears, slicing them one by one
    while (ear.prev !== ear.next) {
        prev = ear.prev;
        next = ear.next;

        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
            // cut off the triangle
            triangles.push(prev.i / dim);
            triangles.push(ear.i / dim);
            triangles.push(next.i / dim);

            removeNode(ear);

            // skipping the next vertice leads to less sliver triangles
            ear = next.next;
            stop = next.next;

            continue;
        }

        ear = next;

        // if we looped through the whole remaining polygon and can't find any more ears
        if (ear === stop) {
            // try filtering points and slicing again
            if (!pass) {
                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);

            // if this didn't work, try curing all small self-intersections locally
            } else if (pass === 1) {
                ear = cureLocalIntersections(ear, triangles, dim);
                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);

            // as a last resort, try splitting the remaining polygon into two
            } else if (pass === 2) {
                splitEarcut(ear, triangles, dim, minX, minY, invSize);
            }

            break;
        }
    }
}

// check whether a polygon node forms a valid ear with adjacent nodes
function isEar(ear) {
    var a = ear.prev,
        b = ear,
        c = ear.next;

    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

    // now make sure we don't have other points inside the potential ear
    var p = ear.next.next;

    while (p !== ear.prev) {
        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0) return false;
        p = p.next;
    }

    return true;
}

function isEarHashed(ear, minX, minY, invSize) {
    var a = ear.prev,
        b = ear,
        c = ear.next;

    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear

    // triangle bbox; min & max are calculated like this for speed
    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),
        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),
        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),
        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);

    // z-order range for the current triangle bbox;
    var minZ = zOrder(minTX, minTY, minX, minY, invSize),
        maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);

    var p = ear.prevZ,
        n = ear.nextZ;

    // look for points inside the triangle in both directions
    while (p && p.z >= minZ && n && n.z <= maxZ) {
        if (p !== ear.prev && p !== ear.next &&
            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;

        if (n !== ear.prev && n !== ear.next &&
            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&
            area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }

    // look for remaining points in decreasing z-order
    while (p && p.z >= minZ) {
        if (p !== ear.prev && p !== ear.next &&
            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
            area(p.prev, p, p.next) >= 0) return false;
        p = p.prevZ;
    }

    // look for remaining points in increasing z-order
    while (n && n.z <= maxZ) {
        if (n !== ear.prev && n !== ear.next &&
            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&
            area(n.prev, n, n.next) >= 0) return false;
        n = n.nextZ;
    }

    return true;
}

// go through all polygon nodes and cure small local self-intersections
function cureLocalIntersections(start, triangles, dim) {
    var p = start;
    do {
        var a = p.prev,
            b = p.next.next;

        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {

            triangles.push(a.i / dim);
            triangles.push(p.i / dim);
            triangles.push(b.i / dim);

            // remove two nodes involved
            removeNode(p);
            removeNode(p.next);

            p = start = b;
        }
        p = p.next;
    } while (p !== start);

    return p;
}

// try splitting polygon into two and triangulate them independently
function splitEarcut(start, triangles, dim, minX, minY, invSize) {
    // look for a valid diagonal that divides the polygon into two
    var a = start;
    do {
        var b = a.next.next;
        while (b !== a.prev) {
            if (a.i !== b.i && isValidDiagonal(a, b)) {
                // split the polygon in two by the diagonal
                var c = splitPolygon(a, b);

                // filter colinear points around the cuts
                a = filterPoints(a, a.next);
                c = filterPoints(c, c.next);

                // run earcut on each half
                earcutLinked(a, triangles, dim, minX, minY, invSize);
                earcutLinked(c, triangles, dim, minX, minY, invSize);
                return;
            }
            b = b.next;
        }
        a = a.next;
    } while (a !== start);
}

// link every hole into the outer loop, producing a single-ring polygon without holes
function eliminateHoles(data, holeIndices, outerNode, dim) {
    var queue = [],
        i, len, start, end, list;

    for (i = 0, len = holeIndices.length; i < len; i++) {
        start = holeIndices[i] * dim;
        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
        list = linkedList(data, start, end, dim, false);
        if (list === list.next) list.steiner = true;
        queue.push(getLeftmost(list));
    }

    queue.sort(compareX);

    // process holes from left to right
    for (i = 0; i < queue.length; i++) {
        eliminateHole(queue[i], outerNode);
        outerNode = filterPoints(outerNode, outerNode.next);
    }

    return outerNode;
}

function compareX(a, b) {
    return a.x - b.x;
}

// find a bridge between vertices that connects hole with an outer ring and and link it
function eliminateHole(hole, outerNode) {
    outerNode = findHoleBridge(hole, outerNode);
    if (outerNode) {
        var b = splitPolygon(outerNode, hole);
        filterPoints(b, b.next);
    }
}

// David Eberly's algorithm for finding a bridge between hole and outer polygon
function findHoleBridge(hole, outerNode) {
    var p = outerNode,
        hx = hole.x,
        hy = hole.y,
        qx = -Infinity,
        m;

    // find a segment intersected by a ray from the hole's leftmost point to the left;
    // segment's endpoint with lesser x will be potential connection point
    do {
        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
            if (x <= hx && x > qx) {
                qx = x;
                if (x === hx) {
                    if (hy === p.y) return p;
                    if (hy === p.next.y) return p.next;
                }
                m = p.x < p.next.x ? p : p.next;
            }
        }
        p = p.next;
    } while (p !== outerNode);

    if (!m) return null;

    if (hx === qx) return m.prev; // hole touches outer segment; pick lower endpoint

    // look for points inside the triangle of hole point, segment intersection and endpoint;
    // if there are no points found, we have a valid connection;
    // otherwise choose the point of the minimum angle with the ray as connection point

    var stop = m,
        mx = m.x,
        my = m.y,
        tanMin = Infinity,
        tan;

    p = m.next;

    while (p !== stop) {
        if (hx >= p.x && p.x >= mx && hx !== p.x &&
                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {

            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential

            if ((tan < tanMin || (tan === tanMin && p.x > m.x)) && locallyInside(p, hole)) {
                m = p;
                tanMin = tan;
            }
        }

        p = p.next;
    }

    return m;
}

// interlink polygon nodes in z-order
function indexCurve(start, minX, minY, invSize) {
    var p = start;
    do {
        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);
        p.prevZ = p.prev;
        p.nextZ = p.next;
        p = p.next;
    } while (p !== start);

    p.prevZ.nextZ = null;
    p.prevZ = null;

    sortLinked(p);
}

// Simon Tatham's linked list merge sort algorithm
// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
function sortLinked(list) {
    var i, p, q, e, tail, numMerges, pSize, qSize,
        inSize = 1;

    do {
        p = list;
        list = null;
        tail = null;
        numMerges = 0;

        while (p) {
            numMerges++;
            q = p;
            pSize = 0;
            for (i = 0; i < inSize; i++) {
                pSize++;
                q = q.nextZ;
                if (!q) break;
            }
            qSize = inSize;

            while (pSize > 0 || (qSize > 0 && q)) {

                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {
                    e = p;
                    p = p.nextZ;
                    pSize--;
                } else {
                    e = q;
                    q = q.nextZ;
                    qSize--;
                }

                if (tail) tail.nextZ = e;
                else list = e;

                e.prevZ = tail;
                tail = e;
            }

            p = q;
        }

        tail.nextZ = null;
        inSize *= 2;

    } while (numMerges > 1);

    return list;
}

// z-order of a point given coords and inverse of the longer side of data bbox
function zOrder(x, y, minX, minY, invSize) {
    // coords are transformed into non-negative 15-bit integer range
    x = 32767 * (x - minX) * invSize;
    y = 32767 * (y - minY) * invSize;

    x = (x | (x << 8)) & 0x00FF00FF;
    x = (x | (x << 4)) & 0x0F0F0F0F;
    x = (x | (x << 2)) & 0x33333333;
    x = (x | (x << 1)) & 0x55555555;

    y = (y | (y << 8)) & 0x00FF00FF;
    y = (y | (y << 4)) & 0x0F0F0F0F;
    y = (y | (y << 2)) & 0x33333333;
    y = (y | (y << 1)) & 0x55555555;

    return x | (y << 1);
}

// find the leftmost node of a polygon ring
function getLeftmost(start) {
    var p = start,
        leftmost = start;
    do {
        if (p.x < leftmost.x) leftmost = p;
        p = p.next;
    } while (p !== start);

    return leftmost;
}

// check if a point lies within a convex triangle
function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&
           (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&
           (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
}

// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
function isValidDiagonal(a, b) {
    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) &&
           locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);
}

// signed area of a triangle
function area(p, q, r) {
    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
}

// check if two points are equal
function equals(p1, p2) {
    return p1.x === p2.x && p1.y === p2.y;
}

// check if two segments intersect
function intersects(p1, q1, p2, q2) {
    if ((equals(p1, q1) && equals(p2, q2)) ||
        (equals(p1, q2) && equals(p2, q1))) return true;
    return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 &&
           area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;
}

// check if a polygon diagonal intersects any polygon segments
function intersectsPolygon(a, b) {
    var p = a;
    do {
        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
                intersects(p, p.next, a, b)) return true;
        p = p.next;
    } while (p !== a);

    return false;
}

// check if a polygon diagonal is locally inside the polygon
function locallyInside(a, b) {
    return area(a.prev, a, a.next) < 0 ?
        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :
        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
}

// check if the middle point of a polygon diagonal is inside the polygon
function middleInside(a, b) {
    var p = a,
        inside = false,
        px = (a.x + b.x) / 2,
        py = (a.y + b.y) / 2;
    do {
        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&
                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))
            inside = !inside;
        p = p.next;
    } while (p !== a);

    return inside;
}

// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
// if one belongs to the outer ring and another to a hole, it merges it into a single ring
function splitPolygon(a, b) {
    var a2 = new Node(a.i, a.x, a.y),
        b2 = new Node(b.i, b.x, b.y),
        an = a.next,
        bp = b.prev;

    a.next = b;
    b.prev = a;

    a2.next = an;
    an.prev = a2;

    b2.next = a2;
    a2.prev = b2;

    bp.next = b2;
    b2.prev = bp;

    return b2;
}

// create a node and optionally link it with previous one (in a circular doubly linked list)
function insertNode(i, x, y, last) {
    var p = new Node(i, x, y);

    if (!last) {
        p.prev = p;
        p.next = p;

    } else {
        p.next = last.next;
        p.prev = last;
        last.next.prev = p;
        last.next = p;
    }
    return p;
}

function removeNode(p) {
    p.next.prev = p.prev;
    p.prev.next = p.next;

    if (p.prevZ) p.prevZ.nextZ = p.nextZ;
    if (p.nextZ) p.nextZ.prevZ = p.prevZ;
}

function Node(i, x, y) {
    // vertice index in coordinates array
    this.i = i;

    // vertex coordinates
    this.x = x;
    this.y = y;

    // previous and next vertice nodes in a polygon ring
    this.prev = null;
    this.next = null;

    // z-order curve value
    this.z = null;

    // previous and next nodes in z-order
    this.prevZ = null;
    this.nextZ = null;

    // indicates whether this is a steiner point
    this.steiner = false;
}

// return a percentage difference between the polygon area and its triangulation area;
// used to verify correctness of triangulation
earcut.deviation = function (data, holeIndices, dim, triangles) {
    var hasHoles = holeIndices && holeIndices.length;
    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;

    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));
    if (hasHoles) {
        for (var i = 0, len = holeIndices.length; i < len; i++) {
            var start = holeIndices[i] * dim;
            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;
            polygonArea -= Math.abs(signedArea(data, start, end, dim));
        }
    }

    var trianglesArea = 0;
    for (i = 0; i < triangles.length; i += 3) {
        var a = triangles[i] * dim;
        var b = triangles[i + 1] * dim;
        var c = triangles[i + 2] * dim;
        trianglesArea += Math.abs(
            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -
            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));
    }

    return polygonArea === 0 && trianglesArea === 0 ? 0 :
        Math.abs((trianglesArea - polygonArea) / polygonArea);
};

function signedArea(data, start, end, dim) {
    var sum = 0;
    for (var i = start, j = end - dim; i < end; i += dim) {
        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);
        j = i;
    }
    return sum;
}

// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts
earcut.flatten = function (data) {
    var dim = data[0][0].length,
        result = {vertices: [], holes: [], dimensions: dim},
        holeIndex = 0;

    for (var i = 0; i < data.length; i++) {
        for (var j = 0; j < data[i].length; j++) {
            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);
        }
        if (i > 0) {
            holeIndex += data[i - 1].length;
            result.holes.push(holeIndex);
        }
    }
    return result;
};


/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POLYGON_ATTRIBUTE_MAPPING", function() { return POLYGON_ATTRIBUTE_MAPPING; });
/* harmony import */ var _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(56);

/**
 * Description of how attributes of vertices are packed into a vertex buffer.
 */
const POLYGON_ATTRIBUTE_MAPPING = new _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__["AttributeMapping"]([
    [
        0 /* POSITION_HIGH */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        1 /* POSITION_LOW */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        7 /* COLOR */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    [
        10 /* Z_INDEX */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ]
]);


/***/ }),
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AttributeMapping", function() { return AttributeMapping; });
/* harmony import */ var _util_iterable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(57);
/* harmony import */ var _util_pow_of_2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(58);


/**
 * Gives size of a GL type.
 *
 * @param type The type.
 * @returns Size of the type in bytes.
 */
function getTypeSize(type) {
    switch (type) {
        case 5120 /* BYTE */:
        case 5121 /* UNSIGNED_BYTE */:
            return 1;
        case 5122 /* SHORT */:
        case 5123 /* UNSIGNED_SHORT */:
            return 2;
        case 5124 /* INT */:
        case 5125 /* UNSIGNED_INT */:
        case 5126 /* FLOAT */:
            return 4;
    }
}
/**
 * Description of how particular attributes of a vertex are packed into a vertex
 * buffer.
 */
class AttributeMapping extends Map {
    /**
     * Creates a new attribute mapping with a set of attributes of given types and
     * sizes. Automatically computes offsets of the attributes.
     *
     * @param mapping The mapping from attribute IDs to types and sizes.
     * @param alignment Desired alignment of attributes in the vertex data
     *      structure. Must be a power of 2.
     */
    constructor(mapping, alignment = 4 /* ALIGN_4_BYTES */) {
        let offset = 0;
        super(Object(_util_iterable__WEBPACK_IMPORTED_MODULE_0__["mapIterable"])(mapping, ([idx, { type, size, normalized }]) => {
            const pointer = [
                idx,
                {
                    type,
                    size,
                    normalized,
                    offset
                }
            ];
            const attributeSize = size * getTypeSize(type);
            const newOffset = Object(_util_pow_of_2__WEBPACK_IMPORTED_MODULE_1__["align"])(offset + attributeSize, -alignment);
            // TODO(dmikis) Check this in debug mode.
            // if (newOffset - offset > attributeSize) {
            //    console.warn(`${newOffset - offset} byte padding's inserted`);
            // }
            offset = newOffset;
            return pointer;
        }));
        this.vertexByteSize = offset;
    }
}


/***/ }),
/* 57 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findInIterable", function() { return findInIterable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapIterable", function() { return mapIterable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterIterable", function() { return filterIterable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduceIterable", function() { return reduceIterable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "oneOfIterable", function() { return oneOfIterable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "allOfIterable", function() { return allOfIterable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rangeIterable", function() { return rangeIterable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zipIterables", function() { return zipIterables; });
/**
 * Searches for the first collection item satisfying a predicate.
 *
 * @param collection The collection.
 * @param predicate The predicate.
 * @returns The first item satisfying the predicate or `undefined` if none found.
 */
function findInIterable(collection, predicate) {
    for (const item of collection) {
        if (predicate(item)) {
            return item;
        }
    }
    return;
}
/**
 * Transforms a collection to another one.
 *
 * @param collection The source collection.
 * @param mapper A function producing items for destination collection.
 * @returns Collection of produced items.
 */
function* mapIterable(collection, mapper) {
    for (const item of collection) {
        yield mapper(item);
    }
}
/**
 * Chooses items of a collection satisfying a predicate.
 *
 * @param collection The collection.
 * @param predicate The predicate.
 * @returns Collection of chosen items.
 */
function* filterIterable(collection, predicate) {
    for (const item of collection) {
        if (predicate(item)) {
            yield item;
        }
    }
}
/**
 * Traverses a collection from left to right recomputing an accumulator on every
 * iteration.
 *
 * @param collection The collection.
 * @param reducer The function used to compute next value of the accumulator.
 * @param initial
 * @returns Value of the accumulator.
 */
function reduceIterable(collection, reducer, initial) {
    let result = initial;
    for (const item of collection) {
        result = reducer(result, item);
    }
    return result;
}
/**
 * Checks if there's at least one item in a collection satisfying a predicate.
 *
 * @param collection The collection.
 * @param predicate The predicate.
 * @returns `true` if for at least one item in the collection the predicate returns
 *      `true` and `false` otherwise.
 */
function oneOfIterable(collection, predicate) {
    for (const item of collection) {
        if (predicate(item)) {
            return true;
        }
    }
    return false;
}
/**
 * Checks if all items of a collection satisfy a predicate.
 *
 * @param collection The collection.
 * @param predicate The predicate.
 * @returns `false` if for at least one item in the collection the predicate returns
 *      `false` and `true` otherwise.
 */
function allOfIterable(collection, predicate) {
    for (const item of collection) {
        if (!predicate(item)) {
            return false;
        }
    }
    return true;
}
/**
 * Creates an iterator for [startIndex, startIndex+length) range.
 */
function* rangeIterable(length, startIndex = 0) {
    const endIndex = startIndex + length;
    for (let i = startIndex; i < endIndex; i++) {
        yield i;
    }
}
function* zipIterables(ts, us, zipper = (t, u) => [t, u]) {
    const tIterator = ts[Symbol.iterator]();
    const uIterator = us[Symbol.iterator]();
    for (let t = tIterator.next(), u = uIterator.next(); !(t.done || u.done); t = tIterator.next(), u = uIterator.next()) {
        yield zipper(t.value, u.value);
    }
}


/***/ }),
/* 58 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPowOf2", function() { return isPowOf2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "align", function() { return align; });
/**
 * Checks if a number is a power of 2.
 *
 * @param x The number to check.
 * @returns `true` if the number is an integer power of 2 and `false` otherwise.
 */
function isPowOf2(x) {
    return x > 0 && !(x & (x - 1));
}
/**
 * Aligns an offset by an alignment given by a mask.
 *
 * @param offset The offset.
 * @param alignmentMask The alignment mask — a bit field that has `log2(alignment)`
 *      of least significant bits unset and other set, e.g. if `alignment` is 4
 *      then the `alignmentMask` will be `0xffffffc`
 * @returns Aligned offset.
 */
function align(offset, alignmentMask) {
    return (offset - 1 & alignmentMask) - alignmentMask;
}


/***/ }),
/* 59 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intToZIndex", function() { return intToZIndex; });
const MIN_ZINDEX = -1 + Math.pow(2, 1 - 24); // epsilon is added (for normalized 24-bit value) to free up reserved value
function intToZIndex(x) {
    return Math.max(MIN_ZINDEX, x / 0x7fffff);
}


/***/ }),
/* 60 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TexturedPolygonBufferWriter; });
/* harmony import */ var _util_buffer_writer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(49);
/* harmony import */ var _util_triangulate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(53);
/* harmony import */ var _textured_polygon_attribute_mapping__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(61);
/* harmony import */ var _util_z_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(59);




/**
 * Writer of geometry data of polygon images.
 */
class TexturedPolygonBufferWriter extends _util_buffer_writer__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(_textured_polygon_attribute_mapping__WEBPACK_IMPORTED_MODULE_2__["TEXTURED_POLYGON_ATTRIBUTE_MAPPING"].vertexByteSize);
    }
    writePolygon(polygon, imageLocation, zIndex) {
        for (const ring of polygon.vertexRings) {
            for (const vertex of ring) {
                this._writeVertex(vertex, imageLocation, 0, Object(_util_z_index__WEBPACK_IMPORTED_MODULE_3__["intToZIndex"])(zIndex));
            }
        }
        this.writeIndices(Object(_util_triangulate__WEBPACK_IMPORTED_MODULE_1__["default"])(polygon.vertexRings));
        return this.endMesh();
    }
    /**
     * @param position World coordinates of the vertex.
     * @param imageLocation Location of the pateern in atlas.
     * @param imageScale How world coordinates relate to the image size.
     * @param zIndex Vertex z-coordinate.
     */
    _writeVertex(position, imageLocation, imageScale, zIndex) {
        this._writeWorldCoordinate(position);
        this._writeHalfWords(imageLocation.minX, imageLocation.minY);
        this._writeHalfWords(imageLocation.maxX - imageLocation.minX, imageLocation.maxY - imageLocation.minY);
        this._writeFloat32(imageScale);
        this._writeFloat32(zIndex);
    }
}


/***/ }),
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TEXTURED_POLYGON_ATTRIBUTE_MAPPING", function() { return TEXTURED_POLYGON_ATTRIBUTE_MAPPING; });
/* harmony import */ var _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(56);

/**
 * Description of how attributes of vertices are packed into a vertex buffer.
 */
const TEXTURED_POLYGON_ATTRIBUTE_MAPPING = new _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__["AttributeMapping"]([
    [
        0 /* POSITION_HIGH */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        1 /* POSITION_LOW */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        4 /* UV */,
        {
            size: 4,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: false
        }
    ],
    [
        11 /* AUX */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ],
    [
        10 /* Z_INDEX */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ]
]);


/***/ }),
/* 62 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAX_HALF_WIDTH", function() { return MAX_HALF_WIDTH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAX_FILL_GAP", function() { return MAX_FILL_GAP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PolylineBufferWriter; });
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43);
/* harmony import */ var _util_color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(38);
/* harmony import */ var _util_buffer_writer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(49);
/* harmony import */ var _polyline_attribute_mapping__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(63);
/* harmony import */ var _util_gputypes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(50);
/* harmony import */ var _util_z_index__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(59);
/* harmony import */ var _math_scalar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(42);







/**
 * Computes miter of a join between two segments.
 *
 * @param n1 Normal vector of the first segment.
 * @param n2 Normal vector of the second segment.
 * @returns Miter value, i.e. by how match displacement is longer than a normal
 *      one.
 */
function computeMiter(n1, n2) {
    return Math.sqrt(2 / (1 + _math_vector2__WEBPACK_IMPORTED_MODULE_0__["dot"](n1, n2)));
}
const SEGMENT_VERTEX_COUNT = 4;
const SQUARE_CAP_VERTEX_COUNT = 5;
const ROUND_CAP_VERTEX_COUNT = 4;
const FLOAT_MAX = 3.4028234663852886e+38;
const MITER_LIMIT = 4;
const UV_POS_ONE_PACKED = 255; // packed 1
const UV_NEG_ONE_PACKED = 1; // packed -1
const UV_ZERO_PACKED = 128;
/**
 * Packs a component of uv into a unsigned 8-bit value. After packing -1 will
 * become 1 and 1 will become 255. That's need to emulate zero-preserving
 * normalization (we can't rely on WebGL to do it for us :().
 *
 * @param c The component.
 * @returns Packed component.
 */
function packUvComponent(c) {
    // We don't truncate here because buffer writer will do that for us.
    return 128 + (127 * c);
}
/**
 * Half width of the polyline is stored in a normalized attribute. This constant
 * defines half width value of 1 corresponds to.
 */
const MAX_HALF_WIDTH = 255 / 4; // px
/**
 * Same as for polyline half width, but for dash pattern definition.
 */
const MAX_FILL_GAP = 255; // px
class PolylineBufferWriter extends _util_buffer_writer__WEBPACK_IMPORTED_MODULE_2__["default"] {
    constructor() {
        super(_polyline_attribute_mapping__WEBPACK_IMPORTED_MODULE_3__["POLYLINE_ATTRIBUTE_MAPPING"].vertexByteSize);
        this._displacement = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0);
        this._prevDisplacement = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0);
        this._initPolylineState([_math_vector2__WEBPACK_IMPORTED_MODULE_0__["ZERO"], _math_vector2__WEBPACK_IMPORTED_MODULE_0__["ZERO"]], 0, 0, 0, 0, 0 /* MITER */, 0);
    }
    /**
     * Generates a mesh for a polyline with a given style, baking all necessary
     * parameters into attributes.
     *
     * @param polyline The polyline.
     * @param style The polyline style.
     * @returns Location of the written mesh in the managed buffers.
     */
    writePolyline(polyline, style, zIndex) {
        const { vertices } = polyline;
        const lastIdx = vertices.length - 1;
        if (lastIdx < 1) {
            throw new Error('One vertex in not a polyline. It\'s not even a line.');
        }
        this._initPolylineState(vertices, Object(_util_color__WEBPACK_IMPORTED_MODULE_1__["encodeRgba8"])(style.strokeColor), style.strokeWidth, style.dash ? style.dash.fill : 0, style.dash ? style.dash.gap : 0, style.join, Object(_util_z_index__WEBPACK_IMPORTED_MODULE_5__["intToZIndex"])(zIndex));
        this._writeCap(style.startCap, vertices[0], 1);
        for (let i = 1; i < lastIdx; ++i) {
            this._writeSegment(vertices[i - 1], vertices[i], vertices[i + 1]);
            this._writeJoin(vertices[i]);
        }
        this._writeLastSegment(vertices[lastIdx - 1], vertices[lastIdx]);
        this._writeCap(style.endCap, vertices[lastIdx], 1);
        return this.endMesh();
    }
    _initPolylineState(vertices, colorRgba8, width, fill, gap, join, zIndex) {
        this._baseIndex = this._polylineLength = this._lastDirection = 0;
        this._lastSignedMiter = 1;
        const displacement = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["sub"](vertices[1], vertices[0], this._displacement);
        this._segmentLength = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["length"](displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["divn"](displacement, this._segmentLength, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["rotate90"](displacement, displacement);
        this._colorRgba8 = colorRgba8;
        this._halfWidthFillGapPacked =
            Object(_util_gputypes__WEBPACK_IMPORTED_MODULE_4__["floatToUint8"])(Object(_math_scalar__WEBPACK_IMPORTED_MODULE_6__["clamp"])(0.5 * width, 0, MAX_HALF_WIDTH) / MAX_HALF_WIDTH) |
                Object(_util_gputypes__WEBPACK_IMPORTED_MODULE_4__["floatToUint8"])(Object(_math_scalar__WEBPACK_IMPORTED_MODULE_6__["clamp"])(fill, 0, MAX_FILL_GAP) / MAX_FILL_GAP) << 8 |
                Object(_util_gputypes__WEBPACK_IMPORTED_MODULE_4__["floatToUint8"])(Object(_math_scalar__WEBPACK_IMPORTED_MODULE_6__["clamp"])(gap, 0, MAX_FILL_GAP) / MAX_FILL_GAP) << 16;
        this._join = join;
        this._zIndex = zIndex;
    }
    /**
     * Writes a single vertex into managed vertex buffer.
     *
     * @param position Vertex world position.
     * @param normal Normal of segment the vertex belongs to.
     * @param u Normalized distance to the polyline along the normal.
     * @param v Normalized distance to the polyline along the tangent.
     * @param polylineLength Distance to the first vertex along the polyline.
     * @param miter Join miter.
     * @param lengthCorrectionLimit Limit on the vertex displacement along the
     *      polyline.
     */
    _writeVertex(position, normal, uPacked, vPacked, polylineLength, miter, lengthCorrectionLimit) {
        this._writeWorldCoordinate(position);
        this._writeHalfWords(Object(_util_gputypes__WEBPACK_IMPORTED_MODULE_4__["floatToUint16"])(0.5 * (normal.x * Math.SQRT1_2 + 1)), Object(_util_gputypes__WEBPACK_IMPORTED_MODULE_4__["floatToUint16"])(0.5 * (normal.y * Math.SQRT1_2 + 1)));
        this._writeHalfWords(uPacked, vPacked);
        this._writeWord(this._halfWidthFillGapPacked);
        this._writeFloat32(miter);
        this._writeFloat32(lengthCorrectionLimit);
        this._writeFloat32(polylineLength);
        this._writeWord(this._colorRgba8);
        this._writeFloat32(this._zIndex);
    }
    _writeCap(cap, endVertex, displacementSign) {
        switch (cap) {
            case 1 /* ROUND */:
                this._writeRoundCap(endVertex, displacementSign);
                break;
            case 2 /* SQUARE */:
                this._writeSquareCap(endVertex, displacementSign);
                break;
        }
    }
    _writeRoundCap(endVertex, displacementSign) {
        const displacement = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0);
        const polylineLength = this._polylineLength;
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](this._displacement, -displacementSign, displacement);
        this._writeVertex(endVertex, displacement, UV_NEG_ONE_PACKED, UV_ZERO_PACKED, polylineLength, 1, FLOAT_MAX);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["rotate90"](this._displacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["sub"](displacement, this._displacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](displacement, displacementSign, displacement);
        this._writeVertex(endVertex, displacement, UV_NEG_ONE_PACKED, UV_POS_ONE_PACKED, polylineLength, 1, FLOAT_MAX);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](this._displacement, displacementSign, displacement);
        this._writeVertex(endVertex, displacement, UV_POS_ONE_PACKED, UV_ZERO_PACKED, polylineLength, 1, FLOAT_MAX);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["rotate90"](this._displacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["add"](displacement, this._displacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](displacement, displacementSign, displacement);
        this._writeVertex(endVertex, displacement, UV_POS_ONE_PACKED, UV_POS_ONE_PACKED, polylineLength, 1, FLOAT_MAX);
        this.writeIndicesForContinuousStrip(ROUND_CAP_VERTEX_COUNT, this._baseIndex);
        this._baseIndex += ROUND_CAP_VERTEX_COUNT;
    }
    _writeSquareCap(endVertex, displacementSign) {
        const displacement = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0);
        const polylineLength = this._polylineLength;
        this._writeVertex(endVertex, _math_vector2__WEBPACK_IMPORTED_MODULE_0__["ZERO"], UV_ZERO_PACKED, UV_ZERO_PACKED, polylineLength, 1, 0);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](this._displacement, -displacementSign, displacement);
        this._writeVertex(endVertex, displacement, UV_POS_ONE_PACKED, UV_ZERO_PACKED, polylineLength, 1, FLOAT_MAX);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["rotate90"](this._displacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["sub"](displacement, this._displacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](displacement, displacementSign, displacement);
        this._writeVertex(endVertex, displacement, UV_POS_ONE_PACKED, UV_ZERO_PACKED, polylineLength, 1, FLOAT_MAX);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["rotate90"](this._displacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["sub"](displacement, this._displacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](displacement, displacementSign, displacement);
        this._writeVertex(endVertex, displacement, UV_POS_ONE_PACKED, UV_ZERO_PACKED, polylineLength, 1, FLOAT_MAX);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](this._displacement, displacementSign, displacement);
        this._writeVertex(endVertex, this._displacement, UV_POS_ONE_PACKED, UV_ZERO_PACKED, polylineLength, 1, FLOAT_MAX);
        this.writeIndicesForContinuousFan(SQUARE_CAP_VERTEX_COUNT, this._baseIndex);
        this._baseIndex += SQUARE_CAP_VERTEX_COUNT;
    }
    _writeSegment(start, end, nextEnd) {
        const displacement = this._displacement;
        const polylineLength = this._polylineLength;
        const nextSegmentLength = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["distance"](nextEnd, end);
        const nextSegmentNormal = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["sub"](nextEnd, end);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["divn"](nextSegmentNormal, nextSegmentLength, nextSegmentNormal);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["rotate90"](nextSegmentNormal, nextSegmentNormal);
        const direction1 = this._lastDirection;
        const direction2 = Math.sign(_math_vector2__WEBPACK_IMPORTED_MODULE_0__["crossZ"](displacement, nextSegmentNormal));
        const miter1 = this._lastSignedMiter;
        const miter2 = computeMiter(displacement, nextSegmentNormal);
        this._writeVertex(start, displacement, UV_POS_ONE_PACKED, UV_ZERO_PACKED, polylineLength, direction1 === -1 && (this._join !== 0 /* MITER */ || Math.abs(miter1) > MITER_LIMIT) ?
            1 :
            miter1, direction1 === -1 ? -FLOAT_MAX : 0.5 * this._segmentLength);
        this._writeVertex(end, displacement, UV_POS_ONE_PACKED, UV_ZERO_PACKED, polylineLength + this._segmentLength, direction2 === -1 && (this._join !== 0 /* MITER */ || miter2 > MITER_LIMIT) ?
            1 :
            direction2 * miter2, direction2 === -1 ? FLOAT_MAX : -0.5 * this._segmentLength);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["invert"](displacement, displacement);
        this._writeVertex(start, displacement, UV_NEG_ONE_PACKED, UV_ZERO_PACKED, polylineLength, direction1 === 1 && (this._join !== 0 /* MITER */ || Math.abs(miter1) > MITER_LIMIT) ?
            1 :
            miter1, direction1 === 1 ? -FLOAT_MAX : 0.5 * this._segmentLength);
        this._writeVertex(end, displacement, UV_NEG_ONE_PACKED, UV_ZERO_PACKED, polylineLength + this._segmentLength, direction2 === 1 && (this._join !== 0 /* MITER */ || miter2 > MITER_LIMIT) ?
            1 :
            direction2 * miter2, direction2 === 1 ? FLOAT_MAX : -0.5 * this._segmentLength);
        this.writeIndicesForContinuousStrip(SEGMENT_VERTEX_COUNT, this._baseIndex);
        this._baseIndex += SEGMENT_VERTEX_COUNT;
        this._lastSignedMiter = -direction2 * miter2;
        this._lastDirection = direction2;
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["copy"](displacement, this._prevDisplacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["copy"](nextSegmentNormal, displacement);
        this._polylineLength += this._segmentLength;
        this._segmentLength = nextSegmentLength;
    }
    _writeJoin(joinVertex) {
        switch (this._join) {
            case 2 /* BEVEL */:
                this._writeBevelJoin(joinVertex);
                break;
            case 1 /* ROUND */:
                this._writeRoundJoin(joinVertex);
                break;
            case 0 /* MITER */:
                if (Math.abs(this._lastSignedMiter) > MITER_LIMIT) {
                    this._writeBevelJoin(joinVertex);
                }
                break;
        }
    }
    _writeBevelJoin(joinVertex) {
        const lastDirection = this._lastDirection;
        const displacement = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["invert"](this._displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["add"](displacement, this._prevDisplacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](displacement, 0.5 * lastDirection, displacement);
        this._writeVertex(joinVertex, displacement, lastDirection === -1 /* LEFT */ ?
            UV_POS_ONE_PACKED :
            UV_NEG_ONE_PACKED, UV_ZERO_PACKED, this._polylineLength, 1, 1);
        const baseIndex = this._baseIndex;
        this.writeIndices([
            baseIndex - 1,
            baseIndex - 3,
            baseIndex,
            baseIndex,
            lastDirection === -1 /* LEFT */ ? baseIndex + 1 : baseIndex + 3,
            lastDirection === -1 /* LEFT */ ? baseIndex + 3 : baseIndex + 1
        ]);
        this._baseIndex += 1;
    }
    _writeRoundJoin(joinVertex) {
        const polylineLength = this._polylineLength;
        this._writeVertex(joinVertex, _math_vector2__WEBPACK_IMPORTED_MODULE_0__["ZERO"], UV_ZERO_PACKED, UV_ZERO_PACKED, polylineLength, 0, 0);
        const lastDirection = this._lastDirection;
        const middleDisplacement = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["invert"](this._prevDisplacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["add"](this._displacement, middleDisplacement, middleDisplacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["normalize"](middleDisplacement, middleDisplacement);
        const displacement = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["invert"](this._prevDisplacement);
        const miter1 = computeMiter(middleDisplacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["add"](displacement, middleDisplacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["normalize"](displacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](displacement, -lastDirection * miter1, displacement);
        this._writeVertex(joinVertex, displacement, lastDirection === -1 /* LEFT */ ?
            UV_POS_ONE_PACKED :
            UV_NEG_ONE_PACKED, packUvComponent(Math.sqrt(miter1 * miter1 - 1)), polylineLength, 1, FLOAT_MAX);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](middleDisplacement, -lastDirection, displacement);
        this._writeVertex(joinVertex, displacement, lastDirection === -1 /* LEFT */ ?
            UV_POS_ONE_PACKED :
            UV_NEG_ONE_PACKED, UV_ZERO_PACKED, polylineLength, 1, FLOAT_MAX);
        const miter2 = computeMiter(middleDisplacement, this._displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["add"](this._displacement, middleDisplacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["normalize"](displacement, displacement);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["muln"](displacement, -lastDirection * miter2, displacement);
        this._writeVertex(joinVertex, displacement, lastDirection === -1 /* LEFT */ ?
            UV_POS_ONE_PACKED :
            UV_NEG_ONE_PACKED, packUvComponent(Math.sqrt(miter2 * miter2 - 1)), polylineLength, 1, FLOAT_MAX);
        const baseIndex = this._baseIndex;
        this.writeIndices([
            baseIndex - 3,
            baseIndex - 1,
            baseIndex,
            baseIndex,
            lastDirection === -1 /* LEFT */ ? baseIndex - 3 : baseIndex - 1,
            baseIndex + 1,
            baseIndex,
            baseIndex + 1,
            baseIndex + 2,
            baseIndex,
            baseIndex + 2,
            baseIndex + 3,
            baseIndex,
            baseIndex + 3,
            lastDirection === -1 /* LEFT */ ? baseIndex + 4 : baseIndex + 6,
            baseIndex,
            baseIndex + 4,
            baseIndex + 6
        ]);
        this._baseIndex += 4;
    }
    _writeLastSegment(start, end) {
        const displacement = this._displacement;
        const lastDirection = this._lastDirection;
        const polylineLength = this._polylineLength;
        const miter = this._lastSignedMiter;
        this._writeVertex(start, displacement, UV_POS_ONE_PACKED, UV_ZERO_PACKED, polylineLength, lastDirection === -1 /* LEFT */ && (this._join !== 0 /* MITER */ || Math.abs(miter) > MITER_LIMIT) ?
            1 :
            miter, lastDirection === -1 /* LEFT */ ? -FLOAT_MAX : this._segmentLength);
        this._writeVertex(end, displacement, UV_POS_ONE_PACKED, UV_ZERO_PACKED, polylineLength + this._segmentLength, 1, FLOAT_MAX);
        _math_vector2__WEBPACK_IMPORTED_MODULE_0__["invert"](displacement, displacement);
        this._writeVertex(start, displacement, UV_NEG_ONE_PACKED, UV_ZERO_PACKED, polylineLength, lastDirection === 1 /* RIGHT */ && (this._join !== 0 /* MITER */ || Math.abs(miter) > MITER_LIMIT) ?
            1 :
            miter, lastDirection === 1 /* RIGHT */ ? -FLOAT_MAX : this._segmentLength);
        this._writeVertex(end, displacement, UV_NEG_ONE_PACKED, UV_ZERO_PACKED, polylineLength + this._segmentLength, 1, FLOAT_MAX);
        this.writeIndicesForContinuousStrip(SEGMENT_VERTEX_COUNT, this._baseIndex);
        this._baseIndex += SEGMENT_VERTEX_COUNT;
    }
}


/***/ }),
/* 63 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POLYLINE_ATTRIBUTE_MAPPING", function() { return POLYLINE_ATTRIBUTE_MAPPING; });
/* harmony import */ var _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(56);

/**
 * Description of how attributes of vertices are packed into a vertex buffer.
 */
const POLYLINE_ATTRIBUTE_MAPPING = new _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__["AttributeMapping"]([
    /** Vertex world position. */
    [
        0 /* POSITION */,
        {
            size: 4,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    /** Normal to polyline segment the vertex belong to. */
    [
        5 /* NORMAL */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    /**
     * "UV" vertex that used to compute stroke and dashes. It's components:
     *
     *   - distance to the analytical polyline along segment's normal;
     *   - distance to the analytical polyline along segment.
     */
    [
        4 /* UV */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: false
        }
    ],
    /**
     * Vector with polyline's half width and dash style. It's components:
     *
     *   - half width;
     *   - length of a dash;
     *   - distance between dashes.
     */
    [
        11 /* AUX */,
        {
            size: 3,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    /**
     * Miter (i.e. how much displacement of the vertex is longer then the
     * normal).
     */
    [
        12 /* AUX1 */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ],
    /**
     * Limit on displacement tangent component.Applied to avoid geometry
     * glitches in over-degenerative cases.
     */
    [
        13 /* AUX2 */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ],
    /**
     * Distance to the first vertex along the polyline.
     */
    [
        14 /* AUX3 */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ],
    /** Polyline's color. */
    [
        7 /* COLOR */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    /** Polyline's Z index. */
    [
        10 /* Z_INDEX */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ]
]);


/***/ }),
/* 64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return extractPolygons; });
/* harmony import */ var _tile_world_coordinates_converter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(40);
/* harmony import */ var _util_color__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(38);
/* harmony import */ var _extract_styles__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(45);
/* harmony import */ var _util_iterable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(57);




/**
 * Utility method for getting polygon ring vertices from API tile response.
 */
function* extractVertices(polygons, coordsOffset, ringSize, converter) {
    // coordinates are stored in deltas relatively to the first values in ring
    // so we need to accumulate x and y to determine subsequent coordinates
    let x = 0;
    let y = 0;
    for (let j = 0; j < ringSize; j++) {
        x += polygons.coordsx[coordsOffset];
        y += polygons.coordsy[coordsOffset];
        yield converter.toWorldCoordinates(x, y);
        coordsOffset++;
    }
}
/**
 * Utility method for getting polygon rings from API tile response.
 */
function* extractRings(polygons, coordsOffset, ringSizeOffset, ringSizeLength, converter) {
    for (let i = 0; i < ringSizeLength; i++) {
        const ringSize = polygons.ringSize[ringSizeOffset + i];
        yield extractVertices(polygons, coordsOffset, ringSize, converter);
        coordsOffset += ringSize;
    }
}
function convertMeshDescription(height, converter, styles, mesh) {
    if (mesh && mesh.bbox) {
        return {
            objectId: mesh.objectId,
            meshId: mesh.meshId,
            bbox: {
                minX: converter.toWorldXCoordinate(mesh.bbox.minX),
                maxX: converter.toWorldXCoordinate(mesh.bbox.maxX),
                minY: converter.toWorldYCoordinate(mesh.bbox.maxY),
                maxY: converter.toWorldYCoordinate(mesh.bbox.minY),
                minZ: height,
                maxZ: 0
            },
            color: styles[0].color
        };
    }
    else {
        return undefined;
    }
}
/**
 * Utility method for getting polygon specific style details from a zoom slice.
 * To be used as a zoom slice style converter for style extractor.
 */
function convertZoomSliceToStyle(slice, styleBase) {
    if (slice.poly) {
        const extruded = !!slice.poly.extrusion && slice.poly.extrusion.enabled;
        return Object.assign({}, styleBase, { color: Object(_util_color__WEBPACK_IMPORTED_MODULE_1__["decodeAbgr8"])(slice.poly.color), pattern: slice.poly.pattern ? {
                imageId: slice.poly.pattern.id,
                width: slice.poly.pattern.width
            } : undefined, extruded, height: extruded ? slice.poly.extrusion.height : 0 });
    }
    return undefined;
}
/**
 * Utility method for getting point labels from API tile response.
 */
function* extractPolygons(tile, decodedApiTile, tileMinZoom, tileMaxZoom) {
    const polygons = decodedApiTile.polygons;
    if (polygons) {
        const converter = new _tile_world_coordinates_converter__WEBPACK_IMPORTED_MODULE_0__["default"](tile);
        let ringCountOffset = 0;
        let ringSizeOffset = 0;
        let coordsOffset = 0;
        const meshes = polygons.mesh.reduce((meshes, mesh) => (meshes.set(mesh.polygonId, mesh), meshes), new Map());
        while (ringCountOffset < polygons.ringCount.length) {
            const polygonRingSizeLength = polygons.ringCount[ringCountOffset];
            const polygonRingSizeOffset = ringSizeOffset;
            const polygonCoordsOffset = coordsOffset;
            const classId = polygons.classId[ringCountOffset];
            const styles = [
                ...Object(_extract_styles__WEBPACK_IMPORTED_MODULE_2__["default"])(decodedApiTile.presentation, classId, convertZoomSliceToStyle, tileMinZoom, tileMaxZoom)
            ];
            const isExtruded = styles[0] && styles[0].extruded;
            const height = isExtruded ?
                converter.toWorldZCoordinate(polygons.height[ringCountOffset] || styles[0].height || 0) :
                0;
            const externalMesh = isExtruded ?
                convertMeshDescription(height, converter, styles, meshes.get(ringCountOffset)) :
                undefined;
            let coordsLength = 0;
            for (let i = 0; i < polygonRingSizeLength; i++) {
                coordsLength += polygons.ringSize[ringSizeOffset + i];
            }
            yield {
                vertexRings: [...Object(_util_iterable__WEBPACK_IMPORTED_MODULE_3__["mapIterable"])(extractRings(polygons, polygonCoordsOffset, polygonRingSizeOffset, polygonRingSizeLength, converter), (ringIterable) => [...ringIterable])],
                height,
                externalMesh,
                styles
            };
            ringSizeOffset += polygonRingSizeLength;
            coordsOffset += coordsLength;
            ringCountOffset++;
        }
    }
}


/***/ }),
/* 65 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExtrudedPolygonBufferWriter", function() { return ExtrudedPolygonBufferWriter; });
/* harmony import */ var _util_triangulate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(53);
/* harmony import */ var _primitive_model_model_buffer_writer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(66);
/* harmony import */ var _util_color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(38);



/**
 * Buffer writer that writes extruded polygons as 3D meshes.
 * It just moves a polygon up to the height and adds the "walls" around.
 */
class ExtrudedPolygonBufferWriter extends _primitive_model_model_buffer_writer__WEBPACK_IMPORTED_MODULE_1__["default"] {
    /**
     * Writes a polygon as a prism with specified height and with only one upper base.
     *
     * @param polygon The form of the prism's base.
     * @param height The height of the prism, world z-coordinate.
     * @returns The location of the mesh in a buffer.
     */
    writePolygon(polygon, height, color) {
        const encodedColor = Object(_util_color__WEBPACK_IMPORTED_MODULE_2__["encodeRgba8"])(color);
        const vertices = polygon.vertexRings.reduce((vertices, ring) => (vertices.push(...ring), vertices), []);
        for (const vertex of vertices) {
            this._writeVertex(Object.assign({}, vertex, { z: height }), encodedColor);
        }
        for (const vertex of vertices) {
            this._writeVertex(Object.assign({}, vertex, { z: 0 }), encodedColor);
        }
        this.writeIndices(Object(_util_triangulate__WEBPACK_IMPORTED_MODULE_0__["default"])(polygon.vertexRings));
        this._buildWall(polygon.vertexRings, vertices.length);
        return this.endMesh();
    }
    _buildWall(vertexRings, verticesCount) {
        let offset = 0;
        for (const ring of vertexRings) {
            for (let i = 0; i < ring.length; i++) {
                const from = offset + i;
                const to = offset + (i + 1) % ring.length;
                this.writeIndices([
                    from + verticesCount,
                    to,
                    from,
                    from + verticesCount,
                    to + verticesCount,
                    to
                ]);
            }
            offset += ring.length;
        }
    }
}


/***/ }),
/* 66 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ModelBufferWriter; });
/* harmony import */ var _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(56);
/* harmony import */ var _util_buffer_writer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(49);


/**
 * Base class for 3D models buffer writers. It is not supposed to write indices, instead it writes vertices (possibly
 * duplicated) in order that correspond to triangular facets of the mesh.
 */
class ModelBufferWriter extends _util_buffer_writer__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor() {
        super(ModelBufferWriter.ATTRIBUTE_MAPPING.vertexByteSize);
    }
    /**
     * Writes a vertex to the vertex buffer.
     */
    _writeVertex(v, colorRgba8) {
        const vertexIdx = this.getCurrentVertexIdx();
        this._writeWorldCoordinate(v);
        this._writeFloat32(v.z);
        this._writeWord(colorRgba8);
        return vertexIdx;
    }
}
/**
 * Description of how attributes of vertices are packed into a vertex buffer.
 */
ModelBufferWriter.ATTRIBUTE_MAPPING = new _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__["AttributeMapping"]([
    [
        0 /* POSITION_HIGH */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        1 /* POSITION_LOW */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        3 /* HEIGHT */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ],
    [
        7 /* COLOR */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ]
]);


/***/ }),
/* 67 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return extractCurvedLabels; });
/* harmony import */ var _tile_world_coordinates_converter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(40);
/* harmony import */ var _extract_styles__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(45);
/* harmony import */ var _extract_labels__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(68);



/**
 * Utility method for getting label polyline from API tile response.
 *
 * @param curvedLabels API tile response.
 * @param polylineOffset Offset of polyline in vertex arrays.
 * @param polylineLength Number of points in polyline.
 * @param converter Vertex coordinates are stored in tile coordinates, output should be converted.
 */
function* extractPolyline(curvedLabels, polylineOffset, polylineLength, converter) {
    // the first vertex is in absolute tile coordinates,
    // others - in deltas that should be added to the previous (accumulated) value
    let x = 0;
    let y = 0;
    for (let i = 0; i < polylineLength; i++) {
        yield converter.toWorldCoordinates(x += curvedLabels.vertexX[polylineOffset + i], y += curvedLabels.vertexY[polylineOffset + i]);
    }
}
/**
 * Utility method for getting texts (text and altText) from API tile response. These texts are both optional and
 * returned iterable may contains from 0 to 2 texts.
 *
 * @param curvedLabels API tile response.
 * @param index Label position in curvedLabels's text/textAlt arrays.
 */
function* extractTexts(curvedLabels, index) {
    if (curvedLabels.text[index]) {
        yield {
            textLines: [{ glyphIds: curvedLabels.text[index].glyphs }]
        };
    }
    if (curvedLabels.textAlt[index] && curvedLabels.textAlt[index].glyphs.length > 0) {
        yield {
            textLines: [{ glyphIds: curvedLabels.textAlt[index].glyphs }]
        };
    }
}
/**
 * Overridden style converter, takes care of vertical distance extraction.
 */
function convertZoomSliceToCurvedLabelStyle(slice, styleBase) {
    const style = Object(_extract_labels__WEBPACK_IMPORTED_MODULE_2__["convertZoomSliceToLabelStyle"])(slice, styleBase);
    if (style && slice.label && slice.label.hdistance) {
        style.distance = slice.label.hdistance;
    }
    return style;
}
/**
 * Utility method for getting curved labels from API tile response.
 */
function* extractCurvedLabels(tile, decodedApiTile, tileMinZoom, tileMaxZoom) {
    const labels = decodedApiTile.polylineLabels;
    if (labels) {
        const converter = new _tile_world_coordinates_converter__WEBPACK_IMPORTED_MODULE_0__["default"](tile);
        let offset = 0;
        for (let i = 0; i < labels.text.length; i++) {
            const classId = labels.classId[i];
            const vertexCount = labels.verticesCount[i];
            yield {
                polyline: [...extractPolyline(labels, offset, vertexCount, converter)],
                priority: labels.priority[i],
                texts: [...extractTexts(labels, i)],
                styles: [
                    ...Object(_extract_styles__WEBPACK_IMPORTED_MODULE_1__["default"])(decodedApiTile.presentation, classId, convertZoomSliceToCurvedLabelStyle, tileMinZoom, tileMaxZoom)
                ]
            };
            offset += vertexCount;
        }
    }
}


/***/ }),
/* 68 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertZoomSliceToLabelStyle", function() { return convertZoomSliceToLabelStyle; });
/* harmony import */ var _util_color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38);

function convertTextStyle(style) {
    return {
        color: Object(_util_color__WEBPACK_IMPORTED_MODULE_0__["decodeAbgr8"])(style.color),
        outlineColor: Object(_util_color__WEBPACK_IMPORTED_MODULE_0__["decodeAbgr8"])(style.outlineColor),
        fontId: style.fontId,
        fontSize: style.fontSize
    };
}
/**
 * Utility method for getting point label specific style details from a zoom slice.
 * To be used as a zoom slice style converter for style extractor.
 */
function convertZoomSliceToLabelStyle(slice, styleBase) {
    const styles = [];
    if (slice.label) {
        if (slice.label.text) {
            styles.push(convertTextStyle(slice.label.text));
        }
        if (slice.label.textAlt) {
            styles.push(convertTextStyle(slice.label.textAlt));
        }
        return Object.assign({}, styleBase, { distance: 0, styles: styles, align: 1 /* CENTER */, background: slice.label.background ?
                {
                    color: Object(_util_color__WEBPACK_IMPORTED_MODULE_0__["decodeAbgr8"])(slice.label.background.color),
                    verticalPadding: slice.label.background.vPadding,
                    horizontalPadding: slice.label.background.hPadding
                } :
                undefined });
    }
    return undefined;
}


/***/ }),
/* 69 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return extractPointLabel; });
/* harmony import */ var _proto_aliases__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(14);
/* harmony import */ var _tile_world_coordinates_converter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(40);
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(43);
/* harmony import */ var _extract_styles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(45);
/* harmony import */ var _extract_labels__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(68);





const ALIGNMENT = {
    [_proto_aliases__WEBPACK_IMPORTED_MODULE_0__["Tile"].StraightLabels.AlignType.Left]: 0 /* LEFT */,
    [_proto_aliases__WEBPACK_IMPORTED_MODULE_0__["Tile"].StraightLabels.AlignType.Right]: 2 /* RIGHT */,
    [_proto_aliases__WEBPACK_IMPORTED_MODULE_0__["Tile"].StraightLabels.AlignType.Center]: 1 /* CENTER */
};
/**
 * Utility method for getting texts (text and altText) from API tile response. These texts are both optional and
 * returned iterable may contains from 0 to 2 texts.
 *
 * @param pointLabels API tile response.
 * @param index Label position in pointLabel's text/textAlt arrays.
 */
function* extractTexts(pointLabels, index) {
    if (pointLabels.text[index]) {
        yield {
            textLines: pointLabels.text[index].strings.map((str) => ({ glyphIds: str.glyphs }))
        };
    }
    if (pointLabels.textAlt[index] && pointLabels.textAlt[index].strings.length > 0) {
        yield {
            textLines: pointLabels.textAlt[index].strings.map((str) => ({ glyphIds: str.glyphs }))
        };
    }
}
/**
 * Overridden style converter, takes care of vertical distance extraction.
 */
function convertZoomSliceToStraightLabelStyle(slice, styleBase) {
    const style = Object(_extract_labels__WEBPACK_IMPORTED_MODULE_4__["convertZoomSliceToLabelStyle"])(slice, styleBase);
    if (style && slice.label) {
        style.distance = slice.label.vdistance;
    }
    return style;
}
/**
 * Utility method for getting point labels from API tile response.
 */
function* extractPointLabel(tile, decodedApiTile, tileMinZoom, tileMaxZoom) {
    const pointLabels = decodedApiTile.pointLabels;
    if (pointLabels) {
        const converter = new _tile_world_coordinates_converter__WEBPACK_IMPORTED_MODULE_1__["default"](tile);
        for (let i = 0; i < pointLabels.text.length; i++) {
            const classId = pointLabels.classId[i];
            const styles = [...Object(_extract_styles__WEBPACK_IMPORTED_MODULE_3__["default"])(decodedApiTile.presentation, classId, convertZoomSliceToStraightLabelStyle, tileMinZoom, tileMaxZoom)];
            for (const style of styles) {
                style.align = ALIGNMENT[pointLabels.align[i]];
            }
            yield {
                anchorPoint: converter.toWorldCoordinates(pointLabels.centerX[i], pointLabels.centerY[i]),
                offset: _math_vector2__WEBPACK_IMPORTED_MODULE_2__["create"](pointLabels.offsetX[i], pointLabels.offsetY[i]),
                priority: pointLabels.priority[i],
                texts: [...extractTexts(pointLabels, i)],
                styles: styles
            };
        }
    }
}


/***/ }),
/* 70 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return layoutPointLabel; });
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43);

/**
 * @returns Full width of all line glyphs using glyph's advance metric (it doesn't take into account the font size).
 */
function calculateLineWidth(font, line) {
    return line.glyphIds.reduce((width, glyphId) => {
        return width + font.getGlyph(glyphId).advance;
    }, 0);
}
/**
 * @returns Real max height of the line looking through all the glyphs and their bearingY and height metrics.
 */
function calculateLineHeight(font, line) {
    let maxHeightAboveBaseline = 0;
    let maxHeightBelowBaseline = 0;
    for (const glyphId of line.glyphIds) {
        const glyph = font.getGlyph(glyphId);
        maxHeightAboveBaseline = Math.max(maxHeightAboveBaseline, glyph.bearingY);
        maxHeightBelowBaseline = Math.max(maxHeightBelowBaseline, glyph.height - glyph.bearingY);
    }
    return maxHeightAboveBaseline + maxHeightBelowBaseline;
}
/**
 * Layout one straight line in absolute (to the whole label) coordinates using the origin point as an offset vector.
 */
function* layoutLine(textLine, xOrigin, yOrigin, font, scale) {
    const glyphIds = textLine.glyphIds;
    const length = glyphIds.length;
    for (let i = 0; i < length; i++) {
        const glyph = font.getGlyph(glyphIds[i]);
        const left = xOrigin + (glyph.bearingX - font.margin) * scale;
        const right = xOrigin + (glyph.bearingX + glyph.width + font.margin) * scale;
        const top = yOrigin + (glyph.bearingY + font.margin) * scale;
        const bottom = yOrigin + (glyph.bearingY - glyph.height - font.margin) * scale;
        const topLeft = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["create"](left, top);
        const topRight = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["create"](right, top);
        const bottomRight = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["create"](right, bottom);
        const bottomLeft = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["create"](left, bottom);
        yield {
            fontId: font.id,
            glyphId: glyph.id,
            scale,
            topLeft,
            topRight,
            bottomRight,
            bottomLeft
        };
        xOrigin += glyph.advance * scale;
    }
}
/**
 * How bigger the line height to the font size.
 */
const LINE_HEIGHT_FACTOR = 1.5;
/**
 * Additional space between the lines.
 */
const FONT_LEADING = 3;
/**
 * Creates layout of glyphs in abstract points, that are roughly correspond to CSS pixels and should be rendered
 * accordingly. Text's textLines all start from new lines, a text is just a set of lines with common styles.
 * The origin (0, 0) depending on the alignment is located at:
 *  * the first line's baseline leftmost point for LEFT
 *  * the first line's baseline center point for CENTER
 *  * the first line's baseline rightmost point for RIGHT
 */
function layoutPointLabel(label, labelStyle, fontRegistry) {
    const layout = [];
    const textLineDetails = label.texts.map((text, i) => {
        const textStyle = labelStyle.styles[i];
        const font = fontRegistry.get(textStyle.fontId);
        const scale = textStyle.fontSize / font.xheight;
        const height = textStyle.fontSize * LINE_HEIGHT_FACTOR;
        return text.textLines.map((line) => {
            const width = calculateLineWidth(font, line) * scale;
            const maxHeight = calculateLineHeight(font, line) * scale;
            return { line, font, scale, width, height, maxHeight };
        });
    });
    const bboxSize = textLineDetails.reduce((bboxSize, lineSizes) => {
        return lineSizes.reduce((bboxSize, lineSize) => {
            bboxSize.width = Math.max(bboxSize.width, lineSize.width);
            bboxSize.height += lineSize.maxHeight;
            return bboxSize;
        }, bboxSize);
    }, {
        width: 0,
        height: labelStyle.distance * (textLineDetails.length - 1)
    });
    const xOrigin = label.offset.x - bboxSize.width / 2;
    let yOrigin = label.offset.y + bboxSize.height / 2;
    let isFirstTextLine = true;
    for (const textLines of textLineDetails) {
        const textLayout = [];
        for (const line of textLines) {
            const lineYOrigin = (yOrigin -= line.height + (isFirstTextLine ? 0 : FONT_LEADING));
            const lineXOrigin = xOrigin + ((labelStyle.align === 0 /* LEFT */) ? 0 :
                (labelStyle.align === 1 /* CENTER */) ? (bboxSize.width - line.width) / 2 :
                    (labelStyle.align === 2 /* RIGHT */) ? (bboxSize.width - line.width) : 0);
            isFirstTextLine = false;
            for (const glyphLayout of layoutLine(line.line, lineXOrigin, lineYOrigin, line.font, line.scale)) {
                textLayout.push(glyphLayout);
            }
        }
        yOrigin -= labelStyle.distance;
        layout.push(textLayout);
    }
    return layout;
}


/***/ }),
/* 71 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return BillboardRectangleBufferWriter; });
/* harmony import */ var _util_buffer_writer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(49);
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43);
/* harmony import */ var _util_color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(38);
/* harmony import */ var _attribute_mapping__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(72);
/* harmony import */ var _util_gputypes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(50);





const BOTTOM_LEFT_UV_INT16 = _math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](-0x8000, -0x8000);
const TOP_LEFT_UV_INT16 = _math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](-0x8000, 0x7fff);
const BOTTOM_RIGHT_UV_INT16 = _math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](0x7fff, -0x8000);
const TOP_RIGHT_UV_INT16 = _math_vector2__WEBPACK_IMPORTED_MODULE_1__["create"](0x7fff, 0x7fff);
/**
 * Writer of geometry data of rectangles.
 */
class BillboardRectangleBufferWriter extends _util_buffer_writer__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(_attribute_mapping__WEBPACK_IMPORTED_MODULE_3__["BILLBOARD_RECTANGLE_ATTRIBUTE_MAPPING"].vertexByteSize);
    }
    /**
     * Writes a rectangle to buffers.
     *
     * @returns Location of the image data in buffers.
     */
    writeRectangle(id, rectangle, style) {
        const idHigh = id >> 8;
        const idLow = id & 0xff;
        const { borderRadius, offset, width, height } = style;
        const halfWidth = width / 2;
        const halfHeight = height / 2;
        const colorRgba8 = Object(_util_color__WEBPACK_IMPORTED_MODULE_2__["encodeRgba8"])(style.color);
        const borderRadiusX = borderRadius / halfWidth;
        const borderRadiusY = borderRadius / halfHeight;
        this._writeVertex(idHigh, idLow, rectangle.position, -halfWidth, -halfHeight, offset, BOTTOM_LEFT_UV_INT16, colorRgba8, borderRadiusX, borderRadiusY);
        this._writeVertex(idHigh, idLow, rectangle.position, -halfWidth, halfHeight, offset, TOP_LEFT_UV_INT16, colorRgba8, borderRadiusX, borderRadiusY);
        this._writeVertex(idHigh, idLow, rectangle.position, halfWidth, -halfHeight, offset, BOTTOM_RIGHT_UV_INT16, colorRgba8, borderRadiusX, borderRadiusY);
        this._writeVertex(idHigh, idLow, rectangle.position, halfWidth, halfHeight, offset, TOP_RIGHT_UV_INT16, colorRgba8, borderRadiusX, borderRadiusY);
        this.writeIndicesForContinuousStrip(4);
        return this.endMesh();
    }
    /**
     * Writes a vertex to the vertex buffer.
     *
     * @param idHigh Most significant 8 bits of rectangle id.
     * @param idLow Least significant 8 bits of rectangle id.
     * @param position World coordinate of rectangle.
     * @param displacementX X coordinate displacement in pixels of concrete vertex.
     * @param displacementY Y coordinate displacement in pixels of concrete vertex.
     * @param offset Additional displacement for all vertices specified in style.
     * @param uv UV coordinated of the vertex of the rectangle.
     * @param color Background color encoded into RGBA8
     * @param borderRadiusX Radius of corner rounding along X axis (i.e., horizontal
     *      axis of rounding ellipse).
     * @param borderRadiusY Radius of corner rounding along Y axis (i.e., vertical
     *      axis of rounding ellipse).
     * @returns Index of the written vertex.
     */
    _writeVertex(idHigh, idLow, position, displacementX, displacementY, offset, uv, colorRgba8, borderRadiusX, borderRadiusY) {
        const vertexIdx = this.getCurrentVertexIdx();
        this._writeBytes(idHigh, idLow, 0, 0);
        this._writeWorldCoordinate(position);
        this._writeFloat32(displacementX + offset.x);
        this._writeFloat32(displacementY + offset.y);
        this._writeHalfWords(uv.x, uv.y);
        this._writeWord(colorRgba8);
        this._writeHalfWords(Object(_util_gputypes__WEBPACK_IMPORTED_MODULE_4__["floatToUint16"])(borderRadiusX), Object(_util_gputypes__WEBPACK_IMPORTED_MODULE_4__["floatToUint16"])(borderRadiusY));
        return vertexIdx;
    }
}


/***/ }),
/* 72 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BILLBOARD_RECTANGLE_ATTRIBUTE_MAPPING", function() { return BILLBOARD_RECTANGLE_ATTRIBUTE_MAPPING; });
/* harmony import */ var _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(56);

/** Description of how a writer stores vertex data. */
const BILLBOARD_RECTANGLE_ATTRIBUTE_MAPPING = new _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__["AttributeMapping"]([
    [
        2 /* ID */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    [
        0 /* POSITION_HIGH */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        1 /* POSITION_LOW */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        6 /* DISPLACEMENT */,
        {
            size: 2,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ],
    [
        4 /* UV */,
        {
            size: 2,
            type: 5122 /* SHORT */,
            normalized: true
        }
    ],
    [
        7 /* COLOR */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    [
        11 /* AUX */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ]
]);


/***/ }),
/* 73 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PointLabelBufferWriter; });
/* harmony import */ var _util_buffer_writer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(49);
/* harmony import */ var _util_iterable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(57);
/* harmony import */ var _util_color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(38);
/* harmony import */ var _util_z_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(59);
/* harmony import */ var _point_label_attribute_mapping__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(74);





/**
 * Writer of geometry data of point labels.
 */
class PointLabelBufferWriter extends _util_buffer_writer__WEBPACK_IMPORTED_MODULE_0__["default"] {
    constructor() {
        super(_point_label_attribute_mapping__WEBPACK_IMPORTED_MODULE_4__["POINT_LABEL_ATTRIBUTE_MAPPING"].vertexByteSize);
    }
    /**
     * Writes point label to buffers.
     *
     * @param id Label id.
     * @param label Label to be written to buffers.
     * @param style Style of the label, that directly affects written data.
     * @param fontRegistry Registry of all system fonts, it should contain fonts used in this label styles.
     * @param glyphAtlas Atlas of all system glyphs, it should contain glyphs used in this label.
     *
     * @returns Location of the data in buffers.
     */
    writePointLabel(id, label, style, layout, glyphAtlas) {
        const idHigh = id >> 8;
        const idLow = id & 0xff;
        const position = label.anchorPoint;
        const priority = Object(_util_z_index__WEBPACK_IMPORTED_MODULE_3__["intToZIndex"])(label.priority);
        for (const [textLayout, textStyle] of Object(_util_iterable__WEBPACK_IMPORTED_MODULE_1__["zipIterables"])(layout, style.styles)) {
            const textColorRgba8 = Object(_util_color__WEBPACK_IMPORTED_MODULE_2__["encodeRgba8"])(textStyle.color);
            const outlineColorRgba8 = Object(_util_color__WEBPACK_IMPORTED_MODULE_2__["encodeRgba8"])(textStyle.outlineColor);
            for (const glyph of textLayout) {
                const allocatedGlyph = glyphAtlas.getGlyphLocation(glyph.fontId, glyph.glyphId);
                const v1 = this._writeVertex(idHigh, idLow, position, glyph.topLeft, {
                    x: allocatedGlyph.minX,
                    y: allocatedGlyph.minY
                }, textColorRgba8, outlineColorRgba8, priority, glyph.scale);
                const v2 = this._writeVertex(idHigh, idLow, position, glyph.topRight, {
                    x: allocatedGlyph.maxX,
                    y: allocatedGlyph.minY
                }, textColorRgba8, outlineColorRgba8, priority, glyph.scale);
                const v3 = this._writeVertex(idHigh, idLow, position, glyph.bottomRight, {
                    x: allocatedGlyph.maxX,
                    y: allocatedGlyph.maxY
                }, textColorRgba8, outlineColorRgba8, priority, glyph.scale);
                const v4 = this._writeVertex(idHigh, idLow, position, glyph.bottomLeft, {
                    x: allocatedGlyph.minX,
                    y: allocatedGlyph.maxY
                }, textColorRgba8, outlineColorRgba8, priority, glyph.scale);
                this.writeIndices([v1, v2, v3, v1, v3, v4]);
            }
        }
        return this.endMesh();
    }
    /**
     * Writes a vertex to the vertex buffer. See attribute descriptions in the ATTRIBUTE_MAPPING property.
     */
    _writeVertex(idHigh, idLow, position, displacement, uv, colorRgba8, outlineColorRgba8, priority, scale) {
        const vertexIdx = this.getCurrentVertexIdx();
        this._writeBytes(idHigh, idLow, 0, 0);
        this._writeWorldCoordinate(position);
        this._writeFloat32(displacement.x);
        this._writeFloat32(displacement.y);
        this._writeHalfWords(uv.x, uv.y);
        this._writeWord(colorRgba8);
        this._writeWord(outlineColorRgba8);
        this._writeFloat32(priority);
        this._writeFloat32(scale);
        return vertexIdx;
    }
}


/***/ }),
/* 74 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POINT_LABEL_ATTRIBUTE_MAPPING", function() { return POINT_LABEL_ATTRIBUTE_MAPPING; });
/* harmony import */ var _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(56);

/** Description of how a writer stores vertex data. */
const POINT_LABEL_ATTRIBUTE_MAPPING = new _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__["AttributeMapping"]([
    [
        2 /* ID */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    [
        0 /* POSITION_HIGH */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        1 /* POSITION_LOW */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        6 /* DISPLACEMENT */,
        {
            size: 2,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ],
    [
        4 /* UV */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: false
        }
    ],
    [
        7 /* COLOR */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    [
        8 /* OUTLINE_COLOR */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    [
        9 /* PRIORITY */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ],
    [
        11 /* AUX */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ]
]);


/***/ }),
/* 75 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return CurvedLabelBufferWriter; });
/* harmony import */ var _math_vector2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43);
/* harmony import */ var _util_buffer_writer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(49);
/* harmony import */ var _util_gputypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(50);
/* harmony import */ var _util_z_index__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(59);
/* harmony import */ var _util_iterable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(57);
/* harmony import */ var _util_color__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(38);
/* harmony import */ var _layout_curved_label__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(76);
/* harmony import */ var _util_polyline__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(47);
/* harmony import */ var _curved_label_attribute_mapping__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(77);
/* harmony import */ var _id_manager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(78);










const POLYLINE_SIDE_LENGTH = 4;
/**
 * Writer of geometry data of curved labels.
 */
class CurvedLabelBufferWriter extends _util_buffer_writer__WEBPACK_IMPORTED_MODULE_1__["default"] {
    constructor() {
        super(_curved_label_attribute_mapping__WEBPACK_IMPORTED_MODULE_8__["CURVED_LABEL_ATTRIBUTE_MAPPING"].vertexByteSize);
    }
    /**
     * Writes curved label to buffers.
     *
     * @param label Label to be written to buffers.
     * @param style Style of the label, that directly affects written data.
     * @param fontRegistry Registry of all system fonts, it should contain fonts used in this label styles.
     * @param glyphAtlas Atlas of all system glyphs, it should contain glyphs used in this label.
     *
     * @returns Location of the data in buffers.
     */
    writeLabel(label, style, fontRegistry, glyphAtlas) {
        const id = Object(_id_manager__WEBPACK_IMPORTED_MODULE_9__["getId"])();
        const idHigh = id >> 8;
        const idLow = id & 0xff;
        const textLayouts = Object(_layout_curved_label__WEBPACK_IMPORTED_MODULE_6__["default"])(label, style, fontRegistry);
        const priority = Object(_util_z_index__WEBPACK_IMPORTED_MODULE_3__["intToZIndex"])(label.priority);
        // To make layouting on GPU possible guiding polyline should be splitted on left/right parts,
        // mid point of the polyline is used to anchor the label. This information is not changed at runtime and
        // simplifies calculations in shaders.
        const polyline = Object(_util_polyline__WEBPACK_IMPORTED_MODULE_7__["splitPolyline"])(label.polyline);
        const midPoint = polyline[1][0];
        polyline[0].reverse(); // left part must be reversed to write both parts alike
        for (const polylinePart of polyline) {
            for (let i = 1; i < polylinePart.length; i++) {
                // write polyline vertex as delta to the mid point to get reasonable precision from float
                _math_vector2__WEBPACK_IMPORTED_MODULE_0__["sub"](polylinePart[i], midPoint, polylinePart[i]);
            }
        }
        for (const [textLayout, textStyle] of Object(_util_iterable__WEBPACK_IMPORTED_MODULE_4__["zipIterables"])(textLayouts, style.styles)) {
            const textColorRgba8 = Object(_util_color__WEBPACK_IMPORTED_MODULE_5__["encodeRgba8"])(textStyle.color);
            const outlineColorRgba8 = Object(_util_color__WEBPACK_IMPORTED_MODULE_5__["encodeRgba8"])(textStyle.outlineColor);
            for (const glyph of textLayout) {
                const allocatedGlyph = glyphAtlas.getGlyphLocation(glyph.fontId, glyph.glyphId);
                const v1 = this._writeVertex(idHigh, idLow, midPoint, glyph.topLeft, {
                    x: allocatedGlyph.minX,
                    y: allocatedGlyph.minY
                }, textColorRgba8, outlineColorRgba8, priority, glyph.lineDisplacement, polyline, glyph.scale);
                const v2 = this._writeVertex(idHigh, idLow, midPoint, glyph.topRight, {
                    x: allocatedGlyph.maxX,
                    y: allocatedGlyph.minY
                }, textColorRgba8, outlineColorRgba8, priority, glyph.lineDisplacement, polyline, glyph.scale);
                const v3 = this._writeVertex(idHigh, idLow, midPoint, glyph.bottomRight, {
                    x: allocatedGlyph.maxX,
                    y: allocatedGlyph.maxY
                }, textColorRgba8, outlineColorRgba8, priority, glyph.lineDisplacement, polyline, glyph.scale);
                const v4 = this._writeVertex(idHigh, idLow, midPoint, glyph.bottomLeft, {
                    x: allocatedGlyph.minX,
                    y: allocatedGlyph.maxY
                }, textColorRgba8, outlineColorRgba8, priority, glyph.lineDisplacement, polyline, glyph.scale);
                this.writeIndices([v1, v2, v3, v1, v3, v4]);
            }
        }
        return this.endMesh();
    }
    /**
     * Writes a vertex to the vertex buffer. See attribute descriptions in the ATTRIBUTE_MAPPING property.
     */
    _writeVertex(idHigh, idLow, position, displacement, uv, colorRgba8, outlineColorRgba8, priority, lineDisplacement, polyline, scale) {
        const vertexIdx = this.getCurrentVertexIdx();
        this._writeBytes(idHigh, idLow, 0, 0);
        this._writeWorldCoordinate(position);
        this._writeFloat32(displacement.x);
        this._writeFloat32(displacement.y);
        this._writeFloat32(lineDisplacement);
        this._writeHalfWords(uv.x, uv.y);
        this._writeWord(colorRgba8);
        this._writeWord(outlineColorRgba8);
        this._writeFloat32(priority);
        const polylineLength = this._computePolylineLength(polyline);
        for (const polylinePart of polyline) {
            this._writePolylinePart(polylinePart, polylineLength);
        }
        this._writeFloat32(polylineLength);
        this._writeFloat32(scale);
        return vertexIdx;
    }
    /**
     * Writes polyline's left or right part to buffers. Polyline part consists of segments (two consecutive points in
     * the polylinePart array).
     *
     * @param polylinePart Polyline part to be written.
     * @param polylineLength Total length of the polyline.
     */
    _writePolylinePart(polylinePart, polylineLength) {
        const points = [];
        for (let i = 1; i <= POLYLINE_SIDE_LENGTH; i++) {
            points.push(this._encodePoint(polylinePart[i], polylineLength));
        }
        // Ratios and angles of the points are encoded in different sizes so each point of the polyline is stored in two
        // attribute's corresponding components.
        for (let i = 0; i < POLYLINE_SIDE_LENGTH; i += 4) {
            this._writeBytes(Object(_util_gputypes__WEBPACK_IMPORTED_MODULE_2__["floatToUint8"])(points[i].ratio), Object(_util_gputypes__WEBPACK_IMPORTED_MODULE_2__["floatToUint8"])(points[i + 1].ratio), Object(_util_gputypes__WEBPACK_IMPORTED_MODULE_2__["floatToUint8"])(points[i + 2].ratio), Object(_util_gputypes__WEBPACK_IMPORTED_MODULE_2__["floatToUint8"])(points[i + 3].ratio));
        }
        for (let i = 0; i < POLYLINE_SIDE_LENGTH; i += 2) {
            this._writeHalfWords(Object(_util_gputypes__WEBPACK_IMPORTED_MODULE_2__["floatToUint16"])(points[i].angle), Object(_util_gputypes__WEBPACK_IMPORTED_MODULE_2__["floatToUint16"])(points[i + 1].angle));
        }
    }
    /**
     * Encodes a point of the polyline's segment as a vector (from the polyline center) by its normalized angle and the
     * ratio of its length to the polyline's length.
     *
     * @param point Point to be encoded.
     * @param polylineLength Total length of the polyline.
     */
    _encodePoint(point = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0), polylineLength) {
        const ratio = _math_vector2__WEBPACK_IMPORTED_MODULE_0__["length"](point) / polylineLength;
        const angle = (Math.atan2(point.y, point.x) + Math.PI) / (2 * Math.PI);
        return { ratio, angle };
    }
    /**
     * Computes the total length of the polyine. Polyline will be limited by `POLYLINE_SIDE_LENGTH` segments on each
     * side.
     *
     * @param polyline
     */
    _computePolylineLength(polyline) {
        let polylineLength = 0;
        for (const polylinePart of polyline) {
            for (let i = 1; i <= POLYLINE_SIDE_LENGTH; i++) {
                if (polylinePart[i]) {
                    polylineLength += _math_vector2__WEBPACK_IMPORTED_MODULE_0__["length"](polylinePart[i]);
                }
            }
        }
        return polylineLength;
    }
}


/***/ }),
/* 76 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return layoutCurvedLabel; });
/* harmony import */ var _util_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(51);

/**
 * Label layouting is done partially on CPU and partially on GPU. This helper method is responsible for the CPU part,
 * it calculates glyph's corner positions on a straight line, that will lay on a curved  polyline later in GPU.
 * All the metrics are given in pixels.
 *
 * @returns Position of each glyph for each text separately.
 */
function layoutCurvedLabel(label, labelStyle, fontRegistry) {
    const layout = [];
    let lineDisplacement = 0;
    for (const [text, style] of Object(_util_array__WEBPACK_IMPORTED_MODULE_0__["zip"])(label.texts, labelStyle.styles)) {
        const textLayout = [];
        const font = fontRegistry.get(style.fontId);
        const scale = style.fontSize / font.xheight;
        const baselineOffset = style.fontSize / 2;
        for (const line of text.textLines) {
            for (const glyphId of line.glyphIds) {
                const glyph = font.getGlyph(glyphId);
                const top = (glyph.bearingY + font.margin) * scale;
                const bottom = (glyph.bearingY - glyph.height - font.margin) * scale;
                const left = (glyph.bearingX - font.margin) * scale;
                const right = (glyph.bearingX + glyph.width + font.margin) * scale;
                const widthHalf = (right - left) / 2;
                const leftShifted = left - widthHalf;
                const rightShifted = right - widthHalf;
                const topShifted = top - baselineOffset;
                const bottomShifted = bottom - baselineOffset;
                textLayout.push({
                    fontId: font.id,
                    glyphId: glyphId,
                    scale,
                    topLeft: { x: leftShifted, y: topShifted },
                    topRight: { x: rightShifted, y: topShifted },
                    bottomRight: { x: rightShifted, y: bottomShifted },
                    bottomLeft: { x: leftShifted, y: bottomShifted },
                    lineDisplacement: lineDisplacement + widthHalf
                });
                lineDisplacement += glyph.advance * scale;
            }
        }
        lineDisplacement += labelStyle.distance;
        layout.push(textLayout);
    }
    // remove trailing style distance (added at the end of each text above), as it must be in between texts only
    lineDisplacement -= labelStyle.distance;
    const lineDisplacementHalf = lineDisplacement / 2;
    for (const textLayout of layout) {
        for (const glyphLayout of textLayout) {
            glyphLayout.lineDisplacement -= lineDisplacementHalf;
        }
    }
    return layout;
}


/***/ }),
/* 77 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CURVED_LABEL_ATTRIBUTE_MAPPING", function() { return CURVED_LABEL_ATTRIBUTE_MAPPING; });
/* harmony import */ var _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(56);

/** Description of how a writer stores vertex data. */
const CURVED_LABEL_ATTRIBUTE_MAPPING = new _render_attrib_mapping__WEBPACK_IMPORTED_MODULE_0__["AttributeMapping"]([
    [
        2 /* ID */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    [
        0 /* POSITION_HIGH */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        1 /* POSITION_LOW */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        6 /* DISPLACEMENT */,
        {
            size: 3,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ],
    [
        4 /* UV */,
        {
            size: 2,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: false
        }
    ],
    [
        7 /* COLOR */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    [
        8 /* OUTLINE_COLOR */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    [
        9 /* PRIORITY */,
        {
            size: 1,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ],
    [
        12 /* AUX1 */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    [
        13 /* AUX2 */,
        {
            size: 4,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        14 /* AUX3 */,
        {
            size: 4,
            type: 5121 /* UNSIGNED_BYTE */,
            normalized: true
        }
    ],
    [
        15 /* AUX4 */,
        {
            size: 4,
            type: 5123 /* UNSIGNED_SHORT */,
            normalized: true
        }
    ],
    [
        11 /* AUX */,
        {
            size: 2,
            type: 5126 /* FLOAT */,
            normalized: false
        }
    ]
]);


/***/ }),
/* 78 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getId", function() { return getId; });
// this value is mostly dictated by technical details of how visibility resolution is implemented: it uses
// a 256x256 texture and max number of distinct values that can be stored there is 256*256.
// Of course, we can compress it and use one pixel, say, for two/four ids, or use multiple textures, but it
// naturally complicates the solution, while ~65k ids is seen as "more than enough" (taking into account that
// ids are reused).
const MAX_ID = 0xffff;
let id = 0;
/**
 * Manages assignments of ids for primitives that must be distinguished in global space (e.g. for collision resolution).
 * Note that this class is not "thread safe", to use it in different memory spaces something like "id regions"
 * (similar to ip address assignment problem) is to be implemented.
 *
 *  @returns Pseudo unique id number from [0x0:0xffff] range, it increments previously returned id and starts from 0
 *     when the prev one is the max available, that gives acceptable degree of uniqueness for colliding primitives.
 */
function getId() {
    return id = ++id % MAX_ID;
}


/***/ }),
/* 79 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "calculatePointLabelBBox", function() { return calculatePointLabelBBox; });
/**
 * Calculates bbox of a layouted label, it just find the left/right/top/bottom-most points and adds paddings.
 */
function calculatePointLabelBBox(layout, verticalPadding, horizontalPadding) {
    const bbox = {
        minX: Number.MAX_VALUE,
        maxX: -Number.MAX_VALUE,
        minY: Number.MAX_VALUE,
        maxY: -Number.MAX_VALUE
    };
    for (const textLayout of layout) {
        for (const glyphLayout of textLayout) {
            bbox.minX = Math.min(bbox.minX, glyphLayout.topLeft.x);
            bbox.maxX = Math.max(bbox.maxX, glyphLayout.topRight.x);
            bbox.minY = Math.min(bbox.minY, glyphLayout.bottomLeft.y);
            bbox.maxY = Math.max(bbox.maxY, glyphLayout.topLeft.y);
        }
    }
    bbox.minX -= horizontalPadding;
    bbox.maxX += horizontalPadding;
    bbox.minY -= verticalPadding;
    bbox.maxY += verticalPadding;
    return bbox;
}


/***/ }),
/* 80 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TrimeshPolygonBufferWriter", function() { return TrimeshPolygonBufferWriter; });
/* harmony import */ var _trimesh_parse_trimesh__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(81);
/* harmony import */ var _math_scalar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(42);
/* harmony import */ var _primitive_model_model_buffer_writer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(66);
/* harmony import */ var _util_color__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(38);




/**
 * Buffer writer that writes trimesh object into common mesh buffers.
 */
class TrimeshPolygonBufferWriter extends _primitive_model_model_buffer_writer__WEBPACK_IMPORTED_MODULE_2__["default"] {
    /**
     * Writes a mesh from raw trimesh file data. Uses parseTrimesh() utility function
     * to get vertices and write them in correct order.
     *
     * @param data Raw (unzipped) trimesh file data.
     * @param mesh Description of the mesh in the world space.
     * @returns The location of the mesh in a buffer.
     */
    writeModel(data, mesh, color) {
        this._currentMesh = mesh;
        this._currentColor = Object(_util_color__WEBPACK_IMPORTED_MODULE_3__["encodeRgba8"])(color);
        let prevManifoldLocation;
        for (const manifoldLocation of Object(_trimesh_parse_trimesh__WEBPACK_IMPORTED_MODULE_0__["parseTrimesh"])(data, this)) {
            if (prevManifoldLocation) {
                // manifolds are written consequently, it allows to "accumulate" vertices and return
                // the location of the first one and the sum of the lengths
                if (prevManifoldLocation.bufferIndex === manifoldLocation.bufferIndex) {
                    prevManifoldLocation.vertexByteLength += manifoldLocation.vertexByteLength;
                    prevManifoldLocation.indexByteLength += manifoldLocation.indexByteLength;
                }
                else {
                    // return the first portion, very large (~65k vertices) object will be truncated
                    // TODO: consider support of such objects
                    break;
                }
            }
            else {
                prevManifoldLocation = manifoldLocation;
            }
        }
        return prevManifoldLocation;
    }
    /**
     * Stores converted to world space vertices to refer them later in indices writing.
     */
    writeVertex(vertex) {
        const mesh = this._currentMesh;
        if (mesh) {
            const bbox = mesh.bbox;
            vertex.x = _math_scalar__WEBPACK_IMPORTED_MODULE_1__["mix"](bbox.minX, bbox.maxX, vertex.x);
            vertex.y = _math_scalar__WEBPACK_IMPORTED_MODULE_1__["mix"](bbox.minY, bbox.maxY, vertex.y);
            vertex.z = _math_scalar__WEBPACK_IMPORTED_MODULE_1__["mix"](bbox.maxZ, bbox.minZ, vertex.z);
            return this._writeVertex(vertex, this._currentColor);
        }
        else {
            return -1;
        }
    }
    /**
     * Finishes current manifold and returns its location in a buffer.
     */
    flush() {
        return this.endMesh();
    }
}


/***/ }),
/* 81 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseTrimesh", function() { return parseTrimesh; });
/* harmony import */ var _file_reader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(82);
/* harmony import */ var _parse_manifold__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(86);
/* harmony import */ var _vertex_decoder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(88);



/**
 * Streaming parser of a trimesh file. It writes the model into an abstract output buffer, that have to manage
 * vertices storing. The model can be quite big, that is why it is flushed out by portions (manifolds) that could
 * be placed into separate buffers.
 * The format overview and motivation see here: https://wiki.yandex-team.ru/maps/dev/core/renderer/vec3d/.
 */
function* parseTrimesh(data, output) {
    const reader = new _file_reader__WEBPACK_IMPORTED_MODULE_0__["default"](data);
    const decoder = new _vertex_decoder__WEBPACK_IMPORTED_MODULE_2__["default"](reader.header.precision);
    while (reader.hasCommands()) {
        yield Object(_parse_manifold__WEBPACK_IMPORTED_MODULE_1__["parseManifold"])(reader, decoder, output);
    }
}


/***/ }),
/* 82 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return FileReader; });
/* harmony import */ var _math_vector3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(83);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(85);


const VALENCE_BIAS = {
    [0 /* ADD */]: 3,
    [1 /* HOLE */]: 3,
    [2 /* SPLIT */]: 1,
    [3 /* MERGE */]: 1
};
const HEADER_BYTE_SIZE = 13;
/**
 * Parses raw trimesh file data. See the format described here:
 * https://wiki.yandex-team.ru/maps/dev/core/renderer/vec3d/#strukturafajjla.
 */
class FileReader {
    constructor(data) {
        this._view = new DataView(data);
        this.header = {
            signature: this._view.getUint32(0, true),
            nCmdAdd: this._view.getUint32(4, true),
            nCmdEtc: this._view.getUint16(8, true),
            nAux: this._view.getUint16(10, true),
            precision: this._view.getUint8(12)
        };
        this._auxOffset = HEADER_BYTE_SIZE;
        this._cmdOffset = this._auxOffset + this.header.nAux * 2;
        this._diffOffset = this._cmdOffset + this.header.nCmdAdd + this.header.nCmdEtc;
        this._cmdEnd = this._diffOffset;
    }
    /**
     * @returns The next command and increases the command cursor.
     */
    readCommand(dst = { type: 0 /* ADD */, valence: 0, shift: 0 }) {
        const commandPacked = this._view.getUint8(this._cmdOffset++);
        const type = commandPacked & 0b11;
        let valence = commandPacked >> 2;
        valence = valence !== 0 ? valence - 1 : this._readAux() + 62;
        valence += VALENCE_BIAS[type];
        const shift = type === 2 /* SPLIT */ || type === 3 /* MERGE */ ? this._readAux() : 0;
        dst.type = type;
        dst.valence = valence;
        dst.shift = shift;
        return dst;
    }
    /**
     * @returns The next diff and increases the diff cursor.
     */
    readDiff(dst = _math_vector3__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0, 0)) {
        dst.x = this._readDiff(this._diffOffset + this.header.nCmdAdd * 3, this._diffOffset + this.header.nCmdAdd * 0);
        dst.y = this._readDiff(this._diffOffset + this.header.nCmdAdd * 4, this._diffOffset + this.header.nCmdAdd * 1);
        dst.z = this._readDiff(this._diffOffset + this.header.nCmdAdd * 5, this._diffOffset + this.header.nCmdAdd * 2);
        this._diffOffset++;
        return dst;
    }
    /**
     * @returns Is there command unread.
     */
    hasCommands() {
        return this._cmdOffset < this._cmdEnd;
    }
    _readAux() {
        const low = this._view.getUint8(this._auxOffset);
        const high = this._view.getUint8(this._auxOffset + this.header.nAux);
        const aux = (high << 8) | low;
        this._auxOffset++;
        return aux;
    }
    _readDiff(highPartIndex, lowPartIndex) {
        return Object(_utils__WEBPACK_IMPORTED_MODULE_1__["zigZagUnpack"])(this._view.getUint8(highPartIndex) << 8 |
            this._view.getUint8(lowPartIndex));
    }
}


/***/ }),
/* 83 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ORIGIN", function() { return ORIGIN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POSITIVE_X", function() { return POSITIVE_X; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NEGATIVE_X", function() { return NEGATIVE_X; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POSITIVE_Y", function() { return POSITIVE_Y; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NEGATIVE_Y", function() { return NEGATIVE_Y; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POSITIVE_Z", function() { return POSITIVE_Z; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NEGATIVE_Z", function() { return NEGATIVE_Z; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function() { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "areEqual", function() { return areEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "areFuzzyEqual", function() { return areFuzzyEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "areCollinear", function() { return areCollinear; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "add", function() { return add; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sub", function() { return sub; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mulv", function() { return mulv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "muln", function() { return muln; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "divv", function() { return divv; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "divn", function() { return divn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "length", function() { return length; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distance", function() { return distance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalize", function() { return normalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dot", function() { return dot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cross", function() { return cross; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateX", function() { return rotateX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateY", function() { return rotateY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateZ", function() { return rotateZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "X_AXIS", function() { return X_AXIS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Y_AXIS", function() { return Y_AXIS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Z_AXIS", function() { return Z_AXIS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XY", function() { return XY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "YZ", function() { return YZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZX", function() { return ZX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPlaneLineIntersection", function() { return getPlaneLineIntersection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPlaneRayIntersection", function() { return getPlaneRayIntersection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPlanePlaneIntersection", function() { return getPlanePlaneIntersection; });
/* harmony import */ var _matrix3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84);
/* harmony import */ var _util_fuzzy_equal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(44);


/**
 * Creates a new vector and initializes it with given components.
 *
 * @param x X component of the vector.
 * @param y Y component of the vector.
 * @param z Z component of the vector.
 * @returns The vector.
 */
function create(x, y, z) {
    return { x, y, z };
}
const ORIGIN = create(0, 0, 0);
const POSITIVE_X = create(1, 0, 0);
const NEGATIVE_X = create(-1, 0, 0);
const POSITIVE_Y = create(0, 1, 0);
const NEGATIVE_Y = create(0, -1, 0);
const POSITIVE_Z = create(0, 0, 1);
const NEGATIVE_Z = create(0, 0, -1);
/**
 * Copies a vector to another one.
 *
 * @param src The source vector.
 * @param dst The vector the source vector will be copied to.
 * @returns `dst`.
 */
function copy(src, dst = create(0, 0, 0)) {
    dst.x = src.x;
    dst.y = src.y;
    dst.z = src.z;
    return dst;
}
/**
 * Checks if two vectors are strictly equal component-wise.
 *
 * @param v1 The first vector.
 * @param v2 The second vector.
 * @returns `true` if the vectors are equal and `false` otherwise.
 */
function areEqual(v1, v2) {
    return v1.x === v2.x && v1.y === v2.y && v1.z === v2.z;
}
/**
 * Checks if corresponding components of two vectors are all within given
 * tolerance from each other.
 *
 * @param v1 The first vector.
 * @param v2 The second vector.
 * @param tolerance The tolerance.
 * @returns `true` if the vectors are "fuzzy" equal and `false` otherwise.
 */
function areFuzzyEqual(v1, v2, tolerance = _util_fuzzy_equal__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_TOLERANCE"]) {
    return (Object(_util_fuzzy_equal__WEBPACK_IMPORTED_MODULE_1__["default"])(v1.x, v2.x, tolerance) &&
        Object(_util_fuzzy_equal__WEBPACK_IMPORTED_MODULE_1__["default"])(v1.y, v2.y, tolerance) &&
        Object(_util_fuzzy_equal__WEBPACK_IMPORTED_MODULE_1__["default"])(v1.z, v2.z, tolerance));
}
/**
 * Checks if two vectors are collinear.
 *
 * @param v1 The first vector.
 * @param v2 The second vector.
 * @returns `true` if the vectors are collinear and `false` otherwise.
 */
function areCollinear(v1, v2) {
    const lambdaX = v1.x / v2.x;
    const lambdaY = v1.y / v2.y;
    const lambdaZ = v1.z / v2.z;
    return lambdaX === lambdaY && lambdaY === lambdaZ;
}
/**
 * Adds two vector and stores the result into a third one, i.e. `dst = a + b`.
 *
 * @param a The first vector.
 * @param b The second vector.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function add(a, b, dst = create(0, 0, 0)) {
    dst.x = a.x + b.x;
    dst.y = a.y + b.y;
    dst.z = a.z + b.z;
    return dst;
}
/**
 * Subtracts a vector from another one and stores the result to a third one, i.e.
 * `dst = a - b`.
 *
 * @param a The minuend vector.
 * @param b The subtrahend vector.
 * @param dst The vector the result will be stored to.
 */
function sub(a, b, dst = create(0, 0, 0)) {
    dst.x = a.x - b.x;
    dst.y = a.y - b.y;
    dst.z = a.z - b.z;
    return dst;
}
/**
 * Multiplies two vectors component-wise and stores the result into a third one.
 *
 * @param a The first vector.
 * @param b The second vector.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function mulv(a, b, dst = create(0, 0, 0)) {
    dst.x = a.x * b.x;
    dst.y = a.y * b.y;
    dst.z = a.z * b.z;
    return dst;
}
/**
 * Multiplies a vector by a scalar and stores the result into a third vector.
 *
 * @param a The vector.
 * @param n The scalar.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function muln(a, n, dst = create(0, 0, 0)) {
    dst.x = a.x * n;
    dst.y = a.y * n;
    dst.z = a.z * n;
    return dst;
}
/**
 * Divides a vector by another one component wise and stores the result into a
 * third one.
 *
 * @param a The dividend vector.
 * @param b The divisor vector.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function divv(a, b, dst = create(0, 0, 0)) {
    dst.x = a.x / b.x;
    dst.y = a.y / b.y;
    dst.z = a.z / b.z;
    return dst;
}
/**
 * Divides a vector by a scalar and stores the result into a third vector.
 *
 * @param a The dividend vector.
 * @param n The scalar.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function divn(a, n, dst = create(0, 0, 0)) {
    dst.x = a.x / n;
    dst.y = a.y / n;
    dst.z = a.z / n;
    return dst;
}
/**
 * Computes length of a vector.
 *
 * @param v The vector.
 * @returns The length.
 */
function length(v) {
    return Math.hypot(v.x, v.y, v.z);
}
/**
 * Computes distance between ends of two vectors.
 *
 * @param a The first vector.
 * @param b The second vector.
 * @returns The distance, i.e. `length(sub(a, b))`.
 */
function distance(a, b) {
    return Math.hypot(a.x - b.x, a.y - b.y, a.z - b.z);
}
/**
 * Divides a vector by its length (thus making it a unit vector) and stores the
 * result to another one.
 *
 * @param v The vector to be normalized.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function normalize(v, dst = create(0, 0, 0)) {
    return divn(v, length(v), dst);
}
/**
 * Computes dot product of two vectors.
 *
 * @param a The first vector.
 * @param b The second vector.
 * @returns The dot product.
 */
function dot(a, b) {
    return a.x * b.x + a.y * b.y + a.z * b.z;
}
/**
 * Computes cross product of two vectors and stores it to a third one.
 *
 * @param a The first vector.
 * @param b The second vector.
 * @param dst The vector the result will be stored to.
 * @returns `dst`.
 */
function cross(a, b, dst = create(0, 0, 0)) {
    // Write components to a separate variables so we don't produce incorrect
    // results in cases when a == dst or b == dst.
    const x = a.y * b.z - a.z * b.y;
    const y = a.z * b.x - a.x * b.z;
    const z = a.x * b.y - a.y * b.x;
    dst.x = x;
    dst.y = y;
    dst.z = z;
    return dst;
}
/**
 * Rotates vector about the X axis.
 *
 * @param v The vector to be rotated.
 * @param angle The angle of rotation (in radians), positive values rotates from +Y to +Z
 * @param dst The vector the result will be stored to.
 */
function rotateX(v, angle, dst = create(0, 0, 0)) {
    const cos = Math.cos(angle);
    const sin = Math.sin(angle);
    const y = v.y;
    dst.x = v.x;
    dst.y = y * cos - v.z * sin;
    dst.z = y * sin + v.z * cos;
    return dst;
}
/**
 * Rotates vector about the Y axis.
 *
 * @param v The vector to be rotated.
 * @param angle The angle of rotation (in radians), positive values rotates from +X to +Z
 * @param dst The vector the result will be stored to.
 */
function rotateY(v, angle, dst = create(0, 0, 0)) {
    const cos = Math.cos(angle);
    const sin = Math.sin(angle);
    // handle the case when source and destination are the same object: related components can break each other
    v = (v === dst) ? copy(v) : v;
    dst.x = v.x * cos + v.z * sin;
    dst.y = v.y;
    dst.z = -v.x * sin + v.z * cos;
    return dst;
}
/**
 * Rotates vector about the Z axis.
 *
 * @param v The vector to be rotated.
 * @param angle The angle of rotation (in radians), positive values rotates from +X to +Y
 * @param dst The vector the result will be stored to.
 */
function rotateZ(v, angle, dst = create(0, 0, 0)) {
    const cos = Math.cos(angle);
    const sin = Math.sin(angle);
    // handle the case when source and destination are the same object: related components can break each other
    v = (v === dst) ? copy(v) : v;
    dst.x = v.x * cos - v.y * sin;
    dst.y = v.x * sin + v.y * cos;
    dst.z = v.z;
    return dst;
}
const X_AXIS = {
    origin: ORIGIN,
    tangent: POSITIVE_X
};
const Y_AXIS = {
    origin: ORIGIN,
    tangent: POSITIVE_Y
};
const Z_AXIS = {
    origin: ORIGIN,
    tangent: POSITIVE_Z
};
const XY = {
    normal: POSITIVE_Z,
    distance: 0
};
const YZ = {
    normal: POSITIVE_X,
    distance: 0
};
const ZX = {
    normal: POSITIVE_Y,
    distance: 0
};
/**
 * Computes intersection of a plane and a line.
 *
 * @param p The plane.
 * @param l The line.
 * @returns The point or `null` if the line is parallel to the plane.
 */
function getPlaneLineIntersection(p, l) {
    const dotLP = dot(l.tangent, p.normal);
    // If plane normal and line tangent vector are perpendicular intersection is
    // either an empty set or the line itself.
    if (dotLP === 0) {
        return null;
    }
    const intersection = copy(l.tangent);
    muln(intersection, (p.distance - dot(p.normal, l.origin)) / dotLP, intersection);
    add(intersection, l.origin, intersection);
    return intersection;
}
/**
 * Computes an intersection of a plane and a ray and stores it into a given
 * vector.
 *
 * @param plane The plane.
 * @param ray The ray.
 * @param dst The vector the intersection point will be stored to. If there's no
 *      intersection, this vector will be left unmodified.
 * @returns The `dst` or `null` if the ray doesn't have a common point with the
 *      plane.
 */
function getPlaneRayIntersection(plane, ray, dst = create(0, 0, 0)) {
    const dotRP = dot(ray.direction, plane.normal);
    if (dotRP === 0) {
        // The plane normal and the ray direction vector are perpendicular, so
        // intersection is either an empty set or the ray itself.
        return null;
    }
    const lambda = (plane.distance - dot(plane.normal, ray.origin)) / dotRP;
    if (lambda < 0) {
        // The intersection point is on a line that contains the ray, but not on
        // the ray itself.
        return null;
    }
    copy(ray.direction, dst);
    muln(dst, lambda, dst);
    add(dst, ray.origin, dst);
    return dst;
}
/**
 * Computes intersection of two planes.
 *
 * @param p1 The first plane.
 * @param p2 The second plane.
 * @returns The line or `null` if the planes are parallel to each other.
 */
function getPlanePlaneIntersection(p1, p2) {
    const n1 = p1.normal;
    const n2 = p2.normal;
    if (areCollinear(n1, n2)) {
        return null;
    }
    const tangent = cross(n1, n2);
    normalize(tangent);
    return {
        tangent,
        origin: _matrix3__WEBPACK_IMPORTED_MODULE_0__["solve"](_matrix3__WEBPACK_IMPORTED_MODULE_0__["fromRows"](n1, n2, tangent), create(p1.distance, p2.distance, 0))
    };
}


/***/ }),
/* 84 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return create; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zero", function() { return zero; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRows", function() { return fromRows; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "columns", function() { return columns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromColumns", function() { return fromColumns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "determinant", function() { return determinant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "solve", function() { return solve; });
/* harmony import */ var _vector3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(83);

const MATRIX_SIZE = 9;
/**
 * Creates and returns a new **uninitialized** matrix.
 */
function create() {
    return new Array(MATRIX_SIZE);
}
/**
 * Zeroes a matrix.
 *
 * @param dst The matrix.
 * @returns `dst`.
 */
function zero(dst = create()) {
    for (let i = 0; i < MATRIX_SIZE; ++i) {
        dst[i] = 0;
    }
    return dst;
}
/**
 * Copies three vectors to a matrix as rows.
 *
 * @param r0 The first row.
 * @param r1 The second row.
 * @param r2 The third row.
 * @param dst The matrix the rows will be written to.
 * @returns `dst`.
 */
function fromRows(r0, r1, r2, dst = create()) {
    dst[0] = r0.x;
    dst[1] = r1.x;
    dst[2] = r2.x;
    dst[3] = r0.y;
    dst[4] = r1.y;
    dst[5] = r2.y;
    dst[6] = r0.z;
    dst[7] = r1.z;
    dst[8] = r2.z;
    return dst;
}
/**
 * Returns array of columns of a matrix.
 *
 * @param m The matrix.
 * @param dst The array columns of the matrix will be written to.
 * @returns `dst`.
 */
function columns(m, dst = [
    _vector3__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0, 0),
    _vector3__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0, 0),
    _vector3__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0, 0)
]) {
    for (let i = 0, j = 0; i < 3; ++i, j += 3) {
        dst[i].x = m[j];
        dst[i].y = m[j + 1];
        dst[i].z = m[j + 2];
    }
    return dst;
}
/**
 * Copies three vectors to a matrix as columns.
 *
 * @param c0 The first column.
 * @param c1 The second column.
 * @param c2 The third column.
 * @param dst The matrix the columns will be written to.
 * @returns `dst`.
 */
function fromColumns(c0, c1, c2, dst = create()) {
    dst[0] = c0.x;
    dst[1] = c0.y;
    dst[2] = c0.z;
    dst[3] = c1.x;
    dst[4] = c1.y;
    dst[5] = c1.z;
    dst[6] = c2.x;
    dst[7] = c2.y;
    dst[8] = c2.z;
    return dst;
}
/**
 * Computes determinant of a matrix.
 *
 * @param m The matrix.
 * @returns The determinant.
 */
function determinant(m) {
    return m[0] * (m[4] * m[8] - m[7] * m[5]) +
        m[3] * (m[1] * m[8] - m[7] * m[2]) +
        m[6] * (m[1] * m[5] - m[4] * m[2]);
}
const staticMatrixColumns = [
    // Not using vector3.create here due to circular dependency.
    { x: 0, y: 0, z: 0 },
    { x: 0, y: 0, z: 0 },
    { x: 0, y: 0, z: 0 }
];
const staticMatrix = create();
/**
 * Solves a system of linear equations represented with a matrix and a vector,
 * i.e.:
 *
 * ```
 * m * (x, y ,z)^T = v
 * ```
 *
 * Uses Cramer's rule.
 * @see https://en.wikipedia.org/wiki/Cramer's_rule
 *
 * @param m The matrix of the system.
 * @param v The vector of the system.
 * @param dst The vector solution of the system will be written to.
 * @return `dst`.
 */
function solve(m, v, dst = _vector3__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0, 0)) {
    const revDet = 1 / determinant(m);
    const [c0, c1, c2] = columns(m, staticMatrixColumns);
    dst.x = revDet * determinant(fromColumns(v, c1, c2, staticMatrix));
    dst.y = revDet * determinant(fromColumns(c0, v, c2, staticMatrix));
    dst.z = revDet * determinant(fromColumns(c0, c1, v, staticMatrix));
    return dst;
}


/***/ }),
/* 85 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cyclicNextIndex", function() { return cyclicNextIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cyclicPrevIndex", function() { return cyclicPrevIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cyclicNext", function() { return cyclicNext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cyclicPrev", function() { return cyclicPrev; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zigZagUnpack", function() { return zigZagUnpack; });
/**
 * @returns The next index of specified array or "0" if the index points to te last element.
 */
function cyclicNextIndex(list, index) {
    return (index + 1) % list.length;
}
/**
 * @returns The prev index of specified array or "list.length-1" if the index points to te first element.
 */
function cyclicPrevIndex(list, index) {
    return (index || list.length) - 1;
}
/**
 * @returns The next to specified by index element or the first element if the index points to te last.
 */
function cyclicNext(list, index) {
    return list[cyclicNextIndex(list, index)];
}
/**
 * @returns The prev to specified by index element or the last element if the index points to te first.
 */
function cyclicPrev(list, index) {
    return list[cyclicPrevIndex(list, index)];
}
/**
 * The same idea as described here https://en.wikipedia.org/wiki/Variable-length_quantity#Zigzag_encoding/.
 *
 * @returns Decoded number.
 */
function zigZagUnpack(v) {
    return (v >> 1) ^ (-(v & 1));
}


/***/ }),
/* 86 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseManifold", function() { return parseManifold; });
/* harmony import */ var _math_vector3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(83);
/* harmony import */ var _util_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51);
/* harmony import */ var _node__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(87);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(85);




const tmpDiff = _math_vector3__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0, 0);
const tmpVertex = _math_vector3__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0, 0);
const tmpCommand = { type: 0 /* ADD */, valence: 0, shift: 0 };
/**
 * Writes vertices of three node into the output buffer if the is no a hole node between them.
 */
function writeTriangle(node1, node2, node3, output) {
    if (!_node__WEBPACK_IMPORTED_MODULE_2__["HoleNode"].isHoleNode(node1) &&
        !_node__WEBPACK_IMPORTED_MODULE_2__["HoleNode"].isHoleNode(node2) &&
        !_node__WEBPACK_IMPORTED_MODULE_2__["HoleNode"].isHoleNode(node3)) {
        output.writeIndices([node1.index, node2.index, node3.index]);
    }
}
/**
 * Each manifold restoring starts with a triangle. This function read the first three vertices, forms a triangle
 * of them and return this initialized node ring to be processed further.
 */
function getInitTriangle(reader, decoder, output) {
    const vertex = _math_vector3__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0, 0);
    const ring = new Array(3);
    for (let i = 0; i < 3; i++) {
        const command = reader.readCommand();
        if (command.type === 1 /* HOLE */) {
            ring[i] = new _node__WEBPACK_IMPORTED_MODULE_2__["HoleNode"](command.valence);
        }
        else if (command.type === 0 /* ADD */) {
            reader.readDiff(tmpDiff);
            _math_vector3__WEBPACK_IMPORTED_MODULE_0__["add"](vertex, tmpDiff, vertex);
            ring[i] = new _node__WEBPACK_IMPORTED_MODULE_2__["default"](command.valence, _math_vector3__WEBPACK_IMPORTED_MODULE_0__["copy"](vertex), output.writeVertex(decoder.decode(vertex)));
        }
    }
    for (let i = 0; i < ring.length; i++) {
        ring[i].setNeighbors(Object(_utils__WEBPACK_IMPORTED_MODULE_3__["cyclicNext"])(ring, i), Object(_utils__WEBPACK_IMPORTED_MODULE_3__["cyclicPrev"])(ring, i));
    }
    writeTriangle(ring[0], ring[1], ring[2], output);
    return ring;
}
const spanComparator = (a, b) => a - b;
/**
 * Removes finished (with all edges processed) nodes from the active ring before processing the next command.
 */
function prepareActiveRing(ring, output) {
    const spans = new Array(ring.length);
    for (let i = 0, unprocessedNodes = ring.length; unprocessedNodes > 0;) {
        spans[i] = ring[i].calculateSpan(Object(_utils__WEBPACK_IMPORTED_MODULE_3__["cyclicPrev"])(ring, i), Object(_utils__WEBPACK_IMPORTED_MODULE_3__["cyclicNext"])(ring, i));
        if (spans[i] > 1) {
            i = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["cyclicNextIndex"])(ring, i);
            unprocessedNodes--;
        }
        else if (spans[i] === 1) {
            const node1 = ring[i];
            const node2 = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["cyclicPrev"])(ring, i);
            const node3 = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["cyclicNext"])(ring, i);
            node3.setAfter(node1, node2);
            node2.setBefore(node1, node3);
            writeTriangle(node1, node2, node3, output);
            for (let j = i; j < spans.length - 1; j++) {
                spans[j] = spans[j + 1];
            }
            ring.splice(i, 1);
            i = Object(_utils__WEBPACK_IMPORTED_MODULE_3__["cyclicPrevIndex"])(ring, i);
            unprocessedNodes++;
        }
        else {
            _util_array__WEBPACK_IMPORTED_MODULE_1__["rotate"](ring, ring.length - Object(_utils__WEBPACK_IMPORTED_MODULE_3__["cyclicNextIndex"])(ring, i));
            ring.splice(ring.length - 2, 2);
            i = 0;
            unprocessedNodes = ring.length;
        }
        if (ring.length < 3) {
            return;
        }
    }
    let minIndex = 0;
    let min = [spans[minIndex], spans[Object(_utils__WEBPACK_IMPORTED_MODULE_3__["cyclicPrevIndex"])(ring, minIndex)], spans[Object(_utils__WEBPACK_IMPORTED_MODULE_3__["cyclicNextIndex"])(ring, minIndex)]];
    for (let i = 1; i < ring.length; i++) {
        const triangleSpans = [spans[i], spans[Object(_utils__WEBPACK_IMPORTED_MODULE_3__["cyclicPrevIndex"])(ring, i)], spans[Object(_utils__WEBPACK_IMPORTED_MODULE_3__["cyclicNextIndex"])(ring, i)]];
        if (_util_array__WEBPACK_IMPORTED_MODULE_1__["compare"](spanComparator, triangleSpans, min) < 0) {
            min = triangleSpans;
            minIndex = i;
        }
    }
    _util_array__WEBPACK_IMPORTED_MODULE_1__["rotate"](ring, ring.length - minIndex);
}
/**
 * Writes triangle that arises from the next node using the two ends of the active ring.
 */
function closeTriangle(output, front, back, add, dist, base) {
    add.setNeighbors(front, back, dist, base);
    front.setAfter(back, add);
    back.setBefore(front, add);
    writeTriangle(add, front, back, output);
}
/**
 * Process the next command.
 */
function processCommand(cmd, queue, reader, decoder, output) {
    const active = queue[0];
    const front = active[0];
    const back = active[active.length - 1];
    switch (cmd.type) {
        case 0 /* ADD */: {
            const m = front.getPrevNeighbor(back);
            let base;
            if (_node__WEBPACK_IMPORTED_MODULE_2__["HoleNode"].isHoleNode(front) || _node__WEBPACK_IMPORTED_MODULE_2__["HoleNode"].isHoleNode(back) || _node__WEBPACK_IMPORTED_MODULE_2__["HoleNode"].isHoleNode(m)) {
                base = _node__WEBPACK_IMPORTED_MODULE_2__["HoleNode"].isHoleNode(front) ? back.vertex : front.vertex;
            }
            else {
                // diff is a diff to predicted position:
                // https://wiki.yandex-team.ru/maps/dev/core/renderer/vec3d/#geometrijaupakovkakoordinatvershin
                _math_vector3__WEBPACK_IMPORTED_MODULE_0__["add"](back.vertex, front.vertex, tmpVertex);
                _math_vector3__WEBPACK_IMPORTED_MODULE_0__["sub"](tmpVertex, m.vertex, tmpVertex);
                decoder.clamp(tmpVertex, tmpVertex);
                base = tmpVertex;
            }
            reader.readDiff(tmpDiff);
            _math_vector3__WEBPACK_IMPORTED_MODULE_0__["add"](base, tmpDiff, tmpVertex);
            const vertex = _math_vector3__WEBPACK_IMPORTED_MODULE_0__["copy"](tmpVertex);
            const vertexDecoded = decoder.decode(vertex);
            const node = new _node__WEBPACK_IMPORTED_MODULE_2__["default"](cmd.valence, vertex, output.writeVertex(vertexDecoded));
            closeTriangle(output, front, back, node, 0);
            active.push(node);
            break;
        }
        case 1 /* HOLE */: {
            const node = new _node__WEBPACK_IMPORTED_MODULE_2__["HoleNode"](cmd.valence);
            closeTriangle(output, front, back, node, 0);
            active.push(node);
            break;
        }
        case 2 /* SPLIT */: {
            const add = cmd.shift;
            closeTriangle(output, front, back, active[add], cmd.valence, active[add - 1]);
            queue.push(active.slice(0, add + 1));
            active.splice(0, add);
            break;
        }
        case 3 /* MERGE */: {
            let other = 1;
            for (; other !== queue.length && queue[other].length <= cmd.shift; other++) {
                cmd.shift -= queue[other].length;
            }
            _util_array__WEBPACK_IMPORTED_MODULE_1__["rotate"](queue[other], queue[other].length - cmd.shift);
            const add = queue[other][0];
            closeTriangle(output, front, back, add, cmd.valence, queue[other][queue[other].length - 1]);
            queue[other].push(queue[other][0]);
            active.splice(0, 0, ...queue[other]);
            queue.splice(other, 1);
            break;
        }
    }
}
/**
 * Read a portion of the model (manifold) from the file and writes vertices/triangles into the output.
 */
function parseManifold(reader, decoder, output) {
    const ring = getInitTriangle(reader, decoder, output);
    const queue = [ring];
    while (queue.length !== 0) {
        // active ring is the first element int the queue
        prepareActiveRing(queue[0], output);
        while (queue[0].length > 2) {
            processCommand(reader.readCommand(tmpCommand), queue, reader, decoder, output);
            prepareActiveRing(queue[0], output);
        }
        queue.shift();
    }
    return output.flush();
}


/***/ }),
/* 87 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Node; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HoleNode", function() { return HoleNode; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85);
/* harmony import */ var _math_vector3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(83);


/**
 * A node of the model mesh. Basically it is a vertex, but also contains some intermediate data to
 * restore the mesh during parsing.
 */
class Node {
    /**
     * @param valence Number adjacent vertices.
     * @param vertex Coordinates of the node.
     * @param index Position of the vertex in a storage (like GL buffer or an intermediate array buffer).
     */
    constructor(valence, vertex, index) {
        this.vertex = vertex;
        this.index = index;
        this._neighbours = new Array(valence).fill(undefined);
    }
    /**
     * @returns Distance between two neighbors in the node's neighbors list.
     */
    calculateSpan(a, b) {
        const aIndex = this._neighbours.indexOf(a);
        const bIndex = this._neighbours.indexOf(b);
        return (this._neighbours.length + (bIndex - aIndex)) % this._neighbours.length;
    }
    /**
     * Sets two neighbors that forms a triangle with the current one.
     */
    setNeighbors(a, b, span = 0, prev) {
        let index = (this._neighbours.indexOf(prev) + span) % this._neighbours.length;
        this._neighbours[index] = a;
        index = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["cyclicNextIndex"])(this._neighbours, index);
        this._neighbours[index] = b;
    }
    /**
     * Sets a neighbor before the specified one.
     */
    setBefore(next, val) {
        const index = this._neighbours.indexOf(next);
        this._neighbours[Object(_utils__WEBPACK_IMPORTED_MODULE_0__["cyclicPrevIndex"])(this._neighbours, index)] = val;
    }
    /**
     * Sets a neighbor next to the specified one.
     */
    setAfter(prev, val) {
        const index = this._neighbours.indexOf(prev);
        this._neighbours[Object(_utils__WEBPACK_IMPORTED_MODULE_0__["cyclicNextIndex"])(this._neighbours, index)] = val;
    }
    /**
     * @returns Neighbor previous to the specified one.
     */
    getPrevNeighbor(val) {
        const index = this._neighbours.indexOf(val);
        return Object(_utils__WEBPACK_IMPORTED_MODULE_0__["cyclicPrev"])(this._neighbours, index);
    }
    /**
     * @returns Neighbor next to the specified one.
     */
    getNextNeighbor(val) {
        const index = this._neighbours.indexOf(val);
        return Object(_utils__WEBPACK_IMPORTED_MODULE_0__["cyclicNext"])(this._neighbours, index);
    }
}
const STUB_HOLE_NODE_VERTEX = _math_vector3__WEBPACK_IMPORTED_MODULE_1__["create"](-1, -1, -1);
const STUB_HOLE_NODE_INDEX = -1;
/**
 * A special type of nodes that do not represent a real vertex (and is not supposed to be written into a buffer),
 * but required to support the mesh structure.
 */
class HoleNode extends Node {
    constructor(valence) {
        super(valence, STUB_HOLE_NODE_VERTEX, STUB_HOLE_NODE_INDEX);
    }
    static isHoleNode(node) {
        return node instanceof HoleNode;
    }
}


/***/ }),
/* 88 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return VertexDecoder; });
/* harmony import */ var _math_vector3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(83);
/* harmony import */ var _math_scalar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(42);
/* harmony import */ var _util_gputypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(50);



/**
 * Vertex components are encoded in two bytes with specified precision to facilitate better compression.
 * This decoder translate those values into floats.
 */
class VertexDecoder {
    constructor(precision) {
        this._precisionXY = precision & 0xF;
        this._precisionZ = precision >> 4;
        this._shiftXY = 16 - this._precisionXY;
        this._shiftZ = 16 - this._precisionZ;
        this._maxXY = (1 << this._precisionXY) - 1;
        this._maxZ = (1 << this._precisionZ) - 1;
    }
    /**
     * @returns Vector with components clamped to their max values.
     */
    clamp(vertex, dst = _math_vector3__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0, 0)) {
        dst.x = Object(_math_scalar__WEBPACK_IMPORTED_MODULE_1__["clamp"])(vertex.x, 0, this._maxXY);
        dst.y = Object(_math_scalar__WEBPACK_IMPORTED_MODULE_1__["clamp"])(vertex.y, 0, this._maxXY);
        dst.z = Object(_math_scalar__WEBPACK_IMPORTED_MODULE_1__["clamp"])(vertex.z, 0, this._maxZ);
        return dst;
    }
    /**
     * @param vertex Encoded vertex.
     * @param dst The output vector.
     * @returns Decoded vertex (components are adjusted by the precision and converted into floats)
     */
    decode(vertex, dst = _math_vector3__WEBPACK_IMPORTED_MODULE_0__["create"](0, 0, 0)) {
        dst.x = VertexDecoder._decode(vertex.x, this._precisionXY, this._shiftXY);
        dst.y = VertexDecoder._decode(vertex.y, this._precisionXY, this._shiftXY);
        dst.z = VertexDecoder._decode(vertex.z, this._precisionZ, this._shiftZ);
        return dst;
    }
    static _decode(value, precision, shift) {
        value = value << shift;
        value |= value >> precision;
        value = Object(_util_gputypes__WEBPACK_IMPORTED_MODULE_2__["uint16ToFloat"])(value);
        return value;
    }
}


/***/ }),
/* 89 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appendToBatch", function() { return appendToBatch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "batchAllocatedObjects", function() { return batchAllocatedObjects; });
/**
 * Appends portion of memory to batch if they are adjacent.
 *
 * @returns `true` if both params are adjacent and the batch was successfully updated, `false` otherwise.
 */
function appendToBatch(memoryLocation, batch) {
    if (batch.vertexByteOffset + batch.vertexByteLength === memoryLocation.vertexByteOffset &&
        batch.indexByteOffset + batch.indexByteLength === memoryLocation.indexByteOffset) {
        batch.vertexByteLength += memoryLocation.vertexByteLength;
        batch.indexByteLength += memoryLocation.indexByteLength;
        return true;
    }
    return false;
}
/**
 * Combines objects allocated in memory into batches. No sorting is done in this method, the objects are supposed
 * to be sorted by index/vertex offsets to make batching effective. The batch is created by factory since it can
 * contains problem specific information.
 *
 * @param objects List of allocated objects.
 * @param getMemoryLocation Returns memory location of specific object.
 * @param createBatch Initiates batch by the first object.
 * @param canBatch Checks if two objects can be allocated.
 * @returns Iterable list of batches.
 */
function* batchAllocatedObjects(objects, getMemoryLocation, createBatch, canBatch = () => true) {
    const iterator = objects[Symbol.iterator]();
    let primitive = iterator.next().value;
    if (!primitive) {
        return;
    }
    let prev = primitive;
    let batch = createBatch(prev);
    primitive = iterator.next().value;
    while (primitive) {
        const primitiveMemoryLocation = getMemoryLocation(primitive);
        if (!canBatch(prev, primitive, batch) || !appendToBatch(primitiveMemoryLocation, batch)) {
            yield batch;
            batch = createBatch(primitive);
        }
        prev = primitive;
        primitive = iterator.next().value;
    }
    yield batch;
}


/***/ }),
/* 90 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TaskQueue; });
/* harmony import */ var _priority_queue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91);
/* harmony import */ var _util_event_emitter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);


const DEQUEUE_TIMEOUT = 1; // ms
/**
 * Prioritized task queue.
 */
class TaskQueue {
    /**
     * Constructs an empty task queue.
     */
    constructor() {
        this._queue = new _priority_queue__WEBPACK_IMPORTED_MODULE_0__["default"]();
        this._frozen = false;
        this._dequeueTimeoutHandle = 0;
        this.onEmpty = new _util_event_emitter__WEBPACK_IMPORTED_MODULE_1__["VoidEventEmitter"]();
    }
    /**
     * Destroys the queue. Any remaining tasks won't be executed.
     */
    destroy() {
        clearTimeout(this._dequeueTimeoutHandle);
    }
    /**
     * Enqueues a task to the queue and schedules processing of the queue.
     *
     * @param task The task.
     * @returns Promise that will be fullfilled when the task successfully
     *      finishes or rejected if there's an error.
     */
    enqueue(task) {
        if (!this._frozen) {
            this._setDequeueTimeout();
        }
        return new Promise((resolve, reject) => {
            this._queue.enqueue({
                execute() {
                    try {
                        task.execute();
                        resolve();
                    }
                    catch (error) {
                        reject(error);
                    }
                },
                priority: task.priority
            });
        });
    }
    isEmpty() {
        return this._queue.isEmpty();
    }
    freeze() {
        if (this._dequeueTimeoutHandle) {
            clearTimeout(this._dequeueTimeoutHandle);
            this._dequeueTimeoutHandle = 0;
        }
        this._frozen = true;
    }
    unfreeze() {
        this._frozen = false;
        if (!this._queue.isEmpty()) {
            this._setDequeueTimeout();
        }
    }
    _dequeue() {
        const task = this._queue.dequeue();
        if (task) {
            task.execute();
        }
        if (this._queue.isEmpty()) {
            this._dequeueTimeoutHandle = 0;
            this.onEmpty.fire();
        }
        else {
            this._dequeueTimeoutHandle = setTimeout(() => this._dequeue(), DEQUEUE_TIMEOUT);
        }
    }
    _setDequeueTimeout() {
        if (!this._dequeueTimeoutHandle) {
            this._dequeueTimeoutHandle = setTimeout(() => this._dequeue(), DEQUEUE_TIMEOUT);
        }
    }
}


/***/ }),
/* 91 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PriorityQueue; });
/* harmony import */ var _binary_heap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(92);

function itemComparator(a, b) {
    return a.priority - b.priority;
}
/**
 * Priority queue based on a heap.
 */
class PriorityQueue {
    /**
     * Constructs new empty priority queue.
     */
    constructor() {
        this._heap = new _binary_heap__WEBPACK_IMPORTED_MODULE_0__["default"](itemComparator);
    }
    /**
     * Adds an item into the queue.
     *
     * @param item The item.
     */
    enqueue(item) {
        this._heap.insert(item);
    }
    /**
     * Removes next item from the queue.
     *
     * @returns The next item or `undefined` if the queue's empty.
     */
    dequeue() {
        return this._heap.pop();
    }
    /**
     * Checks if the queue has no items in it.
     *
     * @returns `true` if there're no items it the queue and `false` otherwise.
     */
    isEmpty() {
        return this._heap.size === 0;
    }
}


/***/ }),
/* 92 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return BinaryHeap; });
/* harmony import */ var _array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(51);
/* harmony import */ var _comparator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52);


/**
 * Computes index of the parent of an item.
 *
 * @param idx Index of the item.
 * @returns Index of the parent.
 */
function getParentIdx(idx) {
    return (idx + 1 >> 1) - 1;
}
/**
 * Computes index of the left child of an item.
 *
 * @param idx Index of the item.
 * @returns Index of the child.
 */
function getFirstChildIdx(idx) {
    return (idx + 1 << 1) - 1;
}
class BinaryHeap {
    /**
     * Constructs a new empty heap. Order of items in the heap will be defined
     * by a given comparator.
     *
     * @param comparator The comparator.
     */
    constructor(comparator = _comparator__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_COMPARATOR"]) {
        // TODO(dmikis) Investigate preallocation.
        this._items = [];
        this._comparator = comparator;
    }
    /**
     * Inserts an item into the heap.
     *
     * @param item The item to be inserted.
     */
    insert(item) {
        const items = this._items;
        const comparator = this._comparator;
        // Insert the new item as bottom right-most child of the heap.
        let idx = items.push(item) - 1;
        let parentIdx = getParentIdx(idx);
        // Walk the heap upward and restore heap property on the way.
        while (parentIdx > -1 &&
            comparator(items[idx], items[parentIdx]) > 0) {
            Object(_array__WEBPACK_IMPORTED_MODULE_0__["swap"])(items, idx, parentIdx);
            idx = parentIdx;
            parentIdx = getParentIdx(idx);
        }
    }
    /**
     * Removes "maximum" item from the head.
     *
     * @returns The removed item or `undefined` is the heap's empty.
     */
    pop() {
        const items = this._items;
        if (items.length === 0) {
            return undefined;
        }
        const newSize = items.length - 1;
        // Place max item at the end of the items array.
        Object(_array__WEBPACK_IMPORTED_MODULE_0__["swap"])(items, 0, newSize);
        // Walk downward from the new root to restore heap property.
        let idx = 0;
        let childIdx = 1;
        const comparator = this._comparator;
        while (childIdx < newSize) {
            if (childIdx + 1 < newSize &&
                comparator(items[childIdx], items[childIdx + 1]) < 0) {
                childIdx += 1;
            }
            if (comparator(items[idx], items[childIdx]) > 0) {
                break;
            }
            Object(_array__WEBPACK_IMPORTED_MODULE_0__["swap"])(items, idx, childIdx);
            idx = childIdx;
            childIdx = getFirstChildIdx(childIdx);
        }
        // Remove previously placed at the end previous max item.
        return items.pop();
    }
    /**
     * @returns "Maximum" item in the heap or `undefined` if the head is empty.
     */
    peek() {
        return this._items[0];
    }
    /**
     * @returns Iterator over all items in the heap. Note that order of items
     *      is undefined.
     */
    *[Symbol.iterator]() {
        for (const item of this._items) {
            yield item;
        }
    }
    /**
     * @returns Number of items in the heap.
     */
    get size() {
        return this._items.length;
    }
}


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,